digraph HackageGraph {
	"3d-graphics-examples" -> { "GLUT", "OpenGL", "random" }
	"4Blocks" -> { "cairo", "containers", "gtk", "haskell98", "mtl" }
	"AC-Angle" -> {  }
	"AC-Boolean" -> {  }
	"AC-BuildPlatform" -> {  }
	"AC-Colour" -> {  }
	"AC-EasyRaster-GTK" -> { "array", "gtk" }
	"AC-HalfInteger" -> {  }
	"AC-MiniTest" -> { "transformers" }
	"AC-PPM" -> { "bytestring" }
	"AC-Random" -> {  }
	"AC-Terminal" -> { "ansi-terminal" }
	"AC-VanillaArray" -> { "ghc-prim" }
	"AC-Vector" -> {  }
	"AC-Vector-Fancy" -> { "AC-Angle", "AC-Vector" }
	"ADPfusion" -> { "PrimitiveArray", "QuickCheck", "deepseq", "ghc-prim", "primitive", "repa", "strict", "template-haskell", "transformers", "vector" }
	"AERN-Basics" -> { "QuickCheck", "containers", "criterion", "deepseq", "directory", "random", "test-framework", "test-framework-quickcheck2" }
	"AERN-Net" -> { "AERN-Real", "AERN-RnToRm", "binary", "containers", "html", "stm", "time" }
	"AERN-Real" -> { "AERN-Basics", "QuickCheck", "criterion", "test-framework", "test-framework-quickcheck2" }
	"AERN-Real-Double" -> { "AERN-Basics", "AERN-Real", "AERN-Real-Interval", "QuickCheck", "criterion", "ieee-utils", "test-framework", "test-framework-quickcheck2" }
	"AERN-Real-Interval" -> { "AERN-Basics", "AERN-Real", "QuickCheck", "deepseq", "test-framework", "test-framework-quickcheck2" }
	"AERN-RnToRm" -> { "AERN-Real", "QuickCheck", "binary", "containers", "directory", "filepath", "html", "time" }
	"AERN-RnToRm-Plot" -> { "AERN-Real", "AERN-RnToRm", "OpenGL", "binary", "containers", "directory", "filepath", "glade", "glib", "gtk", "gtkglext", "mtl", "stm", "time" }
	"AES" -> { "bytestring", "cereal", "monads-tf", "random", "transformers" }
	"AGI" -> { "mtl", "network", "parsec", "random", "syb", "unix" }
	"ALUT" -> { "OpenAL", "OpenGL" }
	"AMI" -> { "bytestring", "containers", "mtl", "network", "pureMD5", "stm" }
	"ANum" -> {  }
	"ASN1" -> { "HUnit", "NewBinary", "QuickCheck", "containers", "mtl", "old-time", "pretty" }
	"AVar" -> {  }
	"AWin32Console" -> { "Win32", "regex-compat" }
	"AbortT-monadstf" -> { "AbortT-transformers", "monads-tf" }
	"AbortT-mtl" -> { "AbortT-transformers", "mtl" }
	"AbortT-transformers" -> { "transformers" }
	"Adaptive" -> {  }
	"Adaptive-Blaisorblade" -> {  }
	"Advgame" -> { "haskell98", "mtl" }
	"AesonBson" -> { "aeson", "attoparsec", "bson", "unordered-containers", "vector" }
	"Agata" -> { "QuickCheck", "containers", "mtl", "tagged", "template-haskell" }
	"Agda" -> { "Agda", "QuickCheck", "array", "binary", "bytestring", "containers", "deepseq", "directory", "filepath", "geniplate", "hashable", "hashtables", "haskeline", "haskell-src-exts", "mtl", "old-time", "parallel", "pretty", "process", "text", "unordered-containers", "xhtml", "zlib" }
	"Agda-executable" -> { "Agda" }
	"AhoCorasick" -> { "array", "hashable", "mtl", "unordered-containers" }
	"Allure" -> { "LambdaHack", "array", "assert-failure", "binary", "bytestring", "containers", "deepseq", "directory", "enummapset-th", "filepath", "ghc-prim", "hashable", "hsini", "keys", "miniutter", "mtl", "old-time", "pretty-show", "random", "stm", "template-haskell", "text", "transformers", "unordered-containers", "vector", "vector-binary-instances", "zlib" }
	"AndroidViewHierarchyImporter" -> { "QuickCheck", "bytestring", "cmdtheline", "containers", "mtl", "network", "opml", "pretty", "process", "split", "transformers", "xml" }
	"Animas" -> { "random" }
	"Annotations" -> { "mtl", "multirec", "parsec" }
	"Ansi2Html" -> { "mtl", "parsec", "xhtml" }
	"ApplePush" -> { "binary", "bytestring", "haskell98", "json", "mtl", "network" }
	"AppleScript" -> {  }
	"ArrayRef" -> {  }
	"AspectAG" -> { "HList", "containers", "mtl", "template-haskell" }
	"AttoBencode" -> { "attoparsec", "blaze-builder", "blaze-textual", "bytestring", "containers" }
	"AttoJson" -> { "attoparsec", "bytestring", "bytestring-show", "containers", "mtl", "utf8-string" }
	"Attrac" -> { "GLUT", "OpenGL", "array", "colour", "random" }
	"Aurochs" -> { "containers", "parsec", "pretty" }
	"AutoForms" -> { "array", "haskell98", "mtl", "syb-with-class", "template-haskell", "wx", "wxcore" }
	"AvlTree" -> { "COrdering" }
	"BASIC" -> { "containers", "llvm", "random", "timeit" }
	"BNFC" -> { "BNFC", "array", "containers", "directory", "mtl", "pretty", "process" }
	"BNFC-meta" -> { "alex-meta", "array", "happy-meta", "haskell-src-meta", "syb", "template-haskell" }
	"Barracuda" -> { "Crypto", "HaXml", "adhoc-network", "array", "bytestring", "containers", "dataenc", "directory", "filepath", "gtk", "heap", "hsgnutls", "mtl", "network", "old-locale", "parsec", "pkcs1", "random", "regex-compat", "stm", "time", "unix", "utf8-string", "xml-parsec" }
	"Befunge93" -> { "array", "mtl", "random" }
	"BerkeleyDB" -> { "bytestring", "extensible-exceptions" }
	"BerkeleyDBXML" -> { "BerkeleyDB", "bytestring" }
	"BerlekampAlgorithm" -> { "besout" }
	"BigPixel" -> { "array", "bmp", "bytestring", "gloss" }
	"Binpack" -> {  }
	"Biobase" -> { "HsTools", "ParsecTools", "PrimitiveArray", "array", "bytestring", "containers", "deepseq", "directory", "either-unwrap", "file-embed", "filemanip", "filepath", "ghc-prim", "mtl", "parsec", "primitive", "split", "tuple", "utility-ht", "vector", "vector-read-instances", "zlib" }
	"BiobaseBlast" -> { "BiobaseXNA", "array", "containers" }
	"BiobaseDotP" -> { "bytestring", "iteratee" }
	"BiobaseFR3D" -> { "BiobaseXNA", "bytestring", "containers", "filemanip", "iteratee", "tuple" }
	"BiobaseFasta" -> { "biocore", "bytestring", "cmdargs", "conduit", "containers", "transformers" }
	"BiobaseInfernal" -> { "BiobaseXNA", "PrimitiveArray", "attoparsec", "attoparsec-conduit", "biocore", "bytestring", "bytestring-lexing", "conduit", "containers", "either-unwrap", "lens", "primitive", "repa", "transformers", "tuple", "vector" }
	"BiobaseMAF" -> { "bytestring", "containers", "iteratee" }
	"BiobaseTrainingData" -> { "BiobaseDotP", "BiobaseFR3D", "BiobaseXNA", "bytestring", "cmdargs", "either-unwrap", "iteratee", "vector" }
	"BiobaseTurner" -> { "BiobaseXNA", "PrimitiveArray", "bytestring", "bytestring-lexing", "conduit", "containers", "filepath", "lens", "primitive", "repa", "split", "vector" }
	"BiobaseTypes" -> { "primitive", "vector" }
	"BiobaseVienna" -> { "BiobaseTurner", "BiobaseXNA", "PrimitiveArray", "primitive", "vector" }
	"BiobaseXNA" -> { "PrimitiveArray", "bytestring", "cmdargs", "containers", "csv", "file-embed", "mtl", "primitive", "repa", "text", "tuple", "vector" }
	"BirdPP" -> { "haskell98" }
	"BitSyntax" -> { "QuickCheck", "bytestring", "haskell98", "template-haskell" }
	"Bitly" -> { "HTTP", "json2" }
	"BlastHTTP" -> { "HTTP", "biocore", "blastxml", "bytestring", "conduit", "http-conduit", "hxt", "mtl", "network", "transformers" }
	"Blobs" -> { "HaXml", "containers", "directory", "polyparse", "pretty", "wx", "wxcore" }
	"BlogLiterately" -> { "BlogLiterately", "HaXml", "blaze-html", "bool-extras", "bytestring", "cmdargs", "containers", "data-default", "directory", "filepath", "haxr", "highlighting-kate", "hscolour", "lens", "mtl", "pandoc", "pandoc-citeproc", "pandoc-types", "parsec", "process", "split", "strict", "temporary", "transformers", "utf8-string" }
	"BlogLiterately-diagrams" -> { "BlogLiterately", "BlogLiterately-diagrams", "containers", "diagrams-builder", "diagrams-cairo", "diagrams-lib", "directory", "filepath", "pandoc", "safe" }
	"BluePrintCSS" -> { "mtl" }
	"Blueprint" -> {  }
	"Bookshelf" -> { "containers", "directory", "filepath", "pandoc", "pandoc-citeproc", "pandoc-types", "parseargs" }
	"Boolean" -> {  }
	"BoundedChan" -> { "array" }
	"Bravo" -> { "haskell-src-exts", "haskell-src-meta", "mtl", "parsec", "syb", "template-haskell" }
	"Buster" -> { "bytestring", "conduit", "data-default", "errors", "hinotify", "hslogger", "http-conduit", "http-types", "transformers", "unbounded-delays", "unix", "yaml" }
	"CBOR" -> { "binary", "binary-bits", "bytestring", "data-binary-ieee754" }
	"CC-delcont" -> { "mtl" }
	"CC-delcont-alt" -> { "CC-delcont-cxe", "CC-delcont-exc", "CC-delcont-ref", "mtl" }
	"CC-delcont-cxe" -> { "mtl" }
	"CC-delcont-exc" -> { "mtl" }
	"CC-delcont-ref" -> { "mtl" }
	"CC-delcont-ref-tf" -> { "ref-tf", "transformers" }
	"CCA" -> { "array", "containers", "haskell-src", "template-haskell" }
	"CHXHtml" -> { "bytestring", "hxt-regex-xmlschema", "utf8-string" }
	"CLASE" -> { "containers", "filepath", "mtl", "parsec", "template-haskell" }
	"CMCompare" -> { "BiobaseInfernal", "BiobaseXNA", "array", "cmdargs", "containers", "lens" }
	"CMQ" -> { "PSQueue", "bytestring", "cereal", "containers", "iproute", "mtl", "network", "stm", "time" }
	"COrdering" -> {  }
	"CPBrainfuck" -> { "haskell98" }
	"CPL" -> { "array", "containers", "mtl", "parsec" }
	"CSPM-CoreLanguage" -> {  }
	"CSPM-FiringRules" -> { "CSPM-CoreLanguage", "QuickCheck", "containers", "mtl", "parallel-tree-search", "random", "tree-monad" }
	"CSPM-Frontend" -> { "array", "containers", "dlist", "either", "filepath", "ghc-prim", "mtl", "parsec2", "prettyclass", "syb", "transformers" }
	"CSPM-Interpreter" -> { "CSPM-CoreLanguage", "CSPM-Frontend", "array", "containers", "mtl", "prettyclass", "syb" }
	"CSPM-ToProlog" -> { "CSPM-Frontend", "array", "containers", "ghc-prim", "pretty" }
	"CSPM-cspm" -> { "CSPM-CoreLanguage", "CSPM-FiringRules", "CSPM-Frontend", "CSPM-Interpreter", "CSPM-ToProlog", "cmdargs", "containers", "hslua", "parallel", "pretty", "prettyclass", "syb", "transformers", "xml" }
	"CV" -> { "QuickCheck", "array", "binary", "bindings-DSL", "carray", "containers", "deepseq", "directory", "filepath", "lazysmallcheck", "mtl", "mwc-random", "parallel", "parallel-io", "primitive", "storable-complex", "storable-tuple", "vector" }
	"Cabal" -> { "array", "bytestring", "containers", "deepseq", "directory", "filepath", "pretty", "process", "time", "unix" }
	"CabalSearch" -> { "HDBC", "HDBC-sqlite3", "bytestring", "directory", "filepath", "process", "unix" }
	"Capabilities" -> { "compdata", "directory", "free", "unix" }
	"Cardinality" -> { "containers", "mtl" }
	"CarneadesDSL" -> { "containers", "fgl" }
	"CarneadesIntoDung" -> { "CarneadesDSL", "Dung", "containers", "fgl" }
	"Catana" -> { "mtl" }
	"Chart" -> { "array", "colour", "data-default-class", "lens", "mtl", "old-locale", "operational", "time" }
	"Chart-cairo" -> { "Chart", "array", "cairo", "colour", "data-default-class", "lens", "mtl", "old-locale", "operational", "time" }
	"Chart-diagrams" -> { "Chart", "SVGFonts", "blaze-svg", "bytestring", "colour", "containers", "data-default-class", "diagrams-core", "diagrams-lib", "diagrams-postscript", "diagrams-svg", "lens", "mtl", "old-locale", "operational", "text", "time" }
	"Chart-gtk" -> { "Chart", "Chart-cairo", "array", "cairo", "colour", "gtk", "mtl", "old-locale", "time" }
	"Chart-simple" -> { "Chart", "Chart-cairo", "Chart-gtk", "array", "cairo", "colour", "data-default-class", "gtk", "mtl", "old-locale", "time" }
	"ChasingBottoms" -> { "QuickCheck", "array", "containers", "mtl", "random", "syb" }
	"CheatSheet" -> { "containers", "directory" }
	"Checked" -> { "text" }
	"Chitra" -> { "binary", "bytestring", "mtl", "network" }
	"ChristmasTree" -> { "TTTAS", "containers", "fgl", "template-haskell", "uulib" }
	"ClassLaws" -> { "ChasingBottoms", "QuickCheck", "mtl" }
	"ClassyPrelude" -> { "strict" }
	"Clean" -> { "containers" }
	"Clipboard" -> {  }
	"Coadjute" -> { "array", "bytestring", "bytestring-csv", "containers", "directory", "fgl", "filepath", "mtl", "old-time", "pretty", "pureMD5", "safe", "utf8-string" }
	"Codec-Compression-LZF" -> {  }
	"Codec-Image-DevIL" -> { "array" }
	"Combinatorrent" -> { "HTTP", "HUnit", "PSQueue", "QuickCheck", "array", "attoparsec", "bytestring", "cereal", "containers", "deepseq", "directory", "filepath", "hopenssl", "hslogger", "mtl", "network", "network-bytestring", "parsec", "pretty", "random", "random-shuffle", "stm", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "time" }
	"Command" -> { "directory", "process" }
	"Commando" -> { "data-default", "fsnotify", "optparse-applicative", "process", "system-fileio", "system-filepath", "text" }
	"Condor" -> { "binary", "containers", "directory", "filepath", "glider-nlp", "text" }
	"ConfigFile" -> { "MissingH", "containers", "mtl", "parsec" }
	"ConfigFileTH" -> { "ConfigFile", "parsec", "template-haskell" }
	"Configger" -> { "Dangerous", "MissingH", "mtl", "parsec" }
	"Configurable" -> {  }
	"ConsStream" -> { "Stream" }
	"Conscript" -> { "process" }
	"ConstraintKinds" -> { "dlist", "ghc-prim", "vector" }
	"Consumer" -> { "mtl" }
	"ContArrow" -> { "arrows" }
	"Contract" -> { "template-haskell" }
	"Control-Engine" -> { "BoundedChan", "stm" }
	"Control-Monad-MultiPass" -> { "Control-Monad-ST2", "array", "containers", "mtl" }
	"Control-Monad-ST2" -> { "QuickCheck", "SafeSemaphore", "array" }
	"CoreErlang" -> { "parsec", "pretty" }
	"CoreFoundation" -> { "bytestring", "containers", "deepseq", "filepath", "network", "property-list", "tagged", "text", "time", "transformers", "vector" }
	"Coroutine" -> {  }
	"CouchDB" -> { "HTTP", "bytestring", "containers", "json", "mtl", "network", "utf8-string" }
	"Craft3e" -> { "HUnit", "QuickCheck", "mtl", "old-locale", "time" }
	"Crypto" -> { "HUnit", "QuickCheck", "array", "pretty", "random" }
	"CurryDB" -> { "CurryDB", "array", "async", "attoparsec", "attoparsec-conduit", "binary", "blaze-builder", "blaze-textual", "bytestring", "conduit", "containers", "data-default", "fast-logger", "hashable", "lens", "lifted-base", "monad-control", "monad-logger", "mtl", "network", "network-conduit", "optparse-applicative", "stm", "system-fileio", "system-filepath", "template-haskell", "text", "time", "transformers", "transformers-base", "unordered-containers" }
	"DAG-Tournament" -> { "cairo", "containers", "directory", "filepath", "gtk", "mtl", "time" }
	"DAV" -> { "bytestring", "case-insensitive", "containers", "either", "errors", "http-client", "http-client-tls", "http-types", "lens", "lifted-base", "monad-control", "mtl", "network", "optparse-applicative", "transformers", "transformers-base", "xml-conduit", "xml-hamlet" }
	"DBlimited" -> { "containers", "parsec" }
	"DBus" -> { "bytestring" }
	"DOM" -> { "WebBits", "mtl" }
	"DP" -> { "QuickCheck", "array", "containers", "list-tries", "mtl", "safe", "semiring" }
	"DPM" -> { "DPM", "HSH", "HTF", "HTTP", "array", "bytestring", "containers", "convertible", "darcs", "directory", "filepath", "mtl", "network", "old-locale", "pretty", "process", "regex-posix", "split", "syb", "time", "unix" }
	"DRBG" -> { "bytestring", "cereal", "cipher-aes128", "crypto-api", "cryptohash-cryptoapi", "entropy", "mtl", "parallel", "prettyclass", "tagged" }
	"DSH" -> { "FerryCore", "HDBC", "HaXml", "Pathfinder", "array", "bytestring", "containers", "csv", "mtl", "template-haskell", "text" }
	"DSTM" -> { "containers", "haskell98", "network", "process", "unix" }
	"DTC" -> { "haskell-src-exts" }
	"Dangerous" -> { "MaybeT", "mtl" }
	"Dao" -> {  }
	"DarcsHelpers" -> { "HaXml", "mtl", "parsec", "safe", "xml-parsec" }
	"Data-Hash-Consistent" -> { "bytestring", "digest", "utf8-string", "vector", "vector-algorithms" }
	"Data-Rope" -> { "bytestring", "unix" }
	"DataTreeView" -> { "ListLike", "MissingH", "bytestring", "containers", "deepseq", "glib", "gtk", "lifted-base", "monad-control", "mtl", "syb", "transformers-base" }
	"DebugTraceHelpers" -> { "mtl" }
	"Decimal" -> { "deepseq" }
	"DecisionTree" -> { "containers" }
	"DeepArrow" -> { "TypeCompose", "haskell-src", "mtl" }
	"DefendTheKing" -> { "GLUT", "HTTP", "MaybeT", "binary", "bytestring", "containers", "haskell98", "mtl", "network", "peakachu", "random", "time", "utility-ht", "zlib" }
	"DescriptiveKeys" -> { "containers", "xmonad", "xmonad-contrib" }
	"Dflow" -> { "QuickCheck", "containers", "stm", "time" }
	"Diff" -> { "array", "pretty" }
	"DifferentialEvolution" -> { "deepseq", "fclabels", "mtl", "mwc-random", "parallel", "primitive", "vector" }
	"Digit" -> { "HUnit", "QuickCheck", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"DimensionalHash" -> {  }
	"DirectSound" -> { "Win32" }
	"DisTract" -> { "Cabal", "chunks", "containers", "directory", "filepath", "hinstaller", "old-locale", "parsec", "pretty", "process", "template-haskell", "time", "xhtml" }
	"Dish" -> { "Dish", "bytestring" }
	"DistanceTransform" -> { "primitive", "vector" }
	"DistanceUnits" -> {  }
	"DnaProteinAlignment" -> { "ADPfusion", "BiobaseBlast", "BiobaseFasta", "BiobaseXNA", "DnaProteinAlignment", "PrimitiveArray", "ansi-wl-pprint", "array", "biocore", "bytestring", "cmdargs", "conduit", "dlist", "parallel", "repa", "split", "vector" }
	"DocTest" -> { "HUnit", "containers", "ghc", "ghc-paths", "haddock", "process" }
	"Docs" -> { "html" }
	"DrHylo" -> { "array", "containers", "haskell-src-exts", "mtl", "pointless-haskell", "pretty", "syb" }
	"DrIFT" -> { "DrIFT", "filepath", "old-time", "process", "random" }
	"DrIFT-cabalized" -> { "old-time", "process", "random" }
	"Dung" -> { "containers" }
	"Dust" -> { "Dust-crypto", "binary", "bytestring", "cereal", "containers", "crypto-api", "directory", "entropy", "ghc-prim", "network", "random", "random-extras", "random-fu", "random-source", "split", "threefish" }
	"Dust-crypto" -> { "binary", "bytestring", "cereal", "containers", "crypto-api", "cryptohash", "directory", "entropy", "ghc-prim", "network", "random", "random-extras", "random-fu", "random-source", "skein", "split", "threefish" }
	"Dust-tools" -> { "Dust", "Dust-crypto", "binary", "bytestring", "cereal", "containers", "csv", "directory", "entropy", "ghc-prim", "network", "random", "random-extras", "random-fu", "random-source", "split" }
	"Dust-tools-pcap" -> { "Dust", "Dust-crypto", "Dust-tools", "binary", "bytestring", "cereal", "containers", "csv", "directory", "entropy", "ghc-prim", "network", "pcap", "random", "random-extras", "random-fu", "random-source", "split" }
	"DysFRP" -> { "contravariant", "mtl", "time", "transformers" }
	"DysFRP-Cairo" -> { "DysFRP", "cairo", "gtk", "mtl" }
	"DysFRP-Craftwerk" -> { "DysFRP", "DysFRP-Cairo", "cairo", "containers", "craftwerk", "craftwerk-gtk", "gtk" }
	"EEConfig" -> { "containers" }
	"Ebnf2ps" -> { "array", "containers", "directory", "old-time", "unix" }
	"EdisonAPI" -> { "mtl" }
	"EdisonCore" -> { "EdisonAPI", "QuickCheck", "mtl" }
	"EditTimeReport" -> { "array", "containers", "csv", "directory", "editline", "filepath", "haskell98", "html", "pretty", "xhtml" }
	"EitherT" -> { "monad-control", "transformers", "transformers-base" }
	"Elm" -> { "aeson", "aeson-pretty", "binary", "blaze-html", "blaze-markup", "bytestring", "cmdargs", "containers", "directory", "filepath", "indents", "language-ecmascript", "mtl", "pandoc", "parsec", "pretty", "text", "transformers", "union-find", "unordered-containers" }
	"Emping" -> { "array", "containers", "fgl", "gtk", "mtl", "parsec" }
	"Encode" -> { "Cabal", "containers", "mtl" }
	"EnumContainers" -> { "containers", "deepseq" }
	"EnumMap" -> { "containers" }
	"Eq" -> { "HaXml", "array", "containers", "filepath", "mtl", "parsec", "template-haskell", "transformers" }
	"EsounD" -> { "base-unicode-symbols", "bindings-EsounD", "monad-control", "network", "regions", "safer-file-handles", "storablevector", "transformers", "unix" }
	"EtaMOO" -> { "array", "bytestring", "containers", "haskeline", "mtl", "network", "old-locale", "parsec", "pureMD5", "random", "stm", "text", "time", "transformers", "unix", "unordered-containers", "vector" }
	"Etage" -> { "containers", "ghc", "mtl", "operational", "random", "time", "unix" }
	"Etage-Graph" -> { "Etage", "Etage-Graph", "array", "containers", "deepseq", "fgl", "mtl", "parallel", "random", "time" }
	"Eternal10Seconds" -> { "SDL", "SDL-mixer", "haskell98" }
	"Etherbunny" -> { "binary", "bytestring", "haskell98", "network", "pcap" }
	"EuroIT" -> {  }
	"EventSocket" -> { "bytestring", "containers", "haskell98", "mtl", "network" }
	"Extra" -> { "HUnit", "QuickCheck", "Unixutils", "bytestring", "bzlib", "containers", "directory", "filepath", "mtl", "network", "old-locale", "old-time", "pretty", "process", "pureMD5", "random", "regex-compat", "time", "unix", "zlib" }
	"FM-SBLEX" -> { "array", "containers", "haskell98" }
	"FModExRaw" -> {  }
	"FPretty" -> { "containers" }
	"FTGL" -> { "OpenGL" }
	"FTGL-bytestring" -> { "StateVar-transformer", "bytestring", "transformers" }
	"FTPLine" -> { "ansi-terminal", "bytestring", "directory", "ftphs", "haskeline", "mtl", "network", "strict" }
	"Facts" -> { "AC-Angle", "QuickCheck", "containers", "digits", "template-haskell" }
	"FailureT" -> { "base-unicode-symbols", "mmtl" }
	"FenwickTree" -> { "QuickCheck", "template-haskell" }
	"FermatsLastMargin" -> { "HAppS-Data", "HAppS-IxSet", "HAppS-Server", "HAppS-State", "HAppS-Util", "HaXml", "haskell98", "mtl", "old-time", "random", "syb-with-class", "template-haskell" }
	"FerryCore" -> { "HaXml", "TableAlgebra", "containers", "mtl", "parsec", "pretty", "template-haskell" }
	"FieldTrip" -> { "GLUT", "MemoTrie", "OpenGL", "TypeCompose", "graphicsFormats", "old-time", "vector-space" }
	"FileManip" -> { "bytestring", "directory", "extensible-exceptions", "filepath", "mtl", "unix" }
	"FileManipCompat" -> { "bytestring", "directory", "filepath", "mtl", "unix-compat" }
	"FilePather" -> { "comonad", "comonad-transformers", "data-lens", "directory", "filepath", "mtl", "transformers" }
	"FileSystem" -> { "binary", "bytestring", "directory", "filepath", "mtl", "old-time" }
	"Finance-Quote-Yahoo" -> { "HTTP", "containers", "network", "old-locale", "time" }
	"Finance-Treasury" -> { "HTTP", "HTTP-Simple", "containers", "hxt", "hxt-filter", "network", "old-locale", "time" }
	"FindBin" -> { "directory", "filepath" }
	"FiniteMap" -> { "haskell98" }
	"FixedPoint-simple" -> { "deepseq", "template-haskell" }
	"Flippi" -> { "cgi", "containers", "directory", "haskell98", "old-time", "parsec", "xhtml" }
	"Focus" -> { "MissingH", "split" }
	"FontyFruity" -> { "binary", "bytestring", "containers", "vector" }
	"ForSyDe" -> { "array", "containers", "directory", "filepath", "mtl", "old-time", "parameterized-data", "pretty", "process", "random", "regex-posix", "template-haskell", "type-level" }
	"ForkableT" -> { "monad-control", "mtl", "resourcet" }
	"FormalGrammars" -> { "ADPfusion", "HaTeX", "ansi-wl-pprint", "bytestring", "cmdargs", "containers", "data-default", "lens", "mtl", "parsers", "repa", "template-haskell", "text", "transformers", "trifecta", "unordered-containers", "vector" }
	"FpMLv53" -> { "HaXml" }
	"Frank" -> { "mtl", "newtype", "she", "void" }
	"FreeTypeGL" -> { "OpenGL", "freetype2" }
	"FunGEn" -> { "GLUT", "OpenGL", "random" }
	"Fungi" -> { "ListZipper", "bytestring", "containers", "directory", "filepath", "haskell98", "mtl", "mwc-random", "old-time", "process", "random", "tuple" }
	"GA" -> { "directory", "random", "transformers" }
	"GHood" -> { "array", "process" }
	"GLFW" -> { "OpenGL" }
	"GLFW-OGL" -> { "OGL", "mtl" }
	"GLFW-b" -> { "bindings-GLFW" }
	"GLFW-b-demo" -> { "GLFW-b", "OpenGL", "mtl", "pretty", "stm", "transformers" }
	"GLFW-task" -> { "GLFW", "OpenGL", "monad-task", "transformers" }
	"GLHUI" -> {  }
	"GLMatrix" -> { "OpenGLRaw" }
	"GLURaw" -> { "OpenGLRaw" }
	"GLUT" -> { "OpenGL", "OpenGLRaw", "array", "containers" }
	"GLUtil" -> { "JuicyPixels", "OpenGL", "OpenGLRaw", "array", "bytestring", "containers", "cpphs", "linear", "vector" }
	"GPX" -> { "comonad", "comonad-transformers", "containers", "data-lens", "hxt", "newtype", "xsd" }
	"GPipe" -> { "Boolean", "GLUT", "OpenGL", "Vec", "Vec-Boolean", "containers", "list-tries", "transformers" }
	"GPipe-Collada" -> { "GPipe", "HaXml", "Vec", "array", "containers", "mtl" }
	"GPipe-Examples" -> { "GLUT", "GPipe", "GPipe-TextureLoad", "Vec", "Vec-Transform", "haskell98" }
	"GPipe-TextureLoad" -> { "GPipe", "bitmap", "stb-image" }
	"GTALib" -> { "containers", "deepseq", "parallel", "template-haskell" }
	"Ganymede" -> { "containers", "directory", "filepath", "mtl", "parsec", "transformers" }
	"GaussQuadIntegration" -> {  }
	"GeBoP" -> { "array", "directory", "random", "wx", "wxcore" }
	"GenI" -> { "GenI", "binary", "bytestring", "cabal-macosx", "containers", "deepseq", "directory", "errors", "filepath", "hslogger", "json", "mtl", "old-locale", "ordered", "parsec", "process", "syb", "text", "time", "transformers", "yaml-light" }
	"GenSmsPdu" -> { "QuickCheck", "haskell98", "random" }
	"GenericPretty" -> { "ghc-prim", "pretty" }
	"GeoIp" -> { "bytestring", "bytestring-mmap", "syb" }
	"Geodetic" -> {  }
	"GeomPredicates" -> {  }
	"GeomPredicates-SSE" -> { "GeomPredicates" }
	"GiST" -> { "text" }
	"Glob" -> { "containers", "directory", "dlist", "filepath", "transformers" }
	"GlomeTrace" -> { "GlomeVec", "array" }
	"GlomeVec" -> { "array" }
	"GlomeView" -> { "GlomeTrace", "GlomeVec", "SDL", "deepseq", "monad-par", "random", "time", "vector" }
	"GoogleChart" -> {  }
	"GoogleDirections" -> { "AttoJson", "bytestring", "containers", "dataenc", "download-curl" }
	"GoogleSB" -> { "Crypto", "HTTP", "binary", "haskell98", "mtl", "network", "split" }
	"GoogleSuggest" -> { "dataenc", "download-curl", "utf8-string", "xml" }
	"GoogleTranslate" -> { "AttoJson", "bytestring", "dataenc", "download-curl" }
	"GotoT-transformers" -> { "transformers" }
	"GrammarProducts" -> { "ADPfusion", "FormalGrammars", "HaTeX", "PrimitiveArray", "ansi-wl-pprint", "bytestring", "cmdargs", "containers", "data-default", "lens", "newtype", "parsers", "semigroups", "transformers", "trifecta" }
	"Graph500" -> { "Graph500", "array", "containers", "mersenne-random-pure64", "mtl", "random" }
	"GraphHammer" -> { "Graph500", "array", "containers", "mtl", "stm", "time" }
	"GraphHammer-examples" -> { "Graph500", "GraphHammer", "array", "containers", "mtl" }
	"GraphSCC" -> { "array", "containers" }
	"Graphalyze" -> { "array", "bktrees", "containers", "directory", "fgl", "filepath", "graphviz", "old-locale", "pandoc", "process", "random", "text", "time" }
	"Grempa" -> { "QuickCheck", "array", "containers", "mtl", "template-haskell", "th-lift" }
	"GroteTrap" -> { "QuickCheck", "mtl", "parsec" }
	"Grow" -> { "array", "bytestring", "clock", "containers", "deepseq", "definitive-base", "definitive-filesystem", "definitive-parser", "directory", "filepath", "old-locale", "primitive", "time", "unix", "vector" }
	"GrowlNotify" -> { "Crypto", "binary", "bytestring", "haskell98", "network" }
	"Gtk2hsGenerics" -> { "array", "cairo", "containers", "glib", "gtk", "haskell98", "mtl" }
	"GtkGLTV" -> { "GtkTV", "OpenGL", "bitmap", "bitmap-opengl", "gtk", "gtkglext", "stb-image", "time" }
	"GtkTV" -> { "TV", "TypeCompose", "gtk", "time", "vector-space" }
	"GuiHaskell" -> { "containers", "directory", "filepath", "glade", "gtk", "parsec", "process", "proplang" }
	"GuiTV" -> { "DeepArrow", "TV", "TypeCompose", "phooey" }
	"HARM" -> { "array" }
	"HAppS-Data" -> { "HAppS-Util", "HaXml", "binary", "bytestring", "containers", "mtl", "pretty", "syb", "syb-with-class", "template-haskell" }
	"HAppS-IxSet" -> { "HAppS-Data", "HAppS-State", "HAppS-Util", "containers", "hslogger", "mtl", "syb", "syb-with-class", "template-haskell" }
	"HAppS-Server" -> { "HAppS-Data", "HAppS-IxSet", "HAppS-State", "HAppS-Util", "HTTP", "HaXml", "bytestring", "containers", "directory", "hslogger", "html", "mtl", "network", "old-locale", "old-time", "parsec", "process", "random", "template-haskell", "unix", "xhtml" }
	"HAppS-State" -> { "HAppS-Data", "HAppS-Util", "HaXml", "binary", "bytestring", "containers", "directory", "filepath", "hslogger", "hspread", "mtl", "network", "old-locale", "old-time", "random", "stm", "syb", "template-haskell", "unix" }
	"HAppS-Util" -> { "array", "bytestring", "directory", "hslogger", "mtl", "old-time", "process", "template-haskell" }
	"HAppSHelpers" -> {  }
	"HCL" -> { "QuickCheck", "containers", "mtl", "random" }
	"HCard" -> { "QuickCheck", "mtl", "random", "random-shuffle" }
	"HCodecs" -> { "QuickCheck", "array", "bytestring", "random" }
	"HDBC" -> { "bytestring", "containers", "convertible", "mtl", "old-locale", "old-time", "text", "time", "utf8-string" }
	"HDBC-mysql" -> { "HDBC", "bytestring", "time", "utf8-string" }
	"HDBC-odbc" -> { "HDBC", "bytestring", "mtl", "time", "utf8-string" }
	"HDBC-postgresql" -> { "HDBC", "bytestring", "convertible", "mtl", "old-locale", "old-time", "parsec", "time", "utf8-string" }
	"HDBC-postgresql-hstore" -> { "HDBC", "attoparsec", "containers", "text" }
	"HDBC-sqlite3" -> { "HDBC", "bytestring", "mtl", "utf8-string" }
	"HDRUtils" -> { "array", "colour", "containers", "mtl", "unix" }
	"HERA" -> {  }
	"HFuse" -> { "bytestring", "unix" }
	"HGL" -> { "X11", "array" }
	"HGamer3D" -> { "HGamer3D-Data", "HGamer3D-GUI", "HGamer3D-Graphics3D", "HGamer3D-WinEvent" }
	"HGamer3D-API" -> { "HGamer3D-Data", "HGamer3D-Ogre-Binding", "HGamer3D-SFML-Binding", "haskell98" }
	"HGamer3D-Audio" -> { "HGamer3D-Data", "HGamer3D-SFML-Binding" }
	"HGamer3D-Bullet-Binding" -> { "HGamer3D-Data" }
	"HGamer3D-CAudio-Binding" -> { "HGamer3D-Data", "haskell98" }
	"HGamer3D-CEGUI-Binding" -> { "HGamer3D-Data" }
	"HGamer3D-Data" -> { "FindBin", "directory", "filepath", "vect" }
	"HGamer3D-Enet-Binding" -> { "HGamer3D-Data" }
	"HGamer3D-GUI" -> { "HGamer3D-CEGUI-Binding", "HGamer3D-Data", "HGamer3D-WinEvent" }
	"HGamer3D-Graphics3D" -> { "HGamer3D-Data", "HGamer3D-Ogre-Binding", "directory", "filepath", "mtl", "transformers" }
	"HGamer3D-InputSystem" -> { "HGamer3D-Data", "HGamer3D-SDL2-Binding", "HGamer3D-SFML-Binding" }
	"HGamer3D-Network" -> { "HGamer3D-Data", "HGamer3D-Enet-Binding" }
	"HGamer3D-OIS-Binding" -> { "HGamer3D-Data", "HGamer3D-Ogre-Binding", "haskell98" }
	"HGamer3D-Ogre-Binding" -> { "HGamer3D-Data", "mtl", "transformers" }
	"HGamer3D-SDL2-Binding" -> { "HGamer3D-Data", "bytestring", "utf8-string" }
	"HGamer3D-SFML-Binding" -> { "HGamer3D-Data" }
	"HGamer3D-WinEvent" -> { "HGamer3D-Data", "HGamer3D-SDL2-Binding", "text" }
	"HGamer3D-Wire" -> { "HGamer3D", "HGamer3D-Audio", "HGamer3D-Data", "HGamer3D-GUI", "HGamer3D-InputSystem", "HGamer3D-WinEvent", "containers", "mtl", "netwire", "transformers" }
	"HHDL" -> { "containers", "mtl", "template-haskell" }
	"HJScript" -> { "HJavaScript", "hsp", "mtl", "text" }
	"HJVM" -> { "containers", "filepath", "haskell-src-exts", "mtl", "parsec", "process", "transformers" }
	"HJavaScript" -> { "pretty" }
	"HLearn-algebra" -> { "ConstraintKinds", "MonadRandom", "containers", "deepseq", "hashable", "parallel", "random", "template-haskell", "vector", "vector-heterogenous" }
	"HLearn-approximation" -> { "ConstraintKinds", "HLearn-algebra", "HLearn-datastructures", "HLearn-distributions", "containers", "heap", "list-extras", "vector" }
	"HLearn-classification" -> { "ConstraintKinds", "HLearn-algebra", "HLearn-distributions", "MonadRandom", "QuickCheck", "binary", "bytestring", "containers", "deepseq", "dlist", "hashable", "list-extras", "logfloat", "math-functions", "normaldistribution", "parsec", "primitive", "statistics", "vector", "vector-th-unbox" }
	"HLearn-datastructures" -> { "ConstraintKinds", "HLearn-algebra", "MonadRandom", "QuickCheck", "containers", "deepseq", "list-extras", "vector" }
	"HLearn-distributions" -> { "ConstraintKinds", "HLearn-algebra", "HLearn-datastructures", "MonadRandom", "QuickCheck", "array", "containers", "deepseq", "erf", "gamma", "graphviz", "hmatrix", "list-extras", "math-functions", "normaldistribution", "process", "statistics", "template-haskell", "vector", "vector-th-unbox" }
	"HList" -> { "ghc-prim", "mtl", "tagged", "template-haskell" }
	"HLogger" -> { "old-locale", "time" }
	"HMM" -> {  }
	"HMap" -> { "hashable", "mtl", "unordered-containers" }
	"HNM" -> { "containers", "directory", "glib", "gtk", "haskell98", "mtl", "process", "regex-posix", "unix" }
	"HODE" -> { "array" }
	"HOpenCV" -> { "allocated-processor", "vector-space" }
	"HPDF" -> { "array", "binary", "bytestring", "containers", "mtl", "random", "vector", "zlib" }
	"HPath" -> { "Cabal", "containers", "directory", "filepath", "haskell-src-exts", "mtl", "parsec", "utf8-string" }
	"HPi" -> { "bytestring" }
	"HPlot" -> { "glade", "glib", "gtk" }
	"HPong" -> { "GLFW", "OpenGL", "data-accessor", "data-accessor-template" }
	"HROOT" -> {  }
	"HRay" -> { "array", "directory", "haskell98" }
	"HSFFIG" -> { "Cabal", "array", "containers", "directory", "filepath", "parsec", "process", "unix" }
	"HSGEP" -> { "csv", "mersenne-random-pure64", "monad-mersenne-random", "mtl", "split", "vector" }
	"HSH" -> { "MissingH", "bytestring", "directory", "filepath", "hslogger", "mtl", "process", "regex-base", "regex-compat", "regex-posix", "unix" }
	"HSHHelpers" -> { "DebugTraceHelpers", "HSH", "HStringTemplateHelpers", "MissingH", "bytestring", "directory", "filepath", "mtl", "regex-pcre", "unix" }
	"HSlippyMap" -> {  }
	"HSmarty" -> { "HTF", "HTTP", "aeson", "attoparsec", "attoparsec-expr", "mtl", "text", "unordered-containers", "vector" }
	"HSoundFile" -> { "binary", "bytestring", "filepath", "haskell98", "mtl", "parallel" }
	"HStringTemplate" -> { "array", "blaze-builder", "bytestring", "containers", "deepseq", "directory", "filepath", "mtl", "old-locale", "old-time", "parsec", "pretty", "syb", "template-haskell", "text", "time", "utf8-string", "void" }
	"HStringTemplateHelpers" -> { "FileManipCompat", "HSH", "HStringTemplate", "containers", "directory", "filepath", "mtl", "safe", "strict" }
	"HSvm" -> { "containers" }
	"HTF" -> { "Diff", "HUnit", "QuickCheck", "aeson", "array", "bytestring", "containers", "cpphs", "directory", "haskell-src-exts", "lifted-base", "monad-control", "mtl", "old-time", "pretty", "process", "random", "regex-compat", "text", "unix", "xmlgen" }
	"HTTP" -> { "array", "bytestring", "mtl", "network", "old-time", "parsec" }
	"HTTP-Simple" -> { "HTTP", "network" }
	"HTab" -> { "cmdargs", "containers", "deepseq", "hylolib", "mtl", "strict" }
	"HTicTacToe" -> { "SDL", "SDL-image", "SDL-ttf", "array", "mtl", "random" }
	"HUnit" -> { "deepseq" }
	"HUnit-Diff" -> { "Diff", "HUnit", "ansi-terminal", "groom" }
	"HXMPP" -> { "HLogger", "base64-string", "binary", "bytestring", "crypto-api", "enumerator", "network", "pureMD5", "random", "regex-posix", "text", "transformers", "utf8-string", "xml-enumerator", "xml-types" }
	"HXQ" -> { "HTTP", "array", "haskeline", "haskell98", "mtl", "regex-base", "regex-compat", "template-haskell" }
	"HaLeX" -> { "mtl" }
	"HaRe" -> { "HaRe", "Strafunski-StrategyLib", "array", "containers", "directory", "dual-tree", "filepath", "ghc", "ghc-mod", "ghc-paths", "ghc-prim", "ghc-syb-utils", "hslogger", "monoid-extras", "mtl", "old-time", "parsec", "pretty", "rosezipper", "semigroups", "syb", "syz", "time", "transformers" }
	"HaTeX" -> { "attoparsec", "bytestring", "containers", "matrix", "text", "transformers" }
	"HaTeX-meta" -> { "Cabal", "containers", "directory", "filepath", "ghc", "haddock", "haskell-src-exts", "mtl", "parsec" }
	"HaVSA" -> { "HUnit", "QuickCheck", "logict", "test-framework", "test-framework-hunit", "test-framework-quickcheck" }
	"HaXml" -> { "bytestring", "containers", "directory", "filepath", "polyparse", "pretty", "random" }
	"Hach" -> { "containers", "network", "old-locale", "text", "time", "vty", "vty-ui" }
	"HackMail" -> { "Crypto", "directory", "hdaemonize", "hint", "mtl", "old-time", "parsec" }
	"HandlerSocketClient" -> { "bytestring", "network" }
	"HandsomeSoup" -> { "HTTP", "MaybeT", "containers", "hxt", "hxt-http", "mtl", "network", "parsec", "transformers" }
	"HarmTrace" -> { "Diff", "HCodecs", "HarmTrace-Base", "ListLike", "array", "binary", "cmdargs", "deepseq", "directory", "filepath", "ghc-prim", "hmatrix", "hmatrix-gsl-stats", "instant-generics", "mtl", "parallel", "parseargs", "process", "sox", "template-haskell", "uu-parsinglib", "vector" }
	"HarmTrace-Base" -> { "ListLike", "binary", "ghc-prim", "uu-parsinglib" }
	"HasGP" -> { "haskell98", "hmatrix", "hmatrix-special", "mtl", "parsec", "random" }
	"Haschoo" -> { "array", "list-tries", "monad-loops", "mtl", "numbers", "parsec" }
	"Hashell" -> { "directory", "ghc", "haskell98", "parsec", "process", "readline", "regex-compat", "unix" }
	"HaskellForMaths" -> { "array", "containers", "random" }
	"HaskellLM" -> { "hmatrix" }
	"HaskellNN" -> { "hmatrix", "random" }
	"HaskellNet" -> { "Crypto", "array", "base64-string", "bytestring", "mime-mail", "mtl", "network", "old-time", "pretty", "text" }
	"HaskellNet-SSL" -> { "HaskellNet", "bytestring", "connection", "data-default", "network", "tls" }
	"HaskellTorrent" -> { "HTTP", "HUnit", "QuickCheck", "bytestring", "cereal", "cml", "containers", "directory", "hopenssl", "hslogger", "mtl", "network", "parsec", "pretty", "random", "random-shuffle", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "time" }
	"Haskelloids" -> { "HGL", "MonadRandom", "Yampa", "containers", "hmatrix", "random" }
	"Hawk" -> { "HDBC", "HDBC-sqlite3", "HTTP", "MonadCatchIO-mtl", "SHA", "bytestring", "bytestring-trie", "cgi", "containers", "convertible", "data-default", "dataenc", "directory", "filepath", "hack", "hslogger", "hslogger-template", "hxt", "json-b", "mtl", "network", "regex-posix", "template-haskell", "time", "utf8-string" }
	"Hayoo" -> { "Holumbus-Searchengine", "MonadCatchIO-transformers", "binary", "bytestring", "bzlib", "containers", "deepseq", "enummapset", "filepath", "hxt", "hxt-cache", "hxt-charproperties", "hxt-curl", "hxt-http", "hxt-regex-xmlschema", "hxt-unicode", "hxt-xpath", "json", "mtl", "network", "old-time", "parsec", "process", "snap", "snap-core", "snap-server", "tar", "text", "transformers", "xhtml-combinators", "zlib" }
	"Hclip" -> { "mtl", "process", "strict" }
	"Hedi" -> { "QuickCheck", "editline", "mtl", "parsec", "pretty", "process", "regex-posix" }
	"Hermes" -> { "AES", "RSA", "SHA2", "bytestring", "cereal", "containers", "hslogger", "monads-tf", "network", "old-time", "random", "random-shuffle", "stm", "syb", "time", "transformers", "unamb", "yjtools" }
	"Hieroglyph" -> { "GLUT", "IfElse", "OpenGL", "array", "buster", "bytestring", "cairo", "colour", "containers", "glib", "gtk", "gtkglext", "mtl", "parallel", "pretty", "random" }
	"HiggsSet" -> { "TrieMap", "bytestring", "containers", "deepseq", "mtl", "text", "th-expand-syns", "vector" }
	"Hipmunk" -> { "StateVar", "array", "containers", "transformers" }
	"HipmunkPlayground" -> { "GLFW", "Hipmunk", "OpenGL", "StateVar", "containers", "transformers" }
	"Histogram" -> { "containers", "gnuplot" }
	"Hmpf" -> { "ConfigFile", "Crypto", "HTTP", "mtl", "network", "time", "unix", "utf8-string" }
	"HoleyMonoid" -> {  }
	"Holumbus-Distribution" -> { "array", "binary", "bytestring", "containers", "deepseq", "haskell98", "hslogger", "hxt", "network", "random", "readline", "stm", "time", "unix" }
	"Holumbus-MapReduce" -> { "Holumbus-Distribution", "Holumbus-Storage", "binary", "bytestring", "containers", "deepseq", "directory", "extensible-exceptions", "haskell98", "hslogger", "hxt", "network", "readline", "time", "unix" }
	"Holumbus-Searchengine" -> { "SHA", "binary", "bytestring", "bzlib", "containers", "deepseq", "directory", "enummapset", "filepath", "hslogger", "hxt", "hxt-cache", "hxt-curl", "hxt-regex-xmlschema", "hxt-unicode", "mtl", "network", "parallel", "parsec", "process", "unix" }
	"Holumbus-Storage" -> { "Holumbus-Distribution", "binary", "bytestring", "containers", "directory", "haskell98", "hslogger", "hxt", "network", "random", "time", "unix" }
	"Homology" -> { "containers", "vector" }
	"HongoDB" -> { "attoparsec", "attoparsec-binary", "blaze-builder", "bytestring", "directory", "enumerator", "hashable", "monad-control", "mtl", "unix", "unix-bytestring", "unordered-containers" }
	"Hricket" -> { "containers" }
	"Hs2lib" -> { "QuickCheck", "array", "cereal", "containers", "directory", "filepath", "ghc", "ghc-paths", "haddock", "haskell-src-exts", "mtl", "old-locale", "process", "random", "syb", "time" }
	"HsASA" -> { "array", "random" }
	"HsHaruPDF" -> {  }
	"HsHyperEstraier" -> { "base-unicode-symbols", "bytestring", "network", "text" }
	"HsJudy" -> { "bytestring", "containers" }
	"HsOpenSSL" -> { "bytestring", "ghc-prim", "integer", "network", "old-locale", "time" }
	"HsParrot" -> { "HsSyck", "bytestring", "pretty", "pugs-DrIFT" }
	"HsPerl5" -> {  }
	"HsSVN" -> { "bytestring", "mtl", "stm" }
	"HsSyck" -> { "bytestring", "hashtables", "syb", "utf8-string" }
	"HsTools" -> { "ghc-prim" }
	"Hsed" -> { "Glob", "GotoT-transformers", "array", "bytestring", "cmdargs", "data-accessor", "data-accessor-template", "data-accessor-transformers", "directory", "filepath", "haskell98", "mtl", "parsec", "regex-base", "regex-compat", "regex-posix" }
	"HueAPI" -> { "aeson", "containers", "http-conduit", "mtl", "network", "transformers", "utf8-string" }
	"IDynamic" -> { "containers", "directory" }
	"IFS" -> { "array", "bytestring", "containers", "random" }
	"INblobs" -> { "HaXml", "containers", "directory", "haskell98", "polyparse", "pretty", "process", "wx", "wxcore" }
	"IOR" -> { "mtl" }
	"IORefCAS" -> { "bits-atomic", "ghc-prim" }
	"IOSpec" -> { "QuickCheck", "Stream", "mtl" }
	"IPv6Addr" -> { "attoparsec", "bytestring", "network-info", "random", "text" }
	"IcoGrid" -> { "GlomeVec", "array" }
	"IfElse" -> { "mtl" }
	"Imlib" -> { "X11", "array" }
	"ImperativeHaskell" -> { "mtl", "template-haskell" }
	"IndentParser" -> { "parsec" }
	"InfixApplicative" -> { "haskell98" }
	"Interpolation" -> { "haskell-src-meta", "syb", "template-haskell" }
	"Interpolation-maxs" -> { "syb", "template-haskell" }
	"IntervalMap" -> { "containers", "deepseq" }
	"IrrHaskell" -> { "random", "time" }
	"JSON-Combinator" -> { "JSONb", "aeson", "attoparsec", "bytestring", "bytestring-trie", "containers", "failure", "hjson", "json", "parsec", "text", "vector" }
	"JSON-Combinator-Examples" -> { "JSON-Combinator", "JSONb", "bytestring", "json" }
	"JSONb" -> { "attoparsec", "bytestring", "bytestring-nums", "bytestring-trie", "containers", "utf8-string" }
	"JYU-Utils" -> { "QuickCheck", "array", "binary", "bytestring", "containers", "deepseq", "directory", "filepath", "lazysmallcheck", "mtl", "mwc-random", "parallel", "process", "random", "stm", "template-haskell", "unix", "zlib" }
	"JackMiniMix" -> { "hosc" }
	"Javasf" -> { "binary", "bytestring", "language-java-classfile" }
	"Javav" -> {  }
	"JsContracts" -> { "WebBits", "WebBits-Html", "containers", "directory", "filepath", "mtl", "parsec", "pretty", "syb" }
	"JsonGrammar" -> { "aeson", "attoparsec", "bytestring", "containers", "hashable", "semigroups", "template-haskell", "text", "time", "unordered-containers", "vector" }
	"JuicyPixels" -> { "binary", "bytestring", "containers", "deepseq", "mtl", "primitive", "transformers", "vector", "zlib" }
	"JuicyPixels-repa" -> { "JuicyPixels", "bytestring", "repa", "vector" }
	"JuicyPixels-util" -> { "JuicyPixels", "vector" }
	"KMP" -> { "array" }
	"KdTree" -> { "QuickCheck" }
	"KiCS" -> { "containers", "curry-base", "curry-frontend", "directory", "filepath", "ghc-paths", "network", "old-time", "process", "random", "readline", "syb", "unix" }
	"KiCS-debugger" -> { "KiCS", "KiCS-prophecy", "containers", "curry-base", "directory", "filepath", "haskell-src", "haskell98", "mtl", "readline", "syb" }
	"KiCS-prophecy" -> { "KiCS", "filepath" }
	"Kleislify" -> {  }
	"Konf" -> { "containers", "parsec" }
	"KyotoCabinet" -> { "bytestring", "extensible-exceptions" }
	"L-seed" -> { "cairo", "containers", "gtk", "mtl", "old-time", "parsec", "random" }
	"LDAP" -> {  }
	"LRU" -> { "QuickCheck", "containers" }
	"LTree" -> { "transformers" }
	"LambdaCalculator" -> { "binary", "bytestring", "haskeline", "mtl", "parsec", "pretty" }
	"LambdaHack" -> { "LambdaHack", "array", "assert-failure", "binary", "bytestring", "containers", "deepseq", "directory", "enummapset-th", "filepath", "ghc-prim", "gtk", "hashable", "hsini", "keys", "miniutter", "mtl", "old-time", "pretty-show", "random", "stm", "template-haskell", "text", "transformers", "unordered-containers", "vector", "vector-binary-instances", "zlib" }
	"LambdaINet" -> { "GLFW", "OpenGL", "containers", "mtl" }
	"LambdaPrettyQuote" -> { "DebugTraceHelpers", "HUnit", "QuickCheck", "lambda-ast", "mtl", "parsec", "syb", "template-haskell", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "transformers", "tuple", "uniplate" }
	"LambdaShell" -> { "Shellac", "Shellac-readline", "haskell98", "mtl", "parsec", "readline" }
	"Lastik" -> { "SHA", "bytestring", "containers", "directory", "filemanip", "filepath", "process", "pureMD5", "zip-archive" }
	"Lattices" -> { "HaskellForMaths", "array" }
	"LazyVault" -> { "directory", "filepath", "unix" }
	"Level0" -> { "SDL", "SDL-ttf", "directory", "random" }
	"LibClang" -> { "greencard", "time" }
	"LibZip" -> { "bindings-libzip", "bytestring", "filepath", "mtl", "time", "utf8-string" }
	"Limit" -> {  }
	"LinearSplit" -> { "QuickCheck", "array", "cmdargs", "haskell98" }
	"LinkChecker" -> { "HTTP", "containers", "haskell98", "mtl", "network", "tagsoup" }
	"List" -> { "transformers" }
	"ListLike" -> { "array", "bytestring", "containers", "text", "vector" }
	"ListTree" -> { "List", "directory", "filepath", "transformers" }
	"ListZipper" -> { "QuickCheck" }
	"LogicGrowsOnTrees" -> { "AbortT-mtl", "AbortT-transformers", "LogicGrowsOnTrees", "MonadCatchIO-transformers", "PSQueue", "bytestring", "cereal", "cmdtheline", "composition", "containers", "data-ivar", "derive", "directory", "hslogger", "hslogger-template", "lens", "monoid-statistics", "mtl", "multiset", "old-locale", "operational", "prefix-units", "pretty", "sequential-index", "split", "stm", "time", "transformers", "void", "yjtools" }
	"LogicGrowsOnTrees-MPI" -> { "LogicGrowsOnTrees", "LogicGrowsOnTrees-MPI", "MonadCatchIO-transformers", "bytestring", "cereal", "cmdtheline", "containers", "data-ivar", "derive", "hslogger", "hslogger-template", "stm", "transformers" }
	"LogicGrowsOnTrees-network" -> { "LogicGrowsOnTrees", "LogicGrowsOnTrees-network", "MonadCatchIO-transformers", "cereal", "cmdtheline", "composition", "containers", "hslogger", "hslogger-template", "lens", "mtl", "network", "pretty", "transformers" }
	"LogicGrowsOnTrees-processes" -> { "FindBin", "LogicGrowsOnTrees", "LogicGrowsOnTrees-processes", "MonadCatchIO-transformers", "bytestring", "cereal", "cmdtheline", "containers", "filepath", "hslogger", "hslogger-template", "process", "transformers" }
	"LslPlus" -> { "HaXml", "array", "bytestring", "containers", "directory", "filepath", "haskell98", "mtl", "network", "old-time", "parsec", "pureMD5", "random", "syb", "template-haskell", "utf8-string" }
	"Lucu" -> { "HsOpenSSL", "base-unicode-symbols", "base64-bytestring", "bytestring", "containers", "directory", "filepath", "haskell-src", "hxt", "mtl", "network", "stm", "time", "time-http", "unix", "zlib" }
	"MC-Fold-DP" -> { "Biobase", "PrimitiveArray", "cmdargs", "split", "tuple", "vector" }
	"MFlow" -> { "RefSerialize", "TCache", "Workflow", "blaze-html", "blaze-markup", "bytestring", "case-insensitive", "clientsession", "conduit", "containers", "directory", "extensible-exceptions", "http-types", "monadloc", "mtl", "old-time", "parsec", "random", "stm", "text", "transformers", "utf8-string", "vector", "wai", "warp", "warp-tls" }
	"MHask" -> { "transformers" }
	"MagicHaskeller" -> { "array", "bytestring", "containers", "directory", "ghc", "ghc-paths", "haskell-src", "html", "mtl", "network", "old-time", "pretty", "random", "syb", "template-haskell" }
	"MaybeT" -> { "mtl" }
	"MaybeT-monads-tf" -> { "monads-tf", "transformers" }
	"MaybeT-transformers" -> { "monads-fd", "transformers" }
	"MazesOfMonad" -> { "HUnit", "array", "containers", "directory", "filepath", "mtl", "old-locale", "pretty", "random", "regex-posix", "time" }
	"MeanShift" -> { "vector" }
	"Measure" -> {  }
	"MemoTrie" -> { "void" }
	"MetaHDBC" -> { "HDBC", "HDBC-odbc", "convertible", "mtl", "template-haskell" }
	"MetaObject" -> { "containers", "stringtable-atom" }
	"Metrics" -> { "hstats" }
	"Mhailist" -> { "binary", "bytestring", "directory", "filepath", "haskell98", "mtl", "old-locale", "process", "time" }
	"MiniAgda" -> { "IfElse", "array", "containers", "haskell-src-exts", "mtl", "pretty" }
	"MissingH" -> { "HUnit", "array", "containers", "directory", "filepath", "hslogger", "mtl", "network", "old-locale", "old-time", "parsec", "process", "random", "regex-compat", "time", "unix" }
	"MissingM" -> {  }
	"MissingPy" -> { "MissingH", "anydbm" }
	"Modulo" -> { "numeric-prelude" }
	"Moe" -> { "GLUT", "random" }
	"MonadCatchIO-mtl" -> { "MonadCatchIO-transformers", "extensible-exceptions" }
	"MonadCatchIO-mtl-foreign" -> { "MonadCatchIO-mtl", "mtl", "primitive" }
	"MonadCatchIO-transformers" -> { "extensible-exceptions", "monads-tf", "transformers" }
	"MonadCatchIO-transformers-foreign" -> { "MonadCatchIO-transformers", "primitive", "transformers" }
	"MonadLab" -> { "haskell98", "parsec", "process", "template-haskell" }
	"MonadPrompt" -> { "mtl" }
	"MonadRandom" -> { "mtl", "random", "transformers" }
	"MonadRandomLazy" -> { "MonadRandom", "mtl", "random" }
	"Monadius" -> { "GLUT", "OpenGL", "array", "directory" }
	"Monaris" -> { "array", "containers", "directory", "free", "free-game", "mtl" }
	"Monatron" -> {  }
	"Monatron-IO" -> { "Monatron", "transformers" }
	"Monocle" -> { "containers", "haskell98", "mtl" }
	"MorseCode" -> { "containers", "split" }
	"Munkres" -> { "array" }
	"MusicBrainz" -> { "HTTP", "aeson", "bytestring", "conduit", "http-conduit", "http-types", "monad-control", "old-locale", "text", "time", "transformers", "vector", "xml-conduit", "xml-types" }
	"MusicBrainz-libdiscid" -> { "containers", "vector" }
	"NGrams" -> { "HCL", "HTTP", "network", "regex-compat" }
	"NXT" -> { "NXT", "bytestring", "filepath", "mtl", "serialport", "time", "unix" }
	"NXTDSL" -> { "attoparsec", "hashable", "mtl", "resourcet", "stm", "text", "unordered-containers" }
	"NanoProlog" -> { "ListLike", "containers", "uu-parsinglib" }
	"NaturalLanguageAlphabets" -> { "bytestring", "hashable", "intern", "unordered-containers" }
	"NaturalSort" -> { "QuickCheck", "bytestring", "strict" }
	"NestedSampling" -> { "random", "vector" }
	"NetSNMP" -> { "bytestring" }
	"Network-NineP" -> { "NineP", "binary", "bytestring", "containers", "monad-loops", "mstate", "mtl", "network", "regex-posix", "transformers" }
	"NewBinary" -> { "array", "integer" }
	"NineP" -> { "binary" }
	"Ninjas" -> { "binary", "bytestring", "containers", "filepath", "gloss", "network", "networked-game", "random" }
	"NoSlow" -> { "array", "containers", "criterion", "dph-base", "dph-prim-seq", "statistics", "storablevector", "template-haskell", "uvector", "vector" }
	"NoTrace" -> {  }
	"Noise" -> { "array", "data-default", "vector" }
	"Nomyx" -> { "Nomyx-Core", "Nomyx-Language", "Nomyx-Web", "directory", "exceptions", "filepath", "hint-server", "mtl", "network", "safe", "stm", "time" }
	"Nomyx-Core" -> { "DebugTraceHelpers", "MissingH", "Nomyx-Language", "acid-state", "aeson", "blaze-html", "blaze-markup", "bytestring", "data-lens", "data-lens-fd", "data-lens-template", "directory", "either-unwrap", "exceptions", "filepath", "happstack-authenticate", "hint", "hint-server", "hscolour", "ixset", "mime-mail", "mtl", "mueval", "network", "safe", "safecopy", "stm", "tar", "template-haskell", "temporary", "text", "time", "unix" }
	"Nomyx-Language" -> { "Boolean", "DebugTraceHelpers", "containers", "data-lens", "data-lens-fd", "data-lens-template", "ghc", "mtl", "old-locale", "safe", "time", "time-recurrence" }
	"Nomyx-Rules" -> { "containers", "ghc", "hint-server", "hslogger", "mtl", "old-locale", "safe", "stm", "time", "time-recurrence" }
	"Nomyx-Web" -> { "Nomyx-Core", "Nomyx-Language", "blaze-html", "blaze-markup", "bytestring", "data-lens", "data-lens-fd", "fb", "filepath", "happstack-authenticate", "happstack-server", "hscolour", "mtl", "old-locale", "reform", "reform-blaze", "reform-happstack", "safe", "stm", "text", "time", "web-routes", "web-routes-happstack", "web-routes-regular", "web-routes-th" }
	"NonEmpty" -> {  }
	"NonEmptyList" -> { "QuickCheck", "Semigroup", "category-extras", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"NumInstances" -> {  }
	"NumLazyByteString" -> { "binary", "bytestring" }
	"NumberSieves" -> { "array" }
	"Numbers" -> { "random" }
	"Nussinov78" -> { "ADPfusion", "PrimitiveArray", "ghc-prim", "mtl", "primitive", "vector" }
	"Nutri" -> {  }
	"OGL" -> { "mtl" }
	"OSM" -> { "comonad-transformers", "containers", "data-lens", "hxt", "newtype" }
	"OTP" -> { "Crypto", "time" }
	"ObjectIO" -> {  }
	"ObjectName" -> {  }
	"Obsidian" -> { "containers", "mtl", "value-supply" }
	"Octree" -> { "AC-Vector", "QuickCheck" }
	"OddWord" -> {  }
	"Omega" -> { "containers" }
	"OneTuple" -> {  }
	"OpenAFP" -> { "array", "binary", "bytestring", "containers", "directory", "hashable", "hashtables", "mtl", "process", "regex-compat" }
	"OpenAFP-Utils" -> { "OpenAFP", "binary", "bytestring", "containers", "directory", "filepath", "hashable", "line2pdf", "regex-base", "regex-posix", "text", "text-locale-encoding", "xhtml" }
	"OpenAL" -> { "OpenGL" }
	"OpenCL" -> { "bytestring", "mtl" }
	"OpenCLRaw" -> { "bytestring", "mtl" }
	"OpenCLWrappers" -> { "bytestring", "mtl" }
	"OpenGL" -> { "GLURaw", "OpenGLRaw", "bytestring", "text" }
	"OpenGLCheck" -> { "OpenGL", "QuickCheck", "checkers", "haskell98" }
	"OpenGLRaw" -> { "ghc-prim" }
	"OpenGLRaw21" -> { "OpenGLRaw" }
	"OpenVG" -> { "GLUT", "OpenGL", "OpenGLRaw", "OpenVGRaw" }
	"OpenVGRaw" -> { "OpenGLRaw" }
	"Operads" -> { "array", "containers", "mtl" }
	"OptDir" -> { "hashable", "syb" }
	"Ordinals" -> {  }
	"PArrows" -> { "containers", "ghc-prim", "mtl" }
	"PBKDF2" -> { "Crypto", "binary", "bytestring", "random" }
	"PCLT" -> { "bytestring", "containers", "mtl", "utf8-string" }
	"PCLT-DB" -> { "HDBC", "HDBC-postgresql", "PCLT", "bytestring", "containers", "convertible", "mtl" }
	"PDBtools" -> { "bytestring", "containers" }
	"PSQueue" -> {  }
	"PTQ" -> { "containers", "haskell98", "mtl", "network", "utf8-string", "xml" }
	"PageIO" -> { "array", "attoparsec", "base64-string", "bytestring", "containers", "directory", "iconv", "network", "old-time", "regex-base", "regex-compat", "regex-tdfa", "sqlite", "stringtable-atom", "utf8-string", "uuid" }
	"Paillier" -> { "crypto-numbers", "crypto-random" }
	"PandocAgda" -> { "Agda", "PandocAgda", "QuickCheck", "containers", "directory", "filepath", "mtl", "old-time", "pandoc", "pandoc-types", "text", "xhtml" }
	"Paraiso" -> { "ListLike", "array", "containers", "control-monad-failure", "directory", "fgl", "filepath", "listlike-instances", "mtl", "numeric-prelude", "random", "text", "typelevel-tensor", "vector" }
	"Parry" -> { "RSA", "SafeSemaphore", "binary", "bytestring", "containers", "directory", "ghc-prim", "network", "old-locale", "process", "random", "time", "unix" }
	"ParsecTools" -> { "parsec" }
	"ParserFunction" -> { "containers", "parsec" }
	"PasswordGenerator" -> { "QuickCheck" }
	"PastePipe" -> { "HTTP", "cmdargs", "network" }
	"Pathfinder" -> { "bytestring", "text" }
	"Peano" -> {  }
	"PerfectHash" -> { "array", "binary", "bytestring", "containers", "digest", "haskell98", "time" }
	"PermuteEffects" -> { "ReplicateEffects" }
	"Pipe" -> { "filepath", "process", "unix" }
	"Piso" -> { "template-haskell" }
	"PlayHangmanGame" -> { "containers", "directory", "mtl", "random", "regex-compat" }
	"Plot-ho-matic" -> { "Chart", "bytestring", "containers", "data-accessor", "glib", "gtk", "protocol-buffers", "template-haskell", "time", "transformers" }
	"PlslTools" -> { "array", "directory", "filepath", "haskell98", "old-locale", "old-time", "parsec", "process", "random" }
	"Plural" -> { "containers", "regex-tdfa" }
	"Pollutocracy" -> { "GLUT", "array", "clock", "random" }
	"PortFusion" -> { "bytestring", "network", "splice" }
	"PortMidi" -> {  }
	"PostgreSQL" -> { "mtl" }
	"PrimitiveArray" -> { "QuickCheck", "deepseq", "primitive", "repa", "vector", "vector-th-unbox" }
	"Printf-TH" -> { "haskell98", "pretty", "template-haskell" }
	"PriorityChansConverger" -> { "containers", "stm" }
	"ProbabilityMonads" -> { "MaybeT", "MonadRandom", "mtl" }
	"PropLogic" -> { "old-time", "random" }
	"ProxN" -> { "mtl" }
	"Pugs" -> { "FindBin", "HsParrot", "HsSyck", "MetaObject", "array", "binary", "bytestring", "containers", "control-timeout", "directory", "filepath", "haskeline", "mtl", "network", "parsec", "pretty", "process", "pugs-DrIFT", "pugs-compat", "random", "stm", "stringtable-atom", "time", "utf8-string" }
	"Pup-Events" -> { "Pup-Events-Client", "Pup-Events-PQueue", "Pup-Events-Server" }
	"Pup-Events-Client" -> { "Pup-Events-PQueue", "network", "parsec", "stm", "transformers" }
	"Pup-Events-Demo" -> { "GLUT", "OpenGL", "Pup-Events-Client", "Pup-Events-PQueue", "Pup-Events-Server", "parsec", "stm" }
	"Pup-Events-PQueue" -> { "stm" }
	"Pup-Events-Server" -> { "Pup-Events-PQueue", "network", "parsec", "stm", "transformers" }
	"QIO" -> { "containers", "mtl", "old-time", "random" }
	"QuadEdge" -> { "random", "vector" }
	"QuadTree" -> { "composition", "lens" }
	"QuasiText" -> { "attoparsec", "haskell-src-meta", "template-haskell", "text" }
	"QuickAnnotate" -> { "haskell-src-exts" }
	"QuickCheck" -> { "random" }
	"QuickCheck-GenT" -> { "QuickCheck", "mtl", "random" }
	"RANSAC" -> { "random", "vector" }
	"RBTree" -> {  }
	"RESTng" -> { "HDBC", "HDBC-postgresql", "mtl", "old-time", "parsec", "redHandlers", "xhtml", "yuiGrid" }
	"RFC1751" -> { "binary" }
	"RJson" -> { "array", "bytestring", "containers", "iconv", "mtl", "parsec", "syb-with-class" }
	"RMP" -> { "HOpenCV", "allocated-processor", "cv-combinators", "vector-space" }
	"RNAFold" -> { "ADPfusion", "BiobaseTurner", "BiobaseVienna", "BiobaseXNA", "PrimitiveArray", "RNAFold", "cmdargs", "containers", "deepseq", "lens", "primitive", "repa", "strict", "vector" }
	"RNAFoldProgs" -> { "Biobase", "BiobaseTurner", "BiobaseTypes", "BiobaseVienna", "HsTools", "PrimitiveArray", "RNAFold", "cmdargs", "containers", "primitive", "split", "vector" }
	"RNAdesign" -> { "BiobaseTurner", "BiobaseVienna", "BiobaseXNA", "ParsecTools", "PrimitiveArray", "RNAFold", "ViennaRNA-bindings", "array", "bytestring", "cmdargs", "containers", "fgl", "fgl-extras-decompositions", "file-embed", "lens", "monad-primitive", "mwc-random-monad", "parallel", "parsec", "primitive", "random", "transformers", "tuple", "vector" }
	"RNAdraw" -> { "BiobaseXNA", "PrimitiveArray", "QuasiText", "array", "bytestring", "cmdargs", "containers", "repa", "split", "text", "vector" }
	"RNAwolf" -> { "BiobaseTrainingData", "BiobaseXNA", "PrimitiveArray", "StatisticalMethods", "bytestring", "cmdargs", "containers", "deepseq", "directory", "parallel", "random", "split", "vector" }
	"RSA" -> { "SHA", "binary", "bytestring", "crypto-api", "crypto-pubkey-types", "monadcryptorandom", "pureMD5" }
	"Raincat" -> { "GLUT", "OpenGL", "SDL", "SDL-image", "SDL-mixer", "containers", "extensible-exceptions", "mtl", "random", "time" }
	"Random123" -> { "array", "random" }
	"RandomDotOrg" -> { "HTTP-Simple", "network" }
	"Range" -> {  }
	"Ranged-sets" -> { "HUnit", "QuickCheck" }
	"Ranka" -> { "HTTP", "XMPP", "json", "network", "utf8-string" }
	"Rasenschach" -> { "SDL", "SDL-gfx", "SDL-image", "SDL-mixer", "SDL-ttf", "Yampa", "array", "containers", "convertible", "directory", "filepath", "ghc", "monad-loops", "template-haskell", "time" }
	"Rasterific" -> { "FontyFruity", "JuicyPixels", "free", "linear", "mtl", "vector" }
	"ReadArgs" -> { "system-filepath", "text" }
	"Ref" -> { "ghc-prim" }
	"RefSerialize" -> { "binary", "bytestring", "containers", "hashtables" }
	"RepLib" -> { "containers", "mtl", "template-haskell", "type-equality" }
	"ReplicateEffects" -> {  }
	"ReviewBoard" -> { "HTTP", "directory", "json", "mtl", "network", "process", "random" }
	"Rlang-QQ" -> { "Cabal", "HList", "MaybeT", "array", "binary", "bytestring", "containers", "directory", "filepath", "haskell-src-meta", "mtl", "process", "repa", "split", "syb", "template-haskell", "temporary", "text", "trifecta", "utf8-string", "vector", "zlib" }
	"RollingDirectory" -> { "directory", "filepath", "hdaemonize", "hinotify", "hsyslog", "monad-parallel", "unix" }
	"RxHaskell" -> { "containers", "stm", "transformers" }
	"SBench" -> { "bytestring", "cassava", "criterion", "deepseq", "directory", "filepath", "gnuplot", "hp2any-core", "parsec", "process", "utf8-string", "vector" }
	"SDL" -> {  }
	"SDL-gfx" -> { "SDL" }
	"SDL-image" -> { "SDL" }
	"SDL-mixer" -> { "SDL" }
	"SDL-mpeg" -> { "SDL" }
	"SDL-ttf" -> { "SDL" }
	"SDL2-ttf" -> { "SDL2" }
	"SFML" -> {  }
	"SFML-control" -> { "SFML", "mtl", "template-haskell" }
	"SFont" -> { "SDL", "Sprig", "array" }
	"SG" -> { "mtl" }
	"SGdemo" -> { "GLUT", "OpenGL", "SG" }
	"SHA" -> { "SHA", "array", "binary", "bytestring", "directory" }
	"SHA2" -> { "AES", "bytestring", "monads-tf", "transformers" }
	"SMTPClient" -> { "containers", "extensible-exceptions", "hsemail", "network", "old-locale", "old-time" }
	"SNet" -> { "bindings-DSL", "containers", "data-default", "lens", "mtl", "transformers" }
	"SQLDeps" -> { "HDBC", "HDBC-sqlite3", "hashable", "mtl", "unordered-containers" }
	"STL" -> { "attoparsec", "bytestring", "cereal", "text" }
	"STMonadTrans" -> { "array", "mtl" }
	"SVG2Q" -> { "haskell98", "language-c", "pretty", "svgutils", "syb", "xml" }
	"SVGFonts" -> { "attoparsec", "blaze-markup", "blaze-svg", "containers", "data-default-class", "diagrams-lib", "directory", "parsec", "split", "text", "tuple", "vector", "vector-space", "xml" }
	"SVGPath" -> { "parsec" }
	"SableCC2Hs" -> { "array", "containers", "filepath", "loch-th", "pretty", "text", "transformers", "wl-pprint-text", "xml" }
	"Safe" -> {  }
	"SafeSemaphore" -> { "containers", "stm" }
	"Salsa" -> { "Win32", "bytestring" }
	"ScratchFs" -> { "HFuse", "bytestring", "directory", "filepath", "hsyslog", "process", "regex-compat", "sqlite-simple", "unix" }
	"Scurry" -> { "binary", "bytestring", "containers", "network", "network-bytestring", "parsec", "random", "stm", "time", "unix" }
	"SegmentTree" -> {  }
	"Semantique" -> { "bytestring", "classify", "containers", "mongoDB", "mtl", "network", "process", "split", "tagsoup", "text" }
	"Semigroup" -> { "bytestring", "containers", "mtl" }
	"SessionLogger" -> { "directory", "filepath", "hslogger", "mtl", "old-locale", "random", "time" }
	"ShellCheck" -> { "ShellCheck", "containers", "directory", "json", "mtl", "parsec", "regex-compat" }
	"Shellac" -> { "directory", "mtl", "unix" }
	"Shellac-compatline" -> { "Shellac", "Shellac-editline", "haskell98" }
	"Shellac-editline" -> { "Shellac", "editline", "haskell98" }
	"Shellac-haskeline" -> { "Shellac", "haskeline", "mtl" }
	"Shellac-readline" -> { "Shellac", "haskell98", "readline" }
	"ShowF" -> {  }
	"Shu-thing" -> { "GLUT" }
	"SimpleAES" -> { "binary", "bytestring", "mwc-random" }
	"SimpleEA" -> { "MonadRandom", "mersenne-random-pure64" }
	"SimpleGL" -> { "GLFW", "JuicyPixels", "OpenGL", "SimpleH", "vector" }
	"SimpleH" -> { "bytestring", "clock", "containers", "cpu", "directory", "filepath", "network", "time", "unix" }
	"SimpleLog" -> { "ForkableT", "ansi-terminal", "attoparsec", "bytestring", "containers", "directory", "monad-control", "mtl", "old-locale", "resourcet", "semigroups", "stm", "template-haskell", "text", "th-lift", "time", "transformers", "transformers-base" }
	"SizeCompare" -> { "containers" }
	"Snusmumrik" -> { "HDBC", "HDBC-sqlite3", "HFuse", "LibZip", "bytestring", "convertible", "directory", "filepath", "haskell98", "hslogger", "iconv", "regex-tdfa", "stm", "unix", "utf8-string", "xml" }
	"SoOSiM" -> { "concurrent-supply", "containers", "monad-coroutine", "mtl", "stm", "transformers" }
	"SoccerFun" -> { "base-unicode-symbols", "binary", "derive", "directory", "mtl", "process", "random", "zlib" }
	"SoccerFunGL" -> { "GLUT", "OpenGL", "SoccerFun", "base-unicode-symbols", "binary", "process", "random" }
	"SourceGraph" -> { "Cabal", "Graphalyze", "containers", "directory", "fgl", "filepath", "graphviz", "haskell-src-exts", "mtl", "multiset", "random" }
	"SpaceInvaders" -> { "HGL", "Yampa", "array", "random" }
	"Spock" -> { "base64-bytestring", "bytestring", "containers", "hashable", "http-types", "monad-control", "mtl", "old-locale", "path-pieces", "pool-conduit", "random", "resource-pool", "resourcet", "scotty", "stm", "text", "time", "transformers", "transformers-base", "unordered-containers", "vault", "wai", "wai-extra", "wai-util", "xsd" }
	"Spock-auth" -> { "Spock", "http-types", "text", "time" }
	"Spock-worker" -> { "HTF", "Spock", "containers", "lifted-base", "mtl", "stm", "text", "time", "transformers", "vector" }
	"SpreadsheetML" -> { "xml" }
	"Sprig" -> { "SDL" }
	"Stasis" -> { "containers" }
	"StateVar" -> {  }
	"StateVar-transformer" -> { "mtl", "transformers" }
	"StatisticalMethods" -> { "statistics", "tuple", "vector" }
	"Stomp" -> { "binary", "bytestring", "network", "time", "utf8-string" }
	"Strafunski-ATermLib" -> { "containers" }
	"Strafunski-Sdf2Haskell" -> { "Strafunski-ATermLib", "Strafunski-StrategyLib", "directory", "haskell-src", "mtl", "pretty", "process", "template-haskell" }
	"Strafunski-StrategyLib" -> { "directory", "mtl", "syb" }
	"StrategyLib" -> { "mtl" }
	"Stream" -> { "QuickCheck", "lazysmallcheck" }
	"StrictBench" -> { "benchpress", "parallel" }
	"SybWidget" -> { "TypeCompose", "containers", "mtl", "syb-with-class", "template-haskell" }
	"SyntaxMacros" -> { "AspectAG", "HList", "ListLike", "TTTAS", "containers", "template-haskell", "uu-parsinglib", "uulib" }
	"Sysmon" -> { "ConfigFile", "Glob", "MissingH", "filepath", "fingertree", "mtl", "old-locale", "pretty", "statistics", "template-haskell", "time", "vector" }
	"TBC" -> { "Cabal", "deepseq", "directory", "filepath", "process", "unix" }
	"TCache" -> { "RefSerialize", "bytestring", "containers", "directory", "hashtables", "mtl", "old-time", "stm", "text" }
	"TTTAS" -> {  }
	"TV" -> { "DeepArrow", "TypeCompose" }
	"TYB" -> { "array", "containers", "mtl", "template-haskell", "transformers" }
	"TableAlgebra" -> { "HaXml", "containers", "mtl", "pretty", "template-haskell" }
	"Tablify" -> { "parsec", "xhtml" }
	"Takusen" -> { "mtl", "time" }
	"TeaHS" -> { "SDL", "SDL-image", "SDL-mixer", "SFont", "Sprig", "array", "containers", "mtl" }
	"Tensor" -> {  }
	"TernaryTrees" -> { "binary" }
	"Theora" -> {  }
	"Thingie" -> { "cairo", "gtk", "mtl" }
	"ThreadObjects" -> {  }
	"Thrift" -> { "HTTP", "binary", "bytestring", "ghc-prim", "network" }
	"TicTacToe" -> { "HUnit", "QuickCheck", "containers", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"TigerHash" -> { "binary", "bytestring", "dataenc" }
	"TimePiece" -> { "SDL", "SDL-gfx", "SDL-image", "SDL-ttf", "containers", "old-locale", "old-time", "random" }
	"TinyLaunchbury" -> { "mtl" }
	"TinyURL" -> { "HTTP", "network" }
	"Top" -> { "containers", "mtl", "parsec" }
	"Tournament" -> { "containers", "mtl" }
	"TraceUtils" -> {  }
	"Transhare" -> { "containers" }
	"TreeStructures" -> {  }
	"TreeT" -> { "containers", "transformers" }
	"TrieMap" -> { "bytestring", "containers", "primitive", "template-haskell", "th-expand-syns", "transformers", "unpack-funcs", "vector" }
	"Twofish" -> { "array", "binary", "bytestring", "cereal", "crypto-api", "largeword", "mtl", "tagged" }
	"TypeClass" -> { "SDL", "SDL-ttf", "containers", "filepath", "random", "reactive-banana", "reactive-banana-sdl", "transformers" }
	"TypeCompose" -> {  }
	"TypeIlluminator" -> { "haskell98" }
	"TypingTester" -> { "time" }
	"UISF" -> { "GLFW", "OpenGL", "arrows", "containers", "deepseq", "monadIO", "stm", "transformers" }
	"UMM" -> { "haskell98", "old-time", "parsec", "process", "utf8-string" }
	"URLT" -> { "Consumer", "QuickCheck", "applicative-extras", "happstack-server", "hsp", "hsx", "mtl", "regular", "template-haskell" }
	"URLb" -> { "attoparsec", "bytestring", "containers" }
	"Unixutils" -> { "bytestring", "directory", "filepath", "process", "pureMD5", "regex-tdfa", "unix", "zlib" }
	"Unixutils-shadow" -> { "unix" }
	"UrlDisp" -> { "MaybeT", "cgi", "mtl" }
	"Useful" -> { "containers", "random" }
	"UtilityTM" -> {  }
	"VKHS" -> { "aeson", "bimap", "bytestring", "containers", "directory", "failure", "fclabels", "filepath", "mtl", "optparse-applicative", "parsec", "pretty-show", "regexpr", "safe", "split", "tagsoup", "tagsoup-parsec", "template-haskell", "text", "time", "transformers", "utf8-string", "vector" }
	"Validation" -> { "bifunctors", "semigroupoids", "semigroups" }
	"Vec" -> { "array", "ghc-prim" }
	"Vec-Boolean" -> { "Boolean", "Vec" }
	"Vec-OpenGLRaw" -> { "OpenGLRaw", "Vec" }
	"Vec-Transform" -> {  }
	"VecN" -> { "Peano" }
	"ViennaRNA-bindings" -> { "array" }
	"WAVE" -> { "bytestring" }
	"WL500gPControl" -> { "WL500gPLib", "directory", "filepath", "mtl", "unix" }
	"WL500gPLib" -> { "curl", "mtl", "tagsoup" }
	"WURFL" -> { "haskell98", "parsec" }
	"WXDiffCtrl" -> { "containers", "wx", "wxcore" }
	"WashNGo" -> { "containers", "directory", "ghc-paths", "haskell98", "parsec", "process", "regex-compat" }
	"WebBits" -> { "containers", "mtl", "parsec", "pretty", "syb" }
	"WebBits-Html" -> { "WebBits", "containers", "mtl", "parsec", "pretty", "syb" }
	"WebBits-multiplate" -> { "WebBits", "multiplate", "multiplate-simplified", "transformers" }
	"WebCont" -> { "applicative-extras", "concatenative", "containers", "formlets", "happstack-server", "happstack-state", "happstack-util", "mtl", "utf8-string", "xhtml" }
	"WeberLogic" -> { "parsec" }
	"Webrexp" -> { "HTTP", "HaXml", "aeson", "array", "bytestring", "containers", "directory", "filepath", "hxt", "mtl", "network", "parsec", "process", "regex-pcre-builtin", "template-haskell", "text", "transformers", "unordered-containers", "vector" }
	"Wheb" -> { "blaze-builder", "bytestring", "case-insensitive", "conduit", "containers", "cookie", "http-types", "mtl", "pwstore-fast", "stm", "text", "time", "transformers", "unix", "uuid", "wai", "wai-extra", "warp" }
	"WikimediaParser" -> { "parsec" }
	"Win32" -> { "bytestring" }
	"Win32-dhcp-server" -> { "Win32", "safe" }
	"Win32-errors" -> { "Win32", "template-haskell", "text" }
	"Win32-extras" -> { "Win32" }
	"Win32-junction-point" -> { "Win32", "text" }
	"Win32-notify" -> { "Win32", "Win32-notify", "containers", "directory" }
	"Win32-services" -> { "Win32", "errors" }
	"Win32-services-wrapper" -> { "Win32", "Win32-services", "directory", "filepath" }
	"Wired" -> { "QuickCheck", "chalmers-lava2000", "containers", "mtl" }
	"WordNet" -> { "array", "containers", "filepath" }
	"WordNet-ghc74" -> { "array", "containers", "filepath" }
	"Workflow" -> { "MonadCatchIO-transformers", "RefSerialize", "TCache", "binary", "bytestring", "containers", "directory", "extensible-exceptions", "mtl", "old-time", "stm", "vector" }
	"WxGeneric" -> { "SybWidget", "containers", "mtl", "wx", "wxcore", "xtc" }
	"X11" -> { "data-default" }
	"X11-extras" -> { "X11" }
	"X11-rm" -> { "X11" }
	"X11-xdamage" -> { "X11" }
	"X11-xfixes" -> { "X11" }
	"X11-xft" -> { "X11", "utf8-string" }
	"X11-xshape" -> { "X11" }
	"XAttr" -> { "unix" }
	"XInput" -> { "Win32" }
	"XMMS" -> { "containers" }
	"XMPP" -> { "haskell98", "hsdns", "mtl", "network", "parsec", "random", "utf8-string" }
	"Xauth" -> {  }
	"Xec" -> { "SHA", "binary", "bytestring", "cairo", "containers", "directory", "filepath", "gtk", "mtl", "old-time", "unix" }
	"XmlHtmlWriter" -> { "mtl", "transformers" }
	"YACPong" -> { "SDL", "SDL-image", "SDL-mixer", "SDL-ttf", "data-accessor-transformers", "fclabels", "monads-fd", "random", "transformers" }
	"YFrob" -> { "HGL", "Yampa", "array" }
	"Yablog" -> { "blaze-builder", "blaze-html", "bytestring", "case-insensitive", "clientsession", "conduit", "containers", "data-default", "directory", "filepath", "hamlet", "hjsmin", "http-conduit", "http-types", "mime-mail", "monad-control", "mtl", "network", "old-locale", "pandoc", "pandoc-types", "persistent", "persistent-mongoDB", "resourcet", "shakespeare-css", "shakespeare-js", "shakespeare-text", "template-haskell", "temporary", "text", "time", "wai", "wai-extra", "xml-conduit", "xml-hamlet", "yaml", "yesod", "yesod-auth", "yesod-core", "yesod-default", "yesod-form", "yesod-newsfeed", "yesod-platform", "yesod-recaptcha", "yesod-static" }
	"YamlReference" -> { "HUnit", "bytestring", "containers", "directory", "dlist", "regex-compat" }
	"Yampa" -> { "random" }
	"YampaSynth" -> { "HCodecs", "OpenAL", "Yampa", "array", "bytestring", "containers", "glade", "gtk" }
	"Yocto" -> { "containers", "parsec" }
	"Yogurt" -> { "containers", "mtl", "network", "old-locale", "process", "readline", "regex-posix", "time" }
	"Yogurt-Standalone" -> { "Yogurt", "containers", "hint", "mtl", "network", "old-locale", "process", "regex-posix", "time" }
	"ZFS" -> { "CC-delcont", "containers", "mtl", "network", "unix" }
	"ZMachine" -> { "array", "gtk", "mtl", "random" }
	"ZipFold" -> { "TypeCompose" }
	"ZipperAG" -> { "syz" }
	"Zwaluw" -> {  }
	"a50" -> { "biofasta", "biopsl", "cmdargs", "containers", "directory", "process" }
	"abacate" -> { "parsec", "text" }
	"abcnotation" -> { "network", "parsec", "prettify", "semigroups" }
	"abstract-deque" -> { "array", "containers", "random", "time" }
	"abstract-deque-tests" -> { "HUnit", "abstract-deque", "array", "containers", "random", "test-framework", "test-framework-hunit", "time" }
	"abstract-par" -> { "deepseq" }
	"abstract-par-accelerate" -> { "abstract-par", "accelerate", "array", "vector" }
	"ac-machine" -> { "hashable", "unordered-containers", "vector" }
	"ac-machine-conduit" -> { "ac-machine", "conduit", "text" }
	"accelerate" -> { "array", "containers", "fclabels", "ghc-prim", "hashable", "hashtables", "pretty", "unordered-containers" }
	"accelerate-cuda" -> { "SafeSemaphore", "accelerate", "array", "binary", "bytestring", "cryptohash", "cuda", "directory", "fclabels", "filepath", "hashable", "hashtables", "language-c-quote", "mainland-pretty", "mtl", "old-time", "pretty", "process", "srcloc", "template-haskell", "text", "transformers", "unix", "unordered-containers" }
	"accelerate-examples" -> { "HUnit", "QuickCheck", "accelerate", "accelerate-cuda", "accelerate-fft", "accelerate-io", "array", "attoparsec", "bmp", "bytestring", "bytestring-lexing", "cereal", "containers", "criterion", "ekg", "fclabels", "filepath", "gloss", "gloss-accelerate", "gloss-raster-accelerate", "mwc-random", "primitive", "random", "repa", "repa-io", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "vector", "vector-algorithms" }
	"accelerate-fft" -> { "accelerate", "accelerate-cuda", "cuda", "cufft" }
	"accelerate-io" -> { "accelerate", "array", "bmp", "bytestring", "repa", "vector" }
	"accentuateus" -> { "HTTP", "bytestring", "json", "network", "text" }
	"access-time" -> { "filepath", "old-time", "time", "unix" }
	"ace" -> { "attoparsec", "blaze-html", "blaze-markup", "data-default", "parsec", "text" }
	"acid-state" -> { "array", "bytestring", "cereal", "containers", "directory", "extensible-exceptions", "filepath", "mtl", "network", "safecopy", "stm", "template-haskell", "unix" }
	"acid-state-tls" -> { "HsOpenSSL", "acid-state", "directory", "network", "safecopy" }
	"acme-colosson" -> { "random" }
	"acme-comonad" -> { "comonad" }
	"acme-cutegirl" -> {  }
	"acme-dont" -> {  }
	"acme-hq9plus" -> {  }
	"acme-http" -> { "bytestring", "extensible-exceptions", "mtl", "network", "pretty" }
	"acme-inator" -> {  }
	"acme-lookofdisapproval" -> {  }
	"acme-microwave" -> {  }
	"acme-missiles" -> { "stm" }
	"acme-now" -> { "time" }
	"acme-numbersystem" -> { "template-haskell" }
	"acme-omitted" -> {  }
	"acme-php" -> {  }
	"acme-realworld" -> {  }
	"acme-schoenfinkel" -> {  }
	"acme-strfry" -> { "bytestring" }
	"acme-year" -> {  }
	"action-permutations" -> {  }
	"active" -> { "array", "newtype", "semigroupoids", "semigroups", "vector-space" }
	"activehs" -> { "QuickCheck", "activehs-base", "array", "blaze-html", "bytestring", "cmdargs", "containers", "data-pprint", "deepseq", "dia-base", "dia-functions", "directory", "filepath", "haskell-src-exts", "highlighting-kate", "hint", "hoogle", "mtl", "old-locale", "old-time", "pandoc", "process", "pureMD5", "simple-reflect", "snap-core", "snap-server", "split", "syb", "text", "time", "utf8-string", "xhtml" }
	"activehs-base" -> { "QuickCheck" }
	"actor" -> { "haskell98", "stm", "time" }
	"ad" -> { "array", "comonad", "containers", "data-reify", "erf", "free", "mtl", "nats", "reflection", "tagged", "template-haskell", "transformers" }
	"adaptive-containers" -> {  }
	"adaptive-tuple" -> { "template-haskell", "type-level" }
	"adb" -> { "bytestring", "cereal", "containers", "mtl", "network" }
	"adblock2privoxy" -> { "MissingH", "containers", "directory", "filepath", "mtl", "old-locale", "parsec", "parsec-permutation", "strict", "time" }
	"addLicenseInfo" -> { "process" }
	"adhoc-network" -> { "Crypto", "HaXml", "bytestring", "containers", "dataenc", "hsgnutls", "network", "old-locale", "parsec", "pkcs1", "random", "time", "utf8-string", "xml-parsec" }
	"adict" -> { "PSQueue", "array", "binary", "containers", "dawg", "vector" }
	"adjunctions" -> { "array", "comonad", "containers", "contravariant", "distributive", "free", "mtl", "semigroupoids", "semigroups", "tagged", "transformers", "void" }
	"adobe-swatch-exchange" -> { "binary", "bytestring", "data-binary-ieee754", "language-css", "mtl", "pretty" }
	"adp-multi" -> { "array", "containers", "htrace" }
	"adp-multi-monadiccp" -> { "adp-multi", "containers", "monadiccp" }
	"aeson" -> { "attoparsec", "bytestring", "containers", "deepseq", "hashable", "mtl", "old-locale", "scientific", "syb", "template-haskell", "text", "time", "unordered-containers", "vector" }
	"aeson-bson" -> { "aeson", "array", "attoparsec", "bson", "bytestring", "containers", "text", "unordered-containers", "vector" }
	"aeson-lens" -> { "aeson", "bytestring", "lens", "text", "unordered-containers", "vector" }
	"aeson-native" -> { "attoparsec", "blaze-builder", "blaze-textual-native", "bytestring", "containers", "deepseq", "hashable", "mtl", "old-locale", "syb", "text", "time", "unordered-containers", "vector" }
	"aeson-pretty" -> { "aeson", "aeson-pretty", "attoparsec", "bytestring", "cmdargs", "text", "unordered-containers", "vector" }
	"aeson-qq" -> { "aeson", "haskell-src-meta", "json-qq", "parsec", "template-haskell" }
	"aeson-schema" -> { "QuickCheck", "aeson", "attoparsec", "bytestring", "containers", "mtl", "regex-pcre", "syb", "template-haskell", "text", "th-lift", "transformers", "unordered-containers", "vector" }
	"aeson-smart" -> { "aeson", "data-default", "template-haskell", "text", "unordered-containers", "vector" }
	"aeson-toolkit" -> { "aeson", "bytestring", "failure", "text" }
	"aeson-utils" -> { "aeson", "attoparsec", "bytestring", "scientific", "text" }
	"affine-invariant-ensemble-mcmc" -> { "containers", "mwc-random", "primitive", "split", "vector" }
	"afis" -> { "byteable", "bytestring", "crypto-random", "cryptohash", "packer" }
	"afv" -> { "bytestring", "directory", "language-c", "mtl", "process", "yices" }
	"agda-server" -> { "Agda", "HJavaScript", "cmdargs", "containers", "directory", "filepath", "mtl", "pandoc", "snap-core", "snap-server", "transformers", "utf8-string", "xhtml" }
	"agum" -> { "containers" }
	"air" -> { "array", "bytestring", "containers", "directory", "dlist", "filepath", "mtl", "parallel", "template-haskell", "text", "time" }
	"air-extra" -> { "air", "array", "bytestring", "containers", "directory", "filepath", "old-locale", "old-time", "parallel", "parsec", "regexpr", "text", "time" }
	"air-spec" -> { "hspec", "text" }
	"aivika" -> { "array", "containers", "mtl", "random" }
	"aivika-experiment" -> { "aivika", "array", "containers", "directory", "filepath", "mtl", "network", "parallel-io", "split", "utf8-string", "vector" }
	"aivika-experiment-chart" -> { "Chart", "Chart-cairo", "aivika", "aivika-experiment", "array", "colour", "containers", "data-default-class", "filepath", "lens", "mtl", "split" }
	"ajhc" -> { "HTTP", "HsSyck", "ajhc", "array", "binary", "bytestring", "containers", "cpphs", "directory", "fgl", "filepath", "haskeline", "mtl", "network", "old-time", "pretty", "process", "random", "regex-compat", "syb", "temporary", "unix", "utf8-string", "zlib" }
	"alex" -> { "QuickCheck", "array", "containers", "directory" }
	"alex-meta" -> { "QuickCheck", "array", "containers", "haskell-src-meta", "template-haskell" }
	"alfred" -> { "HTTP", "aeson", "bytestring", "network", "text", "xmlgen" }
	"algebra" -> { "array", "categories", "containers", "distributive", "keys", "mtl", "nats", "representable-functors", "representable-tries", "semigroupoids", "semigroups", "tagged", "transformers", "void" }
	"algebraic-classes" -> { "syb", "template-haskell" }
	"aligned-foreignptr" -> {  }
	"allocated-processor" -> { "vector-space" }
	"alloy" -> { "containers", "mtl", "syb", "vector" }
	"alloy-proxy-fd" -> { "alloy", "mtl" }
	"alms" -> { "HUnit", "QuickCheck", "array", "containers", "directory", "editline", "fgl", "filepath", "incremental-sat-solver", "mtl", "network", "parsec", "pretty", "random", "stm", "syb", "template-haskell", "transformers", "tuple" }
	"alpha" -> { "AvlTree", "COrdering", "array", "bimap", "bindings-posix", "bytestring", "cereal", "containers", "cpphs", "directory", "filepath", "ghc-prim", "mtl", "parsec", "transformers", "unix" }
	"alpino-tools" -> { "MonadRandom", "alpino-tools", "bytestring", "bytestring-lexing", "conduit", "containers", "hexpat-pickle", "mtl", "random-shuffle", "resourcet", "rosezipper", "utf8-string" }
	"alsa" -> { "array", "extensible-exceptions", "sample-frame" }
	"alsa-core" -> { "extensible-exceptions" }
	"alsa-gui" -> { "alsa-core", "alsa-seq", "midi", "midi-alsa", "wx", "wxcore" }
	"alsa-midi" -> { "array", "event-list", "midi", "non-negative" }
	"alsa-mixer" -> { "alsa-core", "unix" }
	"alsa-pcm" -> { "alsa-core", "array", "extensible-exceptions", "sample-frame", "storable-record" }
	"alsa-pcm-tests" -> { "alsa" }
	"alsa-seq" -> { "alsa-core", "array", "bytestring", "data-accessor", "enumset", "extensible-exceptions", "poll", "transformers", "utility-ht" }
	"alsa-seq-tests" -> { "alsa" }
	"alternative-io" -> { "lifted-base", "monad-control", "transformers", "transformers-base" }
	"altfloat" -> { "ghc-prim", "integer-gmp" }
	"alure" -> { "OpenAL" }
	"amazon-emailer" -> { "bytestring", "http-conduit", "lifted-base", "mime-mail", "mime-mail-ses", "postgresql-simple", "resourcet", "text", "time" }
	"amazon-emailer-client-snap" -> { "mtl", "snap", "snaplet-postgresql-simple", "text" }
	"ampersand" -> { "SpreadsheetML", "ampersand", "bytestring", "containers", "directory", "filepath", "graphviz", "hashable", "mtl", "old-locale", "pandoc", "pandoc-types", "process", "split", "time", "utf8-string" }
	"amqp" -> { "binary", "bytestring", "clock", "connection", "containers", "data-binary-ieee754", "monad-control", "network", "split", "text", "xml" }
	"amrun" -> { "deepseq", "parsec" }
	"analyze-client" -> { "MonadCatchIO-transformers", "bytestring", "http-conduit", "mtl", "snap", "snap-core", "time" }
	"anansi" -> { "bytestring", "containers", "monads-tf", "options", "parsec", "system-argv0", "system-fileio", "system-filepath", "text" }
	"anansi-hscolour" -> { "anansi", "bytestring", "containers", "hscolour", "monads-tf", "text" }
	"anansi-pandoc" -> { "anansi", "bytestring", "containers", "monads-tf", "pandoc", "text" }
	"anatomy" -> { "atomo", "blaze-html", "bytestring", "containers", "directory", "filepath", "hashable", "haskeline", "highlighter", "mtl", "parsec", "pretty", "pretty-show", "tagsoup", "text", "time", "vector" }
	"angel" -> { "configurator", "containers", "mtl", "old-locale", "process", "stm", "text", "time", "unix", "unordered-containers" }
	"animalcase" -> { "bytestring", "text" }
	"annotated-wl-pprint" -> {  }
	"anonymous-sums" -> {  }
	"ansi-terminal" -> { "unix" }
	"ansi-wl-pprint" -> { "ansi-terminal" }
	"antagonist" -> { "antisplice", "chatty", "hamlet", "ironforge", "mtl", "old-locale", "shakespeare-css", "shakespeare-js", "shakespeare-text", "text", "time", "yesod" }
	"antfarm" -> { "antfarm", "containers", "minimorph", "mtl", "parsec", "text", "transformers" }
	"antigate" -> { "bytestring", "data-default", "deepseq", "failure", "http-client-multipart", "http-conduit", "resourcet", "safe", "text", "transformers" }
	"antimirov" -> { "QuickCheck", "containers" }
	"antiquoter" -> { "syb", "template-haskell" }
	"antisplice" -> { "chatty", "haskeline", "mtl", "template-haskell", "text", "time", "transformers" }
	"antlrc" -> { "bytestring", "enumerator", "haskell98", "regex-posix" }
	"anydbm" -> { "MissingH", "containers", "mtl" }
	"aosd" -> { "X11", "bindings-DSL", "cairo", "colour", "monad-control", "pango", "transformers" }
	"apache-md5" -> { "bytestring" }
	"apelsin" -> { "HTTP", "array", "bytestring", "containers", "deepseq", "directory", "filepath", "glib", "gtk", "mtl", "network", "process", "transformers", "tremulous-query", "xdg-basedir" }
	"api-tools" -> { "Cabal", "QuickCheck", "aeson", "aeson-pretty", "api-tools", "array", "attoparsec", "base64-bytestring", "bytestring", "case-insensitive", "containers", "lens", "old-locale", "regex-compat-tdfa", "safe", "safecopy", "template-haskell", "text", "time", "unordered-containers", "vector" }
	"apotiki" -> { "aeson", "attoparsec", "binary", "bytestring", "containers", "crypto-api", "cryptohash", "directory", "http-types", "old-time", "openpgp", "openpgp-asciiarmor", "openpgp-crypto-api", "scotty", "strict", "tar", "text", "transformers", "wai-extra", "wai-middleware-static", "zlib" }
	"appar" -> { "bytestring" }
	"applicative-extras" -> {  }
	"applicative-numbers" -> { "wl-pprint" }
	"applicative-quoters" -> { "haskell-src-meta", "template-haskell" }
	"approx-rand-test" -> { "Chart", "Chart-diagrams", "approx-rand-test", "colour", "conduit", "containers", "data-default", "data-default-class", "filepath", "lens", "mersenne-random-pure64", "monad-mersenne-random", "mtl", "statistics", "text", "transformers", "vector", "vector-algorithms" }
	"approximate" -> { "binary", "bytes", "cereal", "comonad", "deepseq", "distributive", "generic-deriving", "ghc-prim", "hashable", "hashable-extras", "lens", "log-domain", "pointed", "safecopy", "semigroupoids", "semigroups", "vector" }
	"approximate-equality" -> { "type-level-natural-number" }
	"ar-timestamp-wiper" -> { "bytestring" }
	"arb-fft" -> { "arb-fft", "containers", "criterion", "directory", "filepath", "primitive", "transformers", "vector" }
	"arbb-vm" -> { "bytestring", "cereal", "containers", "directory", "mtl", "pretty" }
	"arbtt" -> { "X11", "binary", "bytestring", "bytestring-progress", "containers", "deepseq", "directory", "filepath", "old-locale", "parsec", "pcre-light", "strict", "terminal-progress-bar", "time", "transformers", "unix", "utf8-string" }
	"archive" -> { "Extra", "HUnit", "Unixutils", "bytestring", "debian", "debian-mirror", "directory", "filepath", "help", "mtl", "network", "old-locale", "pretty", "process", "progress", "regex-compat", "regex-posix", "time", "unix", "xhtml" }
	"archiver" -> { "HTTP", "bytestring", "containers", "curl", "network", "process", "random" }
	"archlinux" -> { "Cabal", "containers", "directory", "filepath", "pretty" }
	"archlinux-web" -> { "Cabal", "HTTP", "archlinux", "containers", "csv", "deepseq", "directory", "filepath", "json", "old-time", "parallel", "pretty", "prettyclass", "process", "strict-concurrency", "xhtml" }
	"archnews" -> { "containers", "download-curl", "feed", "tagsoup" }
	"arff" -> { "binary", "bytestring", "bytestring-lexing", "bytestring-show", "old-locale", "time" }
	"argparser" -> { "containers" }
	"ariadne" -> { "Cabal", "bert", "containers", "haskell-names", "haskell-packages", "haskell-src-exts", "mtl", "utf8-string" }
	"arithmoi" -> { "array", "containers", "ghc-prim", "integer-gmp", "mtl", "random" }
	"armada" -> { "GLUT", "OpenGL", "mtl", "stm" }
	"array" -> {  }
	"array-forth" -> { "Chart", "MonadRandom", "OddWord", "array-forth", "mcmc-synthesis", "optparse-applicative", "split", "vector" }
	"array-memoize" -> { "array" }
	"array-utils" -> { "array" }
	"arrow-improve" -> { "arrows", "pointed", "profunctors", "semigroupoids" }
	"arrow-list" -> { "containers", "mtl" }
	"arrowapply-utils" -> {  }
	"arrowp" -> { "array", "containers", "haskell-src" }
	"arrows" -> { "Stream" }
	"artery" -> { "containers", "profunctors", "transformers" }
	"arx" -> { "attoparsec", "blaze-builder", "bytestring", "bytestring-nums", "containers", "file-embed", "parsec", "process", "shell-escape", "template-haskell" }
	"ascetic" -> { "MissingH" }
	"ascii" -> { "blaze-builder", "bytestring", "case-insensitive", "hashable", "text" }
	"ascii85-conduit" -> { "bytestring", "conduit" }
	"asic" -> { "asil", "bytestring", "utf8-string" }
	"asil" -> { "array", "binary", "bytestring", "containers", "data-binary-ieee754", "directory", "filepath", "haskell-src-exts", "mtl", "pretty", "utf8-string", "uuagc", "zip-archive", "zlib" }
	"asn1-data" -> { "bytestring", "cereal", "mtl", "text" }
	"asn1-encoding" -> { "asn1-types", "bytestring", "mtl", "text", "time" }
	"asn1-parse" -> { "asn1-encoding", "asn1-types", "bytestring", "mtl", "text", "time" }
	"asn1-types" -> { "bytestring", "time" }
	"asn1dump" -> { "asn1-encoding", "asn1-types", "bytestring", "pem" }
	"assembler" -> { "containers", "ghc-binary", "parsec" }
	"assert" -> {  }
	"assert-failure" -> { "pretty-show", "text" }
	"assimp" -> { "haskell98", "vect" }
	"astar" -> { "PSQueue", "containers" }
	"astrds" -> { "MonadRandom", "OpenGL", "SDL", "SDL-image", "SDL-mixer", "SDL-ttf", "containers", "directory", "mtl", "random", "unix" }
	"astview" -> { "Glob", "astview-utils", "bytestring", "containers", "directory", "filepath", "glade", "glib", "gtk", "gtksourceview2", "hint", "mtl", "process", "syb" }
	"astview-utils" -> { "containers", "syb" }
	"async" -> { "stm" }
	"asynchronous-exceptions" -> {  }
	"aterm" -> { "array", "containers", "ghc-prim" }
	"aterm-utils" -> { "aterm", "aterm-utils", "mtl", "transformers", "wl-pprint" }
	"atl" -> {  }
	"atmos" -> {  }
	"atmos-dimensional" -> { "atmos", "dimensional" }
	"atmos-dimensional-tf" -> { "atmos", "dimensional-tf" }
	"atom" -> { "bimap", "containers", "mtl", "process", "syb" }
	"atom-msp430" -> { "atom", "mtl" }
	"atomic-primops" -> { "Cabal", "ghc-prim", "primitive" }
	"atomic-primops-foreign" -> { "bits-atomic" }
	"atomo" -> { "array", "bytestring", "containers", "directory", "filepath", "hashable", "haskeline", "hint", "mtl", "parsec", "pretty", "regex-pcre", "template-haskell", "text", "time", "vector" }
	"attempt" -> { "failure" }
	"atto-lisp" -> { "attoparsec", "blaze-builder", "blaze-textual", "bytestring", "containers", "deepseq", "text" }
	"attoparsec" -> { "array", "bytestring", "containers", "deepseq", "scientific", "text" }
	"attoparsec-arff" -> { "attoparsec", "bytestring" }
	"attoparsec-binary" -> { "attoparsec", "bytestring" }
	"attoparsec-conduit" -> { "conduit" }
	"attoparsec-csv" -> { "attoparsec", "text" }
	"attoparsec-enumerator" -> { "attoparsec", "bytestring", "enumerator", "text" }
	"attoparsec-expr" -> { "attoparsec" }
	"attoparsec-iteratee" -> { "attoparsec", "bytestring", "iteratee", "transformers" }
	"attoparsec-parsec" -> { "attoparsec", "parsec", "text" }
	"attoparsec-text" -> { "array", "attoparsec", "containers", "text" }
	"attoparsec-text-enumerator" -> { "attoparsec-text", "enumerator", "text" }
	"attosplit" -> { "attoparsec", "bytestring" }
	"atuin" -> { "Cabal", "array", "directory", "epic", "haskell98" }
	"augeas" -> { "HUnit", "bytestring", "directory", "unix" }
	"augur" -> { "HaXml", "bytestring", "classify", "containers", "directory", "filepath", "mtl", "process" }
	"authenticate" -> { "aeson", "attoparsec", "blaze-builder", "bytestring", "case-insensitive", "conduit", "containers", "http-conduit", "http-types", "monad-control", "network", "resourcet", "tagstream-conduit", "text", "transformers", "unordered-containers", "xml-conduit" }
	"authenticate-kerberos" -> { "process", "text" }
	"authenticate-ldap" -> { "LDAP", "text", "transformers" }
	"authenticate-oauth" -> { "RSA", "SHA", "base64-bytestring", "blaze-builder", "blaze-builder-conduit", "bytestring", "conduit", "crypto-pubkey-types", "data-default", "http-conduit", "http-types", "monad-control", "random", "resourcet", "time", "transformers" }
	"authoring" -> { "HaTeX", "ansi-wl-pprint", "citation-resolve", "containers", "data-default", "haskell-src-meta", "lens", "mtl", "parsers", "safe", "template-haskell", "text", "transformers", "trifecta" }
	"autoproc" -> { "directory", "mtl", "process", "unix" }
	"avahi" -> { "dbus-core", "text" }
	"avl-static" -> {  }
	"avr-shake" -> { "shake" }
	"awesomium" -> { "aeson", "attoparsec", "awesomium-raw", "containers", "text", "vector" }
	"awesomium-glut" -> { "GLUT", "awesomium", "awesomium-raw" }
	"awesomium-raw" -> {  }
	"aws" -> { "aeson", "attempt", "attoparsec-conduit", "base16-bytestring", "base64-bytestring", "blaze-builder", "bytestring", "case-insensitive", "cereal", "conduit", "containers", "crypto-api", "cryptohash", "cryptohash-cryptoapi", "data-default", "directory", "failure", "filepath", "http-conduit", "http-types", "lifted-base", "monad-control", "mtl", "old-locale", "resourcet", "text", "time", "transformers", "unordered-containers", "utf8-string", "vector", "xml-conduit" }
	"aws-cloudfront-signer" -> { "RSA", "asn1-encoding", "asn1-types", "base64-bytestring", "bytestring", "crypto-pubkey-types", "old-locale", "time" }
	"aws-elastic-transcoder" -> { "QuickCheck", "aeson", "aws", "aws-sign4", "bytestring", "conduit", "containers", "http-conduit", "http-types", "regex-compat", "safe", "text", "time", "transformers" }
	"aws-route53" -> { "aws", "bytestring", "containers", "failure", "http-conduit", "http-types", "old-locale", "text", "time", "xml-conduit", "xml-hamlet" }
	"aws-sdk" -> { "SHA", "base64-bytestring", "bytestring", "conduit", "containers", "data-default", "http-conduit", "http-types", "iproute", "lifted-base", "monad-control", "mtl", "old-locale", "parallel", "parsec", "safe", "simple-config", "strptime", "template-haskell", "text", "time", "tls", "transformers", "transformers-base", "xml-conduit", "xml-types" }
	"aws-sdk-text-converter" -> { "bytestring", "iproute", "old-locale", "safe", "strptime", "template-haskell", "text", "time" }
	"aws-sdk-xml-unordered" -> { "aws-sdk-text-converter", "conduit", "containers", "lifted-base", "mtl", "text", "unordered-containers", "xml-conduit", "xml-types" }
	"aws-sign4" -> { "aws", "blaze-builder", "byteable", "bytestring", "case-insensitive", "cryptohash", "http-types", "old-locale", "safe", "time" }
	"azure-service-api" -> { "binary", "bytestring", "case-insensitive", "certificate", "crypto-pubkey-types", "http-conduit", "hxt", "hxt-xpath", "pretty", "resourcet", "tls", "tls-extra", "transformers" }
	"azurify" -> { "HTTP", "SHA", "base64-bytestring", "bytestring", "case-insensitive", "cmdargs", "conduit", "data-default", "directory", "filepath", "http-conduit", "http-date", "http-types", "hxt", "network", "old-locale", "text", "time", "transformers", "unix-compat", "utf8-string" }
	"babylon" -> { "array", "containers", "haskell98", "wx", "wxcore" }
	"backdropper" -> { "directory", "haskell98", "hslogger", "old-time", "process", "random" }
	"backward-state" -> { "transformers" }
	"bacteria" -> { "X11", "gd" }
	"bag" -> {  }
	"bamboo" -> { "bytestring", "containers", "data-default", "directory", "filepath", "gravatar", "hack", "hack-contrib", "haskell98", "mps", "mtl", "network", "old-locale", "old-time", "pandoc", "parsec", "parsedate", "process", "time", "unix", "utf8-string", "xhtml", "zlib" }
	"bamboo-launcher" -> { "bamboo", "bamboo-theme-blueprint", "bytestring", "data-default", "hack", "hack-contrib", "hack-handler-hyena", "haskell98", "mps", "process" }
	"bamboo-plugin-highlight" -> { "bamboo", "bytestring", "hack", "hack-contrib", "highlighting-kate", "hxt", "mps", "xhtml" }
	"bamboo-plugin-photo" -> { "bytestring", "data-default", "directory", "filepath", "hack", "hack-contrib", "haskell98", "hxt", "mps", "utf8-string", "xhtml" }
	"bamboo-theme-blueprint" -> { "bamboo", "bytestring", "containers", "data-default", "gravatar", "hack", "hack-contrib", "hcheat", "mps", "network", "rss", "utf8-string", "xhtml" }
	"bamboo-theme-mini-html5" -> { "bamboo", "base64-string", "bytestring", "cgi", "containers", "data-default", "directory", "filepath", "gravatar", "hack", "hack-contrib", "haskell98", "hcheat", "moe", "mps", "mtl", "network", "old-locale", "old-time", "parsec", "parsedate", "process", "rss", "time", "unix", "utf8-string", "xhtml", "yuuko", "zlib" }
	"bamse" -> { "HUnit", "QuickCheck", "com", "directory", "filepath", "old-time", "pretty", "process", "regex-compat" }
	"bamstats" -> { "cmdargs", "samtools" }
	"barchart" -> { "cmdargs", "csv", "diagrams", "filepath" }
	"barley" -> { "bytestring", "containers", "directory", "filepath", "ghc", "ghc-prim", "html", "plugins", "snap-core", "snap-server", "text", "transformers", "unix-compat" }
	"barrie" -> { "containers", "filepath", "glib", "gtk" }
	"barrier-monad" -> { "comonad", "mtl", "transformers" }
	"base-compat" -> { "errorcall-eq-instance", "setenv" }
	"base-io-access" -> {  }
	"base-unicode-symbols" -> {  }
	"base16-bytestring" -> { "bytestring", "ghc-prim" }
	"base32-bytestring" -> { "bits-extras", "bytestring", "cpu" }
	"base58address" -> { "binary", "bytestring", "containers", "cryptohash" }
	"base64-bytestring" -> { "bytestring" }
	"base64-conduit" -> { "base64-bytestring", "bytestring", "conduit" }
	"base64-string" -> {  }
	"bash" -> { "SHA", "binary", "bytestring", "containers", "hxt-regex-xmlschema", "mtl", "shell-escape" }
	"basic-prelude" -> { "ReadArgs", "bytestring", "containers", "hashable", "lifted-base", "safe", "system-filepath", "text", "transformers", "unordered-containers", "vector" }
	"baskell" -> { "containers", "mtl", "parsec", "pretty", "unix" }
	"bayes-stack" -> { "cereal", "containers", "deepseq", "digamma", "enummapset", "gamma", "ghc-prim", "logfloat", "mtl", "mwc-random", "pretty", "random-fu", "random-source", "rvar", "statistics", "stm", "transformers", "vector" }
	"bbdb" -> { "mtl", "parsec" }
	"bcrypt" -> { "bytestring", "entropy" }
	"bdelta" -> { "bytestring" }
	"bdo" -> { "aeson", "network", "text", "url" }
	"beamable" -> { "blaze-builder", "bytestring", "ghc-prim", "integer-gmp", "murmur-hash" }
	"beautifHOL" -> { "array", "haskell98", "mtl" }
	"bed-and-breakfast" -> { "array", "binary", "deepseq", "template-haskell" }
	"bein" -> { "Crypto", "HDBC", "HDBC-postgresql", "bytestring", "containers", "convertible", "directory", "filepath", "happstack-server", "happstack-util", "hdaemonize", "hsyslog", "mtl", "network", "old-locale", "parsec", "process", "random", "stm", "time", "unix", "utf8-string", "xhtml" }
	"benchpress" -> { "mtl", "time" }
	"bencode" -> { "binary", "bytestring", "containers", "parsec" }
	"bencoding" -> { "attoparsec", "bytestring", "deepseq", "ghc-prim", "mtl", "pretty", "text" }
	"berkeleydb" -> { "binary", "bytestring" }
	"berp" -> { "array", "containers", "directory", "extensible-exceptions", "filepath", "ghc", "ghc-paths", "ghc-prim", "haskeline", "haskell-src-exts", "language-python", "monads-tf", "parseargs", "process", "template-haskell", "transformers" }
	"bert" -> { "binary", "binary-conduit", "bytestring", "conduit", "containers", "mtl", "network", "network-conduit", "parsec", "time", "unix", "void" }
	"besout" -> {  }
	"bf-cata" -> {  }
	"bff" -> { "bimap", "category-extras", "containers", "derive", "haskell98", "mtl", "template-haskell", "unix" }
	"bff-mono" -> { "containers", "mtl" }
	"bibtex" -> { "latex", "parsec", "utility-ht" }
	"bidirectionalization-combined" -> { "bytestring", "cgi", "containers", "directory", "hint", "mtl", "parsec", "pretty", "template-haskell", "unix", "utf8-string", "xhtml" }
	"bidispec" -> { "bytestring", "mtl" }
	"bidispec-extras" -> { "bytestring", "dataenc", "mtl" }
	"bifunctors" -> { "semigroupoids", "semigroups", "tagged" }
	"billboard-parser" -> { "HUnit", "HarmTrace-Base", "ListLike", "directory", "filepath", "mtl", "parseargs", "uu-parsinglib" }
	"billeksah-forms" -> { "Cabal", "billeksah-pane", "billeksah-services", "containers", "directory", "filepath", "glib", "gtk", "mtl", "parsec", "pretty", "transformers" }
	"billeksah-main" -> { "billeksah-services", "containers", "directory", "filepath", "mtl", "parsec", "plugins", "pretty", "transformers" }
	"billeksah-main-static" -> { "billeksah-forms", "billeksah-pane", "billeksah-services", "containers", "directory", "filepath", "leksah-dummy", "leksah-main", "leksah-plugin-pane", "mtl", "parsec", "pretty", "transformers" }
	"billeksah-pane" -> { "billeksah-services", "containers", "directory", "filepath", "glib", "gtk", "mtl", "parsec", "pretty", "time", "transformers" }
	"billeksah-services" -> { "containers", "directory", "filepath", "mtl", "parsec", "pretty", "transformers" }
	"bimap" -> { "containers" }
	"binary" -> { "array", "bytestring", "containers" }
	"binary-bits" -> { "binary", "bytestring" }
	"binary-communicator" -> { "binary", "bytestring", "mtl" }
	"binary-conduit" -> { "binary", "bytestring", "conduit", "vector" }
	"binary-derive" -> { "binary", "ghc-prim" }
	"binary-file" -> { "bytestring", "monads-tf", "peggy", "template-haskell" }
	"binary-generic" -> { "binary", "bytestring", "data-binary-ieee754", "syb", "text" }
	"binary-indexed-tree" -> { "array" }
	"binary-literal-qq" -> { "template-haskell" }
	"binary-protocol" -> { "binary", "bytestring", "mtl" }
	"binary-protocol-zmq" -> { "binary", "bytestring", "mtl", "zeromq-haskell" }
	"binary-search" -> { "containers" }
	"binary-shared" -> { "binary", "bytestring", "containers", "mtl" }
	"binary-state" -> { "binary", "bytestring", "containers", "mtl" }
	"binary-strict" -> { "array", "bytestring", "containers", "mtl" }
	"binarydefer" -> {  }
	"bind-marshal" -> { "bytestring", "containers", "deepseq", "ghc-prim", "monads-tf", "mtl", "numeric-prelude", "random", "stm", "strict", "transformers", "type-level-tf", "unix" }
	"binding-core" -> { "stm" }
	"binding-gtk" -> { "binding-core", "gtk", "mtl" }
	"binding-wx" -> { "binding-core", "stm", "wx", "wxcore" }
	"bindings" -> {  }
	"bindings-DSL" -> {  }
	"bindings-EsounD" -> { "bindings-DSL", "bindings-audiofile" }
	"bindings-GLFW" -> { "bindings-DSL" }
	"bindings-K8055" -> {  }
	"bindings-apr" -> { "bindings-DSL" }
	"bindings-apr-util" -> { "bindings-DSL", "bindings-apr" }
	"bindings-audiofile" -> { "bindings-DSL" }
	"bindings-bfd" -> { "array", "containers", "unix" }
	"bindings-cctools" -> { "bindings-DSL" }
	"bindings-common" -> {  }
	"bindings-dc1394" -> { "bindings-DSL" }
	"bindings-directfb" -> { "bindings-DSL", "bindings-posix" }
	"bindings-eskit" -> { "array", "bindings-DSL" }
	"bindings-fann" -> { "bindings-DSL" }
	"bindings-glib" -> { "bindings-DSL" }
	"bindings-gobject" -> { "bindings-DSL", "bindings-glib" }
	"bindings-gpgme" -> { "bindings-DSL" }
	"bindings-gsl" -> { "bindings-DSL" }
	"bindings-gts" -> { "bindings-DSL", "bindings-glib" }
	"bindings-hdf5" -> { "bindings-DSL" }
	"bindings-levmar" -> { "bindings-DSL" }
	"bindings-libcddb" -> { "bindings-DSL" }
	"bindings-libffi" -> { "bindings-DSL" }
	"bindings-libftdi" -> { "bindings-DSL" }
	"bindings-librrd" -> { "bindings-DSL" }
	"bindings-libusb" -> { "bindings-DSL" }
	"bindings-libv4l2" -> { "bindings-DSL" }
	"bindings-libzip" -> { "bindings-DSL" }
	"bindings-linux-videodev2" -> { "bindings-DSL", "ioctl" }
	"bindings-mmap" -> { "bindings-posix" }
	"bindings-mpdecimal" -> { "bindings-DSL" }
	"bindings-nettle" -> { "bindings-DSL" }
	"bindings-parport" -> { "bindings-DSL" }
	"bindings-posix" -> { "bindings-DSL" }
	"bindings-ppdev" -> { "bindings-DSL", "ioctl" }
	"bindings-sane" -> { "bindings-DSL" }
	"bindings-sc3" -> { "bindings-DSL" }
	"bindings-sipc" -> { "bindings-sipc" }
	"bindings-sophia" -> { "bindings-DSL" }
	"bindings-sqlite3" -> { "bindings-DSL" }
	"bindings-svm" -> { "bindings-DSL" }
	"bindings-uname" -> {  }
	"bindings-yices" -> {  }
	"binembed" -> { "Cabal", "bytestring", "containers", "directory", "dlist", "filepath" }
	"binembed-example" -> { "binembed", "bytestring", "containers", "filepath" }
	"bio" -> { "QuickCheck", "array", "binary", "bytestring", "containers", "directory", "mtl", "old-time", "parallel", "parsec", "process", "random", "tagsoup" }
	"bioace" -> { "bioalign", "biocore", "bytestring", "parsec" }
	"bioalign" -> { "biocore", "bytestring" }
	"biocore" -> { "bytestring", "stringable" }
	"biofasta" -> { "biocore", "bytestring" }
	"biofastq" -> { "biocore", "bytestring" }
	"biophd" -> { "binary", "biocore", "bytestring", "old-locale", "parsec", "text", "time" }
	"biopsl" -> { "biocore", "bytestring", "cmdargs", "unordered-containers" }
	"biosff" -> { "array", "binary", "biocore", "bytestring", "cmdargs", "mtl" }
	"biostockholm" -> { "attoparsec", "attoparsec-conduit", "biocore", "blaze-builder", "blaze-builder-conduit", "bytestring", "conduit", "containers", "deepseq" }
	"bird" -> { "MissingH", "bytestring", "containers", "data-default", "hack", "hack-handler-happstack", "haskell98", "mtl", "parsec", "process", "rallod" }
	"bit-vector" -> { "vector" }
	"bitarray" -> { "array" }
	"bitcoin-rpc" -> { "HTTP", "aeson", "attoparsec", "bytestring", "cereal", "containers", "ghc-prim", "mtl", "network", "text", "unix", "unordered-containers", "watchdog" }
	"bitly-cli" -> { "Bitly", "directory", "filepath", "regexpr" }
	"bitmap" -> { "bytestring" }
	"bitmap-opengl" -> { "OpenGL", "bitmap" }
	"bitmaps" -> { "array", "binary", "bitmap", "bytestring", "cereal", "containers", "monad-state", "stb-image", "string-class", "tagged", "zlib" }
	"bits" -> { "bytes", "mtl", "transformers" }
	"bits-atomic" -> {  }
	"bits-conduit" -> { "bytestring", "conduit", "mtl" }
	"bits-extras" -> {  }
	"bitset" -> { "deepseq", "ghc-prim", "integer-gmp" }
	"bitspeak" -> { "bindings-DSL", "bindings-glib", "bindings-gobject" }
	"bitstream" -> { "base-unicode-symbols", "bytestring", "vector" }
	"bitstring" -> { "bytestring" }
	"bittorrent" -> { "BoundedChan", "HTTP", "IntervalMap", "SafeSemaphore", "aeson", "base16-bytestring", "base32-bytestring", "base64-bytestring", "bencoding", "binary", "binary-conduit", "bits-extras", "bytestring", "cereal", "cereal-conduit", "conduit", "containers", "cryptohash", "data-default", "deepseq", "directory", "entropy", "filepath", "hashable", "intset", "krpc", "lens", "mmap", "mtl", "network", "network-conduit", "old-locale", "pretty", "pretty-class", "resourcet", "split", "stm", "text", "time", "transformers", "unordered-containers", "urlencoded", "vector" }
	"bitvec" -> { "primitive", "vector" }
	"bitwise" -> { "array", "bytestring" }
	"bk-tree" -> { "containers" }
	"bkr" -> { "HDBC", "HDBC-sqlite3", "MissingH", "aws", "bytestring", "directory", "filepath", "haskell98", "hslogger", "http-conduit", "pureMD5", "random", "strict", "text", "unix", "utf8-string" }
	"bktrees" -> { "array", "containers" }
	"bla" -> { "haskell98", "unix" }
	"black-jewel" -> { "HTTP", "ansi-terminal", "bytestring", "directory", "download", "haskeline", "hxt", "network", "process", "safe", "tagsoup", "transformers", "zlib" }
	"blakesum" -> { "bytestring", "text", "vector" }
	"blakesum-demo" -> { "blakesum", "bytestring", "haskell98", "text", "vector" }
	"blank-canvas" -> { "aeson", "containers", "http-types", "network", "scotty", "stm", "text", "transformers", "wai", "wai-extra", "warp" }
	"blas" -> { "QuickCheck", "ieee", "storable-complex" }
	"blastxml" -> { "biocore", "bytestring", "parallel", "tagsoup" }
	"blaze" -> { "blaze-html", "blaze-markup" }
	"blaze-builder" -> { "bytestring", "text" }
	"blaze-builder-conduit" -> { "conduit" }
	"blaze-builder-enumerator" -> { "blaze-builder", "bytestring", "enumerator", "transformers" }
	"blaze-from-html" -> { "containers", "directory", "filepath", "tagsoup" }
	"blaze-html" -> { "blaze-builder", "blaze-markup", "bytestring", "text" }
	"blaze-html-contrib" -> { "blaze-html", "cgi", "data-default", "network", "safe", "text" }
	"blaze-html-hexpat" -> { "blaze-html", "bytestring", "hexpat", "text" }
	"blaze-html-truncate" -> { "blaze-markup", "bytestring", "html-truncate", "tagsoup", "text" }
	"blaze-markup" -> { "blaze-builder", "bytestring", "text" }
	"blaze-svg" -> { "blaze-markup", "mtl" }
	"blaze-textual" -> { "blaze-builder", "bytestring", "ghc-prim", "old-locale", "text", "time", "vector" }
	"blaze-textual-native" -> { "blaze-builder", "bytestring", "ghc-prim", "old-locale", "text", "time", "vector" }
	"blink1" -> { "bindings-libusb", "bytestring", "text", "unix", "usb", "vector" }
	"blip" -> { "bliplib", "bytestring", "containers", "filepath", "language-python", "mtl", "old-time", "parseargs", "pretty" }
	"bliplib" -> { "binary", "bytestring", "containers", "mtl", "pretty", "utf8-string" }
	"blocking-transactions" -> { "containers", "parallel" }
	"blogination" -> { "ConfigFile", "directory", "feed", "filepath", "haskell98", "higherorder", "highlighting-kate", "mtl", "old-locale", "old-time", "pandoc", "regex-compat", "time", "utf8-string", "xhtml", "xml" }
	"bloomfilter" -> { "array", "bytestring", "deepseq" }
	"bloxorz" -> { "GLFW", "OpenGL" }
	"bluetile" -> { "ConfigFile", "X11", "X11-xft", "containers", "directory", "filepath", "glade", "gtk", "mtl", "process", "random", "regex-compat", "unix", "utf8-string", "xmonad", "xmonad-contrib" }
	"bluetileutils" -> { "gtk" }
	"bmp" -> { "binary", "bytestring" }
	"board-games" -> { "array", "cgi", "containers", "html", "httpd-shed", "network", "random", "transformers", "utility-ht" }
	"bogre-banana" -> { "hogre", "hois", "monad-control", "random", "reactive-banana" }
	"bool-extras" -> {  }
	"boolexpr" -> { "parsec" }
	"bools" -> {  }
	"boolsimplifier" -> { "containers" }
	"boomerang" -> { "mtl", "template-haskell", "text" }
	"boomslang" -> { "GLFW-b", "MonadRandom", "OpenGL", "containers", "data-accessor", "data-accessor-template", "font-opengl-basic4x6", "mtl", "template-haskell" }
	"bot" -> { "Stream", "arrows" }
	"botpp" -> { "bytestring" }
	"bound" -> { "bifunctors", "binary", "bytes", "cereal", "comonad", "hashable", "hashable-extras", "prelude-extras", "profunctors", "transformers" }
	"bounded-tchan" -> { "stm" }
	"boundingboxes" -> { "lens", "linear" }
	"boxes" -> { "split" }
	"bpann" -> { "random", "split" }
	"brainfuck" -> { "array", "mtl", "unix" }
	"breakout" -> { "SDL", "haskgame", "mtl" }
	"brians-brain" -> { "SDL", "array", "parallel", "random" }
	"brillig" -> { "ListZipper", "binary", "brillig", "cmdargs", "containers", "directory", "filepath", "text" }
	"bsd-sysctl" -> {  }
	"bson" -> { "binary", "bytestring", "cryptohash", "data-binary-ieee754", "mtl", "network", "text", "time" }
	"bson-generic" -> { "bson", "ghc-prim", "text" }
	"bson-generics" -> { "bson", "ghc-prim" }
	"bson-mapping" -> { "bson", "compact-string-fix", "template-haskell", "th-lift" }
	"btree-concurrent" -> { "array", "base64-bytestring", "bytestring", "cereal", "containers", "directory", "filepath", "hashable", "mtl", "random", "snappy", "stm", "time" }
	"bugzilla" -> { "aeson", "blaze-builder", "bugzilla", "bytestring", "connection", "containers", "data-default", "http-conduit", "http-types", "iso8601-time", "resourcet", "text", "time", "transformers", "unordered-containers", "vector" }
	"buildbox" -> { "bytestring", "containers", "directory", "mtl", "old-locale", "pretty", "process", "random", "stm", "time" }
	"buildbox-tools" -> { "buildbox", "parseargs" }
	"buildwrapper" -> { "Cabal", "aeson", "attoparsec", "buildwrapper", "bytestring", "cmdargs", "containers", "cpphs", "deepseq", "directory", "filepath", "ghc", "ghc-paths", "haskell-src-exts", "mtl", "old-time", "process", "regex-tdfa", "syb", "text", "transformers", "unordered-containers", "utf8-string", "vector" }
	"bullet" -> { "vect" }
	"bumper" -> { "Cabal", "containers", "fclabels", "process", "regex-compat", "split", "strict" }
	"burst-detection" -> { "deepseq" }
	"buster" -> { "binary", "bytestring", "containers", "dataenc", "mtl", "old-locale", "parsec", "pretty", "time" }
	"buster-gtk" -> { "binary", "buster", "bytestring", "containers", "dataenc", "gtk", "mtl", "old-locale", "parsec", "pretty", "time" }
	"buster-network" -> { "HTTP", "binary", "buster", "bytestring", "containers", "dataenc", "haxr", "mtl", "network", "old-locale", "pretty", "time" }
	"bustle" -> { "bytestring", "cairo", "containers", "dbus", "directory", "filepath", "glib", "gtk", "hgettext", "mtl", "pango", "parsec", "pcap", "process", "setlocale", "text", "time" }
	"bv" -> {  }
	"byteable" -> { "bytestring" }
	"bytedump" -> { "bytestring" }
	"byteorder" -> {  }
	"bytes" -> { "binary", "bytestring", "cereal", "containers", "ghc-prim", "mtl", "text", "time", "transformers", "transformers-compat", "void" }
	"bytestring" -> { "deepseq", "ghc-prim" }
	"bytestring-arbitrary" -> { "QuickCheck", "bytestring", "cryptohash" }
	"bytestring-builder" -> { "bytestring", "deepseq" }
	"bytestring-class" -> { "bytestring", "utf8-string" }
	"bytestring-csv" -> { "array", "bytestring", "dlist" }
	"bytestring-delta" -> { "bytestring" }
	"bytestring-from" -> { "attoparsec", "bytestring", "text" }
	"bytestring-handle" -> { "bytestring" }
	"bytestring-lexing" -> { "array", "bytestring" }
	"bytestring-mmap" -> { "bytestring", "unix" }
	"bytestring-nums" -> { "bytestring", "containers" }
	"bytestring-plain" -> { "bytestring", "deepseq", "ghc-prim", "hashable" }
	"bytestring-progress" -> { "bytestring", "terminal-progress-bar", "time" }
	"bytestring-rematch" -> { "bytestring" }
	"bytestring-show" -> { "array", "binary", "bytestring", "containers" }
	"bytestring-trie" -> { "binary", "bytestring" }
	"bytestringparser" -> {  }
	"bytestringparser-temporary" -> {  }
	"bytestringreadp" -> { "bytestring" }
	"bzlib" -> { "bytestring" }
	"bzlib-conduit" -> { "bindings-DSL", "bytestring", "conduit", "data-default", "mtl", "resourcet" }
	"c-dsl" -> { "language-c" }
	"c-io" -> {  }
	"c-storable-deriving" -> { "ghc-prim" }
	"c0check" -> { "c0parser" }
	"c0parser" -> { "parsec" }
	"c10k" -> { "network", "unix" }
	"c2hs" -> { "array", "containers", "directory", "filepath", "language-c", "pretty", "process" }
	"c2hsc" -> { "HStringTemplate", "cmdargs", "containers", "directory", "filepath", "language-c", "mtl", "pretty", "split", "transformers" }
	"cab" -> { "Cabal", "attoparsec", "attoparsec-conduit", "bytestring", "cab", "conduit", "containers", "directory", "filepath", "process", "process-conduit", "unix" }
	"cabal-audit" -> { "Cabal", "HTTP", "directory", "filepath", "optparse-applicative" }
	"cabal-bounds" -> { "Cabal", "cabal-bounds", "cmdargs", "either", "lens", "strict", "transformers", "unordered-containers" }
	"cabal-cargs" -> { "Cabal", "cabal-cargs", "cmdargs", "directory", "either", "lens", "strict", "system-fileio", "system-filepath", "text", "transformers", "unordered-containers" }
	"cabal-constraints" -> { "Cabal", "optparse-applicative" }
	"cabal-db" -> { "Cabal", "ansi-wl-pprint", "bytestring", "containers", "directory", "filepath", "mtl", "optparse-applicative", "pretty", "process", "tar", "utf8-string" }
	"cabal-debian" -> { "Cabal", "Diff", "HUnit", "Unixutils", "containers", "data-lens", "data-lens-template", "debian", "deepseq", "directory", "filepath", "hsemail", "mtl", "parsec", "process", "pureMD5", "regex-tdfa", "set-extra", "syb", "text", "unix", "utf8-string" }
	"cabal-dev" -> { "Cabal", "HTTP", "bytestring", "directory", "filepath", "mtl", "network", "pretty", "process", "setenv", "tar", "template-haskell", "transformers", "zlib" }
	"cabal-dir" -> { "Cabal", "directory", "filepath" }
	"cabal-file-th" -> { "Cabal", "directory", "template-haskell" }
	"cabal-ghci" -> { "Cabal", "directory", "filepath", "process" }
	"cabal-graphdeps" -> { "containers", "directory", "options", "parsec", "process", "split", "temporary" }
	"cabal-install" -> { "Cabal", "HTTP", "array", "bytestring", "containers", "directory", "filepath", "mtl", "network", "pretty", "process", "random", "stm", "time", "unix", "zlib" }
	"cabal-install-bundle" -> { "Cabal", "array", "bytestring", "containers", "directory", "filepath", "old-time", "pretty", "process", "time", "unix" }
	"cabal-install-ghc72" -> { "Cabal", "HTTP", "array", "containers", "directory", "filepath", "network", "old-time", "pretty", "process", "random", "time", "unix", "zlib" }
	"cabal-install-ghc74" -> { "Cabal", "HTTP", "array", "containers", "directory", "filepath", "network", "old-time", "pretty", "process", "random", "time", "unix", "zlib" }
	"cabal-macosx" -> { "Cabal", "directory", "fgl", "filepath", "parsec", "process", "text" }
	"cabal-meta" -> { "shelly", "system-fileio", "system-filepath", "text" }
	"cabal-nirvana" -> { "HTTP", "bytestring", "containers", "directory", "process", "tar" }
	"cabal-progdeps" -> { "Cabal", "directory", "filepath" }
	"cabal-query" -> { "Cabal", "MissingH", "bytestring", "derive", "ghc", "mtl", "tar", "template-haskell", "uniplate" }
	"cabal-rpm" -> { "Cabal", "directory", "filepath", "old-locale", "process", "regex-compat", "time", "unix" }
	"cabal-scripts" -> {  }
	"cabal-setup" -> { "Cabal" }
	"cabal-sign" -> { "bytestring", "cereal", "directory", "filepath", "process", "tar", "zlib" }
	"cabal-sort" -> { "Cabal", "bytestring", "containers", "directory", "explicit-exception", "fgl", "filepath", "process", "transformers", "utility-ht" }
	"cabal-src" -> { "bytestring", "conduit", "conduit-extra", "containers", "directory", "filepath", "http-conduit", "http-types", "network", "process", "resourcet", "shelly", "system-fileio", "system-filepath", "tar", "text", "transformers", "zlib-conduit" }
	"cabal-test" -> { "Cabal", "QuickCheck", "filepath", "ghc", "pqc" }
	"cabal-test-quickcheck" -> { "Cabal", "QuickCheck" }
	"cabal-uninstall" -> { "directory", "filepath", "mtl", "process" }
	"cabal-upload" -> { "HTTP", "filepath", "network" }
	"cabal2arch" -> { "Cabal", "archlinux", "bytestring", "cmdargs", "containers", "directory", "filepath", "mtl", "pretty", "process" }
	"cabal2doap" -> { "Cabal", "hsemail", "hxt", "parsec", "process" }
	"cabal2ebuild" -> { "Cabal", "cabal2ebuild", "curl", "directory", "filepath" }
	"cabal2ghci" -> { "Cabal", "cmdargs", "stylish-haskell", "system-fileio", "system-filepath", "text", "unordered-containers", "yaml" }
	"cabal2nix" -> { "Cabal", "HTTP", "containers", "directory", "filepath", "hackage-db", "mtl", "pretty", "process", "regex-posix" }
	"cabal2spec" -> { "Cabal", "Unixutils", "bytestring", "directory", "filepath", "haskell98", "old-locale", "process", "tar", "time", "unix", "zlib" }
	"cabalg" -> { "directory", "filepath", "optparse-applicative", "process", "temporary" }
	"cabalgraph" -> { "Cabal", "bytestring", "containers", "directory", "filepath", "pretty", "process" }
	"cabalmdvrpm" -> { "Cabal", "cabalrpmdeps", "haskell98" }
	"cabalrpmdeps" -> { "Cabal", "filepath", "haskell98" }
	"cabalvchk" -> { "Cabal" }
	"caf" -> {  }
	"cairo" -> { "array", "bytestring", "mtl", "utf8-string" }
	"cairo-appbase" -> { "cairo", "glib", "gtk" }
	"cake" -> { "array", "binary", "bytestring", "cmdargs", "containers", "derive", "directory", "filepath", "mtl", "process", "pureMD5", "regex-tdfa", "split" }
	"cake3" -> { "attoparsec", "bytestring", "containers", "deepseq", "directory", "filepath", "haskell-src-meta", "language-javascript", "mime-types", "monadloc", "mtl", "optparse-applicative", "process", "syb", "system-filepath", "template-haskell", "text", "text-format" }
	"cakyrespa" -> { "GLUT", "gluturtle", "lojbanParser", "yjsvg", "yjtools" }
	"cal3d" -> {  }
	"cal3d-examples" -> { "OpenGL", "SDL", "cal3d", "cal3d-opengl" }
	"cal3d-opengl" -> { "OpenGL", "cal3d" }
	"calc" -> { "array", "harpy", "haskell98", "mtl" }
	"caldims" -> { "containers", "directory", "haskell98", "mtl", "parsec", "readline" }
	"caledon" -> { "containers", "cpphs", "lens", "mtl", "parsec", "transformers" }
	"camh" -> { "Imlib", "bytestring", "terminfo" }
	"campfire" -> { "aeson", "attoparsec", "bytestring", "containers", "filepath", "http-enumerator", "http-types", "mtl", "old-locale", "process", "text", "time", "transformers", "unordered-containers", "url" }
	"canonical-filepath" -> { "deepseq", "directory", "filepath" }
	"cantor" -> { "bytestring", "containers", "directory", "filepath", "gtk", "hxt", "hxt-xpath", "parsec" }
	"cap" -> { "array", "containers", "haskell98" }
	"capped-list" -> {  }
	"capri" -> { "Cabal", "directory", "filepath", "process" }
	"carboncopy" -> { "IfElse", "MissingH", "bytestring", "filepath", "haskell98" }
	"carettah" -> { "cairo", "directory", "filepath", "gtk", "hcwiid", "highlighting-kate", "mtl", "pandoc", "pango", "time" }
	"carray" -> { "array", "binary", "ix-shapable", "syb" }
	"casadi-bindings" -> { "vector" }
	"cascading" -> { "blaze-builder", "bytestring", "colour", "containers", "lens", "mtl", "text", "utf8-string", "web-routes" }
	"case-conversion" -> {  }
	"case-insensitive" -> { "bytestring", "deepseq", "hashable", "text" }
	"cash" -> { "HaXml", "deepseq", "haskell98", "network", "parallel", "pretty" }
	"cassandra-cql" -> { "Decimal", "MonadCatchIO-transformers", "bytestring", "cereal", "containers", "cryptohash", "mtl", "network", "stm", "text", "time", "uuid" }
	"cassandra-thrift" -> { "Thrift", "bytestring", "containers" }
	"cassava" -> { "array", "attoparsec", "blaze-builder", "bytestring", "containers", "deepseq", "text", "unordered-containers", "vector" }
	"cassette" -> {  }
	"cassy" -> { "Thrift", "aeson", "async", "attoparsec", "binary", "bytestring", "cassandra-thrift", "cereal", "conduit", "containers", "data-default", "errors", "lifted-base", "monad-control", "mtl", "network", "resource-pool", "retry", "safecopy", "stm", "syb", "text", "time", "transformers-base" }
	"castle" -> { "configurator", "containers", "errors", "lens", "optparse-applicative", "shelly", "system-fileio", "system-filepath", "text" }
	"casui" -> { "gtk", "haskell98", "mtl", "parsec" }
	"catch-fd" -> { "mtl", "transformers" }
	"categorical-algebra" -> { "newtype", "pointless-haskell", "void" }
	"categories" -> { "void" }
	"category-extras" -> { "adjunctions", "bifunctors", "categories", "comonad", "comonad-extras", "comonad-transformers", "comonads-fd", "contravariant", "distributive", "either", "free", "groupoids", "indexed", "indexed-extras", "invariant", "kan-extensions", "keys", "monad-products", "pointed", "profunctor-extras", "profunctors", "recursion-schemes", "reducers", "representable-functors", "representable-profunctors", "semigroupoid-extras", "semigroupoids", "semigroups", "void" }
	"cautious-file" -> { "bytestring", "directory", "filepath", "unix" }
	"cblrepo" -> { "Cabal", "Unixutils", "aeson", "ansi-wl-pprint", "bytestring", "directory", "filepath", "json", "mtl", "optparse-applicative", "process", "safe", "tar", "unix", "zlib" }
	"cci" -> { "bytestring" }
	"ccnx" -> { "bytestring" }
	"cctools-workqueue" -> { "bindings-cctools", "bytestring", "lens", "monad-loops", "unix" }
	"cedict" -> { "bytestring", "containers", "mtl", "parsec", "utf8-string" }
	"cellrenderer-cairo" -> { "cairo", "glib", "gtk", "mtl" }
	"cereal" -> { "array", "bytestring", "containers" }
	"cereal-conduit" -> { "bytestring", "cereal", "conduit", "transformers" }
	"cereal-derive" -> { "cereal", "ghc-prim" }
	"cereal-enumerator" -> { "bytestring", "cereal", "enumerator" }
	"cereal-ieee754" -> { "array", "cereal" }
	"cereal-plus" -> { "array", "bytestring", "cereal", "containers", "errors", "hashable", "hashtables", "layers", "mtl", "stm", "text", "time", "unordered-containers", "vector" }
	"cereal-vector" -> { "bytestring", "cereal", "vector" }
	"certificate" -> { "asn1-data", "bytestring", "containers", "crypto-pubkey-types", "cryptohash", "directory", "filepath", "mtl", "pem", "process", "time" }
	"cflp" -> { "HUnit", "MonadRandom", "containers", "control-monad-omega", "incremental-sat-solver", "level-monad", "logict", "mtl", "random", "stream-monad", "syb", "value-supply" }
	"cfopu" -> { "bytestring", "containers", "data-default", "dequeue", "mtl" }
	"cgen" -> { "containers", "directory", "filepath", "mtl", "parsec", "regex-posix", "safe", "template-haskell" }
	"cgi" -> { "MonadCatchIO-mtl", "containers", "mtl", "network", "old-locale", "old-time", "parsec", "xhtml" }
	"cgi-undecidable" -> { "cgi", "mtl" }
	"cgi-utils" -> { "cgi", "containers", "mtl", "random" }
	"chain-codes" -> { "JuicyPixels", "containers" }
	"chalkboard" -> { "Codec-Image-DevIL", "GLUT", "OpenGLRaw", "array", "binary", "bytestring", "containers", "data-reify", "directory", "process", "time" }
	"chalkboard-viewer" -> { "GLUT", "OpenGL", "array", "chalkboard", "time" }
	"chalmers-lava2000" -> { "array", "process", "random" }
	"chan-split" -> { "stm" }
	"change-monger" -> { "directory", "process" }
	"charade" -> { "QuickCheck", "configurator", "containers", "filepath", "heist", "lens", "random", "snap", "snap-core", "snap-server", "text", "xmlhtml" }
	"charset" -> { "array", "bytestring", "containers", "semigroups", "unordered-containers" }
	"charsetdetect" -> { "bytestring" }
	"chaselev-deque" -> { "abstract-deque", "array", "atomic-primops", "bits-atomic", "ghc-prim", "transformers", "vector" }
	"chatter" -> { "MonadRandom", "bytestring", "cereal", "chatter", "containers", "deepseq", "directory", "filepath", "fullstop", "ghc-prim", "mbox", "random-shuffle", "safe", "split", "text", "tokenize", "zlib" }
	"chatty" -> { "ansi-terminal", "directory", "mtl", "process", "random", "setenv", "template-haskell", "time", "transformers", "unix" }
	"cheapskate" -> { "blaze-html", "bytestring", "cheapskate", "containers", "data-default", "mtl", "syb", "text", "uniplate", "xss-sanitize" }
	"check-email" -> { "email-validate" }
	"check-pvp" -> { "Cabal", "containers", "explicit-exception", "filepath", "haskell-src-exts", "non-empty", "transformers", "utility-ht" }
	"checked" -> {  }
	"checkers" -> { "QuickCheck", "array", "random" }
	"chell" -> { "ansi-terminal", "bytestring", "options", "patience", "random", "template-haskell", "text", "transformers" }
	"chell-hunit" -> { "HUnit", "chell" }
	"chell-quickcheck" -> { "QuickCheck", "chell", "random" }
	"chesshs" -> { "array", "attoparsec", "bytestring", "containers" }
	"chp" -> { "containers", "deepseq", "extensible-exceptions", "pretty", "stm" }
	"chp-mtl" -> { "chp", "chp-plus", "mtl" }
	"chp-plus" -> { "HUnit", "QuickCheck", "chp", "containers", "deepseq", "extensible-exceptions", "pretty", "stm" }
	"chp-spec" -> { "TypeCompose", "containers", "deepseq", "mtl", "pretty" }
	"chp-transformers" -> { "chp", "chp-plus", "transformers" }
	"chronograph" -> { "deepseq", "ghc-prim", "thyme", "vector-space" }
	"chu2" -> { "bytestring", "data-default", "hack2", "hack2-handler-snap-server", "utf8-string" }
	"chuchu" -> { "abacate", "ansi-wl-pprint", "cmdargs", "lifted-base", "monad-control", "parsec", "text", "transformers" }
	"chunked-data" -> { "blaze-builder", "bytestring", "containers", "mono-traversable", "semigroups", "system-filepath", "text", "transformers", "vector" }
	"chunks" -> { "haskell98", "parsec", "template-haskell" }
	"cil" -> { "bytestring", "language-c" }
	"cinvoke" -> { "bytestring" }
	"cio" -> { "monad-stm", "mtl", "parallel-io", "stm" }
	"cipher-aes" -> { "byteable", "bytestring", "crypto-cipher-types", "securemem" }
	"cipher-aes128" -> { "bytestring", "cereal", "crypto-api", "tagged" }
	"cipher-blowfish" -> { "byteable", "bytestring", "crypto-cipher-types", "securemem", "vector" }
	"cipher-camellia" -> { "byteable", "bytestring", "crypto-cipher-types", "securemem", "vector" }
	"cipher-des" -> { "byteable", "bytestring", "crypto-cipher-types", "securemem" }
	"cipher-rc4" -> { "byteable", "bytestring", "crypto-cipher-types" }
	"cipher-rc5" -> { "split" }
	"circ" -> { "directory", "mtl" }
	"circle-packing" -> {  }
	"citation-resolve" -> { "aeson", "bytestring", "citeproc-hs", "containers", "curl", "data-default", "directory", "download-curl", "either", "lens", "mtl", "process", "safe", "text", "transformers", "yaml" }
	"citeproc-hs" -> { "HTTP", "bytestring", "containers", "directory", "filepath", "hexpat", "hs-bibutils", "json", "mtl", "network", "pandoc-types", "utf8-string" }
	"cityhash" -> { "bytestring", "largeword" }
	"cjk" -> { "attoparsec", "bytestring", "containers", "text", "text-icu" }
	"clafer" -> { "HUnit", "HaXml", "MaybeT", "QuickCheck", "array", "clafer", "cmdargs", "containers", "data-stringmap", "directory", "executable-path", "filepath", "glpk-hs", "json-builder", "mtl", "parsec", "process", "split", "string-conversions", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "test-framework-th", "transformers" }
	"claferIG" -> { "HUnit", "HaXml", "QuickCheck", "array", "clafer", "claferIG", "cmdargs", "containers", "data-stringmap", "directory", "executable-path", "filepath", "haskeline", "json-builder", "mtl", "parsec", "process", "string-conversions", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "test-framework-th", "transformers" }
	"claferwiki" -> { "MissingH", "SHA", "clafer", "containers", "directory", "gitit", "mtl", "network", "pandoc-types", "process", "split", "time", "transformers", "utf8-string" }
	"clash" -> { "containers", "data-accessor", "data-accessor-template", "directory", "filepath", "ghc", "haskell98", "pretty", "prettyclass", "template-haskell", "tfp", "th-lift", "time", "transformers", "utility-ht", "vhdl" }
	"clash-ghc" -> { "array", "bytestring", "clash-lib", "clash-prelude", "directory", "filepath", "ghc", "ghc-paths", "hashable", "haskeline", "lens", "mtl", "process", "text", "transformers", "unbound", "unix", "unordered-containers" }
	"clash-lib" -> { "ListLike", "aeson", "attoparsec", "bytestring", "concurrent-supply", "containers", "contravariant", "deepseq", "directory", "errors", "fgl", "filepath", "hashable", "lens", "mtl", "pretty", "process", "template-haskell", "text", "time", "transformers", "unbound", "unordered-containers", "uu-parsinglib", "wl-pprint-text" }
	"clash-prelude" -> { "data-default", "template-haskell", "th-lift" }
	"classify" -> { "containers", "mtl" }
	"classy-parallel" -> { "lifted-base", "monad-control", "parallel", "resourcet", "transformers" }
	"classy-prelude" -> { "basic-prelude", "bytestring", "chunked-data", "containers", "enclosed-exceptions", "ghc-prim", "hashable", "lifted-base", "mono-traversable", "old-locale", "semigroups", "stm", "system-filepath", "text", "time", "transformers", "unordered-containers", "vector", "vector-instances" }
	"classy-prelude-conduit" -> { "bytestring", "classy-prelude", "conduit", "conduit-combinators", "monad-control", "resourcet", "system-fileio", "transformers", "void" }
	"classy-prelude-yesod" -> { "aeson", "classy-prelude", "classy-prelude-conduit", "data-default", "http-conduit", "http-types", "persistent", "yesod", "yesod-newsfeed", "yesod-static" }
	"clay" -> { "mtl", "text" }
	"clckwrks" -> { "acid-state", "aeson", "attoparsec", "blaze-html", "bytestring", "cereal", "containers", "directory", "filepath", "happstack-authenticate", "happstack-hsp", "happstack-server", "happstack-server-tls", "hsp", "hsx-jmacro", "ixset", "jmacro", "mtl", "network", "old-locale", "process", "random", "reform", "reform-happstack", "reform-hsp", "safecopy", "stm", "tagsoup", "text", "time", "unordered-containers", "utf8-string", "uuid", "vector", "web-plugins", "web-routes", "web-routes-happstack", "web-routes-hsp", "web-routes-th", "xss-sanitize" }
	"clckwrks-cli" -> { "acid-state", "clckwrks", "haskeline", "mtl", "network", "parsec" }
	"clckwrks-dot-com" -> { "clckwrks", "clckwrks-plugin-bugs", "clckwrks-plugin-media", "clckwrks-plugin-page", "clckwrks-theme-clckwrks", "containers", "happstack-server", "hsp", "mtl", "network", "text", "web-plugins" }
	"clckwrks-plugin-bugs" -> { "acid-state", "attoparsec", "cereal", "clckwrks", "clckwrks-plugin-page", "containers", "directory", "filepath", "happstack-authenticate", "happstack-hsp", "happstack-server", "hsp", "ixset", "mtl", "network", "reform", "reform-happstack", "reform-hsp", "safecopy", "text", "time", "web-plugins", "web-routes", "web-routes-th" }
	"clckwrks-plugin-ircbot" -> { "acid-state", "attoparsec", "blaze-html", "bytestring", "clckwrks", "containers", "directory", "filepath", "happstack-hsp", "happstack-server", "hsp", "ircbot", "ixset", "mtl", "network", "reform", "reform-happstack", "reform-hsp", "safecopy", "text", "web-plugins", "web-routes", "web-routes-th" }
	"clckwrks-plugin-media" -> { "acid-state", "attoparsec", "blaze-html", "cereal", "clckwrks", "containers", "directory", "filepath", "gd", "happstack-server", "hsp", "ixset", "magic", "mtl", "reform", "reform-happstack", "reform-hsp", "safecopy", "text", "web-plugins", "web-routes", "web-routes-th" }
	"clckwrks-plugin-page" -> { "acid-state", "aeson", "attoparsec", "clckwrks", "containers", "directory", "filepath", "happstack-authenticate", "happstack-hsp", "happstack-server", "hsp", "ixset", "mtl", "old-locale", "random", "reform", "reform-happstack", "reform-hsp", "safecopy", "tagsoup", "template-haskell", "text", "time", "utf8-string", "uuid", "web-plugins", "web-routes", "web-routes-happstack", "web-routes-th" }
	"clckwrks-theme-bootstrap" -> { "clckwrks", "hsp", "text" }
	"clckwrks-theme-clckwrks" -> { "clckwrks", "containers", "hsp", "text" }
	"clckwrks-theme-geo-bootstrap" -> { "clckwrks", "hsp", "text" }
	"clean-home" -> { "HSH", "IfElse", "cmdargs", "containers", "directory" }
	"clevercss" -> { "containers", "mtl", "parsec" }
	"click-clack" -> { "GLFW", "Hipmunk", "MonadRandom", "OpenGL", "StateVar", "containers", "mtl", "random", "transformers" }
	"clientsession" -> { "base64-bytestring", "bytestring", "cereal", "cipher-aes", "cprng-aes", "crypto-api", "crypto-random", "directory", "entropy", "skein", "tagged" }
	"clifford" -> { "Chart", "Chart-cairo", "MemoTrie", "QuickCheck", "cereal", "clifford", "colour", "converge", "criterion", "data-default-class", "data-ordlist", "deepseq", "derive", "gnuplot", "hspec", "lens", "monoid-extras", "nats", "numeric-prelude", "permutation", "reflection", "semigroupoids", "stream-fusion", "tagged", "vector" }
	"clippard" -> { "process" }
	"clipper" -> {  }
	"clock" -> {  }
	"clocked" -> { "MonadCatchIO-transformers", "clock", "containers", "transformers" }
	"clogparse" -> { "attoparsec", "bytestring", "filepath", "text", "time", "timezone-olson", "timezone-series" }
	"closure" -> { "hashable", "unordered-containers" }
	"cloudfront-signer" -> { "RSA", "asn1-encoding", "asn1-types", "base64-bytestring", "bytestring", "crypto-pubkey-types", "old-locale", "time" }
	"cloudyfs" -> { "HFuse", "HTTP", "bytestring", "containers", "convertible", "datetime", "filepath", "regex-base", "regex-tdfa", "tagsoup", "timerep", "unix" }
	"cltw" -> { "curl", "mtl", "random", "tagsoup" }
	"clua" -> { "bytestring", "containers", "haskell98", "language-c", "pretty", "pretty-show" }
	"clustertools" -> { "QuickCheck", "bio", "bytestring", "containers", "regex-compat", "simpleargs" }
	"clutterhs" -> { "X11", "array", "cairo", "glib", "gtk", "haskell98", "mtl" }
	"cmaes" -> { "mtl", "process", "safe", "strict", "syb" }
	"cmath" -> {  }
	"cmathml3" -> { "Cabal", "array", "arrowapply-utils", "containers", "filepath", "hxt", "monads-tf", "parsec", "syb", "transformers", "url" }
	"cmdargs" -> { "filepath", "process", "template-haskell", "transformers" }
	"cmdargs-browser" -> { "bytestring", "cmdargs", "directory", "filepath", "http-types", "process", "text", "transformers", "wai", "wai-handler-launch" }
	"cmdlib" -> { "mtl", "split", "syb", "transformers" }
	"cmdtheline" -> { "containers", "directory", "filepath", "parsec", "pretty", "process", "transformers" }
	"cml" -> {  }
	"cmonad" -> { "array" }
	"cmu" -> { "array", "containers" }
	"cnc-spec-compiler" -> { "HUnit", "HaXml", "ansi-terminal", "array", "binary", "bytestring", "containers", "directory", "fgl", "filepath", "graphviz", "haxr", "hubigraph", "mtl", "parsec", "pretty", "prettyclass", "process", "split", "stringtable-atom", "unix", "zlib" }
	"cndict" -> { "bytestring", "cassava", "containers", "file-embed", "text", "vector" }
	"codec-libevent" -> { "QuickCheck", "array", "binary", "binary-strict", "bytestring", "containers", "parsec", "regex-compat" }
	"codec-mbox" -> { "bytestring" }
	"codemonitor" -> { "MissingH", "cairo", "containers", "directory", "filepath", "gtk", "haskell98", "hinotify", "process", "regex-posix", "time" }
	"codepad" -> { "curl", "mtl", "network", "tagsoup" }
	"codo-notation" -> { "comonad", "haskell-src-meta", "parsec", "template-haskell", "uniplate" }
	"cofunctor" -> {  }
	"cognimeta-utils" -> { "QuickCheck", "array", "bytestring", "cognimeta-utils", "collections-api", "comonad-transformers", "containers", "data-lens", "data-lens-fd", "data-lens-template", "deepseq", "ghc-prim", "mtl", "primitive", "stm", "tagged", "template-haskell", "transformers" }
	"colada" -> { "ListZipper", "bytestring", "cereal", "cmdargs", "containers", "fclabels", "ghc-prim", "monad-atom", "mtl", "split", "swift-lda", "text", "vector" }
	"collada-output" -> { "SVGPath", "collada-types", "containers", "time", "vector", "xml" }
	"collada-types" -> { "OpenGL", "containers", "enumerable", "tuple", "tuple-gen", "vector" }
	"collections" -> { "QuickCheck", "array", "bytestring", "containers" }
	"collections-api" -> { "QuickCheck", "array" }
	"collections-base-instances" -> { "array", "bytestring", "collections-api", "containers" }
	"colock" -> { "unix" }
	"colorize-haskell" -> { "ansi-terminal", "haskell-lexer" }
	"colors" -> { "profunctors" }
	"colour" -> {  }
	"coltrane" -> { "HTTP", "HUnit", "bytestring", "http-types", "mtl", "regex-compat", "text", "wai", "wai-extra", "warp" }
	"com" -> {  }
	"combinat" -> { "array", "containers", "random", "transformers" }
	"combinator-interactive" -> { "bytestring", "cereal", "combinator-interactive", "containers", "directory", "lens", "mtl", "template-haskell", "th-lift", "trifecta", "void" }
	"combinatorial-problems" -> { "array", "bytestring", "bytestring-lexing", "containers", "parsec", "random" }
	"combinatorics" -> {  }
	"combobuffer" -> { "containers", "template-haskell", "vector", "vector-space" }
	"command" -> { "deepseq", "process" }
	"command-qq" -> { "process", "template-haskell", "text" }
	"commodities" -> { "PSQueue", "comonad", "containers", "distributive", "keys", "lens", "linear", "mtl", "numbers", "semigroupoids", "semigroups", "text", "thyme", "transformers" }
	"commsec" -> { "bytestring", "cipher-aes128", "crypto-api", "network" }
	"commsec-keyexchange" -> { "DRBG", "RSA", "bytestring", "cereal", "cipher-aes128", "commsec", "crypto-api", "crypto-pubkey-types", "cryptohash-cryptoapi", "monadcryptorandom", "network" }
	"comonad" -> { "containers", "contravariant", "distributive", "mtl", "semigroups", "tagged", "transformers" }
	"comonad-extras" -> { "array", "comonad", "containers", "distributive", "semigroupoids", "transformers" }
	"comonad-random" -> { "category-extras", "random" }
	"comonad-transformers" -> { "comonad" }
	"comonads-fd" -> { "comonad" }
	"compact-map" -> { "array", "binary", "bytestring", "containers" }
	"compact-string" -> { "bytestring" }
	"compact-string-fix" -> { "bytestring" }
	"compdata" -> { "QuickCheck", "containers", "deepseq", "derive", "mtl", "template-haskell", "th-expand-syns", "transformers" }
	"compensated" -> { "bifunctors", "binary", "bytes", "cereal", "comonad", "deepseq", "distributive", "generic-deriving", "hashable", "lens", "log-domain", "safecopy", "semigroupoids", "semigroups", "vector" }
	"compilation" -> { "MissingH" }
	"complex-generic" -> { "template-haskell" }
	"complex-integrate" -> {  }
	"complexity" -> { "Chart", "colour", "data-accessor", "hstats", "parallel", "pretty", "time", "transformers" }
	"compose-trans" -> { "mtl" }
	"composition" -> {  }
	"compressed" -> { "comonad", "containers", "fingertree", "hashable", "keys", "pointed", "reducers", "semigroupoids", "semigroups", "unordered-containers" }
	"compression" -> { "mtl" }
	"computational-algebra" -> { "algebra", "containers", "equational-reasoning", "heaps", "lens", "monad-loops", "peggy", "singletons", "sized-vector", "tagged", "type-natural" }
	"concatenative" -> { "template-haskell" }
	"concorde" -> { "containers", "process", "safe", "temporary" }
	"concraft" -> { "aeson", "array", "binary", "bytestring", "cmdargs", "comonad", "containers", "crf-chain1-constrained", "crf-chain2-tiers", "data-lens", "lazy-io", "monad-codec", "monad-ox", "sgd", "tagset-positional", "temporary", "text", "text-binary", "transformers", "vector", "vector-binary", "zlib" }
	"concraft-pl" -> { "aeson", "binary", "bytestring", "cmdargs", "concraft", "containers", "lazy-io", "mtl", "network", "process", "sgd", "split", "tagset-positional", "text", "transformers" }
	"concrete-relaxng-parser" -> { "cmdargs", "containers", "hxt", "hxt-charproperties", "hxt-curl", "hxt-relaxng", "hxt-tagsoup" }
	"concrete-typerep" -> { "binary", "hashable" }
	"concurrent-barrier" -> {  }
	"concurrent-dns-cache" -> { "array", "async", "bytestring", "containers", "dns", "hashable", "iproute", "network", "stm", "time" }
	"concurrent-extra" -> { "base-unicode-symbols", "stm", "unbounded-delays" }
	"concurrent-sa" -> { "MonadRandom" }
	"concurrent-split" -> {  }
	"concurrent-state" -> { "exceptions", "mtl", "stm", "transformers" }
	"concurrent-supply" -> { "ghc-prim", "hashable" }
	"concurrentoutput" -> {  }
	"cond" -> {  }
	"condor" -> { "binary", "containers", "directory", "filepath", "glider-nlp", "text" }
	"condorcet" -> { "array" }
	"conductive-base" -> { "array", "containers", "random", "stm", "time" }
	"conductive-clock" -> {  }
	"conductive-hsc3" -> { "conductive-base", "conductive-song", "containers", "directory", "filepath", "hosc", "hsc3", "random" }
	"conductive-song" -> { "conductive-base", "random" }
	"conduit" -> { "bytestring", "containers", "directory", "exceptions", "lifted-base", "mmorph", "monad-control", "mtl", "resourcet", "text", "text-stream-decode", "transformers", "transformers-base", "void" }
	"conduit-combinators" -> { "base16-bytestring", "base64-bytestring", "bytestring", "chunked-data", "conduit", "conduit-extra", "monad-control", "mono-traversable", "mwc-random", "primitive", "resourcet", "system-fileio", "system-filepath", "text", "transformers", "transformers-base", "unix", "unix-compat", "vector", "void" }
	"conduit-extra" -> { "attoparsec", "blaze-builder", "bytestring", "conduit", "directory", "filepath", "monad-control", "network", "primitive", "resourcet", "streaming-commons", "text", "transformers", "transformers-base" }
	"conduit-network-stream" -> { "bytestring", "conduit", "mtl", "network-conduit", "resourcet" }
	"conduit-resumablesink" -> { "conduit", "void" }
	"conf" -> { "haskell-src" }
	"config-select" -> { "directory", "filepath", "unix", "vty-menu" }
	"configuration" -> { "containers" }
	"configurator" -> { "attoparsec", "bytestring", "directory", "hashable", "text", "unix-compat", "unordered-containers" }
	"confsolve" -> { "attoparsec", "cmdargs", "process", "system-fileio", "system-filepath", "text", "time", "unordered-containers" }
	"conjugateGradient" -> { "containers", "random" }
	"conjure" -> { "HTTP", "array", "bytestring", "containers", "filepath", "html", "mtl", "network", "old-time", "parsec", "pretty", "random", "stm", "unix" }
	"connection" -> { "bytestring", "containers", "cprng-aes", "data-default-class", "network", "socks", "tls", "x509", "x509-store", "x509-system", "x509-validation" }
	"console-program" -> { "ansi-terminal", "ansi-wl-pprint", "containers", "directory", "fez-conf", "haskeline", "parsec", "parsec-extra", "split", "transformers", "utility-ht" }
	"const-math-ghc-plugin" -> { "containers", "ghc" }
	"constrained-normal" -> {  }
	"constraints" -> { "ghc-prim", "newtype" }
	"constructible" -> { "arithmoi", "binary-search", "complex-generic" }
	"constructive-algebra" -> { "QuickCheck", "type-level" }
	"container-classes" -> {  }
	"containers" -> { "array", "deepseq" }
	"containers-benchmark" -> { "bytestring", "containers", "criterion", "deepseq", "ghc-prim", "random" }
	"containers-deepseq" -> { "containers", "deepseq" }
	"containers-unicode-symbols" -> { "base-unicode-symbols", "containers" }
	"continue" -> { "bifunctors", "monad-control", "mtl", "semigroupoids", "transformers", "transformers-base" }
	"continued-fractions" -> {  }
	"contravariant" -> { "tagged", "transformers", "transformers-compat" }
	"control-bool" -> {  }
	"control-event" -> { "containers", "stm", "time" }
	"control-monad-attempt" -> { "attempt", "transformers" }
	"control-monad-exception" -> { "failure", "monadloc", "transformers" }
	"control-monad-exception-monadsfd" -> { "control-monad-exception", "monads-fd", "transformers" }
	"control-monad-exception-monadstf" -> { "control-monad-exception", "monads-tf", "transformers" }
	"control-monad-exception-mtl" -> { "control-monad-exception", "mtl" }
	"control-monad-failure" -> { "failure", "transformers" }
	"control-monad-failure-mtl" -> { "failure", "mtl" }
	"control-monad-free" -> { "deepseq", "transformers" }
	"control-monad-loop" -> { "transformers", "transformers-base" }
	"control-monad-omega" -> {  }
	"control-monad-queue" -> {  }
	"control-timeout" -> { "containers", "stm", "time" }
	"contstuff" -> { "transformers" }
	"contstuff-monads-tf" -> { "contstuff", "monads-tf" }
	"contstuff-transformers" -> { "contstuff", "transformers" }
	"converge" -> {  }
	"convertible" -> { "bytestring", "containers", "mtl", "old-locale", "old-time", "text", "time" }
	"convertible-ascii" -> { "ascii", "base-unicode-symbols", "blaze-builder", "bytestring", "convertible-text", "failure", "text" }
	"convertible-text" -> { "attempt", "bytestring", "containers", "old-time", "template-haskell", "text", "time" }
	"cookbook" -> { "directory", "strict" }
	"cookie" -> { "blaze-builder", "bytestring", "data-default", "old-locale", "text", "time" }
	"coordinate" -> { "lens" }
	"copilot" -> { "copilot-c99", "copilot-cbmc", "copilot-core", "copilot-language", "copilot-libraries", "copilot-sbv", "directory", "random" }
	"copilot-c99" -> { "QuickCheck", "atom", "bytestring", "bytestring-csv", "containers", "copilot-core", "directory", "pretty", "process", "random", "text" }
	"copilot-cbmc" -> { "bytestring", "copilot-c99", "copilot-core", "copilot-sbv", "directory", "pretty", "process" }
	"copilot-core" -> { "containers", "dlist", "mtl", "pretty", "pretty-ncols", "random" }
	"copilot-language" -> { "array", "containers", "copilot-core", "data-reify", "mtl" }
	"copilot-libraries" -> { "array", "containers", "copilot-language", "mtl", "parsec" }
	"copilot-sbv" -> { "containers", "copilot-core", "filepath", "pretty", "sbv" }
	"copr" -> { "HsOpenSSL", "aeson", "bytestring", "containers", "http-streams", "io-streams", "semigroups", "text" }
	"core" -> { "bytestring", "parsec", "pretty" }
	"core-haskell" -> { "haskeline", "haskell-src-exts", "hint" }
	"corebot-bliki" -> { "aeson", "blaze-builder", "bytestring", "containers", "directory", "filepath", "filestore", "http-types", "monads-tf", "pandoc", "template-haskell", "text", "time", "yesod" }
	"coroutine-enumerator" -> { "enumerator", "monad-coroutine" }
	"coroutine-iteratee" -> { "iteratee", "monad-coroutine" }
	"coroutine-object" -> { "bytestring", "cereal", "containers", "either", "lens", "mtl", "safecopy", "transformers", "transformers-free", "uuid" }
	"couch-hs" -> { "aeson", "attoparsec", "bytestring", "hint", "random", "text", "transformers", "vector" }
	"couchdb-conduit" -> { "aeson", "attoparsec", "attoparsec-conduit", "blaze-builder", "bytestring", "conduit", "containers", "data-default", "http-conduit", "http-types", "lifted-base", "monad-control", "resourcet", "string-conversions", "syb", "text", "transformers", "unordered-containers", "vector" }
	"couchdb-enumerator" -> { "aeson", "attoparsec", "attoparsec-enumerator", "bytestring", "enumerator", "http-enumerator", "http-types", "lifted-base", "monad-control", "text", "transformers", "unordered-containers", "utf8-string" }
	"countable" -> {  }
	"courier" -> { "async", "bytestring", "cereal", "containers", "hslogger", "network", "stm", "text", "uuid" }
	"cpphs" -> { "directory", "old-locale", "old-time", "polyparse" }
	"cprng-aes" -> { "byteable", "bytestring", "cipher-aes", "crypto-random", "random" }
	"cprng-aes-effect" -> { "cprng-aes", "crypto-random", "crypto-random-effect", "extensible-effects" }
	"cpsa" -> { "array", "containers", "parallel" }
	"cpu" -> {  }
	"cpuid" -> { "data-accessor", "enumset" }
	"cpuperf" -> { "mtl", "process" }
	"cpython" -> { "bytestring", "text" }
	"cqrs" -> { "SafeSemaphore", "bytestring", "conduit", "containers", "cqrs-types", "deepseq", "pool-conduit", "random", "stm", "transformers" }
	"cqrs-example" -> { "aeson", "blaze-builder", "bytestring", "cereal", "conduit", "containers", "cqrs", "deepseq", "derive", "scotty", "stm", "text", "transformers", "wai-eventsource", "wai-middleware-static" }
	"cqrs-postgresql" -> { "bytestring", "bytestring-lexing", "conduit", "cqrs-types", "old-locale", "pool-conduit", "postgresql-libpq", "text", "time", "transformers" }
	"cqrs-sqlite3" -> { "bytestring", "conduit", "cqrs-types", "direct-sqlite", "pool-conduit", "text", "transformers" }
	"cqrs-test" -> { "HUnit", "bytestring", "conduit", "cqrs-types", "hspec", "pool-conduit", "stm", "transformers" }
	"cqrs-types" -> { "base16-bytestring", "base64-bytestring", "bytestring", "conduit", "deepseq", "derive", "random" }
	"cr" -> { "cmdargs", "directory", "process", "shelly", "text", "transformers", "unix" }
	"crack" -> {  }
	"craftwerk" -> { "colour", "mtl", "vector-space" }
	"craftwerk-cairo" -> { "cairo", "craftwerk", "mtl" }
	"craftwerk-gtk" -> { "cairo", "containers", "craftwerk", "craftwerk-cairo", "gtk", "mtl" }
	"crc16" -> { "bytestring" }
	"crc16-table" -> { "array" }
	"creatur" -> { "MonadRandom", "array", "bytestring", "cereal", "cond", "directory", "filepath", "gray-extended", "hdaemonize", "hmatrix", "mtl", "old-locale", "process", "random", "split", "time", "transformers", "unix", "zlib" }
	"crf-chain1" -> { "array", "binary", "containers", "data-lens", "logfloat", "monad-codec", "parallel", "random", "sgd", "vector", "vector-binary" }
	"crf-chain1-constrained" -> { "array", "binary", "containers", "data-lens", "logfloat", "monad-codec", "parallel", "random", "sgd", "vector", "vector-binary" }
	"crf-chain2-generic" -> { "array", "binary", "comonad-transformers", "containers", "data-lens", "logfloat", "monad-codec", "parallel", "sgd", "vector", "vector-binary" }
	"crf-chain2-tiers" -> { "array", "binary", "comonad", "containers", "data-lens", "logfloat", "monad-codec", "parallel", "sgd", "vector", "vector-binary" }
	"critbit" -> { "bytestring", "deepseq", "text", "vector" }
	"criterion" -> { "Glob", "aeson", "binary", "bytestring", "containers", "deepseq", "directory", "filepath", "ghc-prim", "hastache", "mtl", "mwc-random", "parsec", "statistics", "time", "transformers", "vector", "vector-algorithms" }
	"criterion-to-html" -> { "aeson", "blaze-html", "blaze-markup", "bytestring", "containers", "filepath" }
	"crockford" -> { "QuickCheck", "digits", "safe" }
	"crocodile" -> { "HUnit", "bmp", "bytestring", "deepseq", "ghc-prim", "heap", "mersenne-random-pure64", "mtl", "parallel" }
	"cron" -> { "attoparsec", "text", "time" }
	"cruncher-types" -> { "aeson", "bytestring", "containers", "text" }
	"crunghc" -> { "SHA", "bytestring", "directory", "filelock", "filepath", "process", "text", "time", "transformers", "unix" }
	"crypto-api" -> { "bytestring", "cereal", "entropy", "tagged", "transformers" }
	"crypto-api-tests" -> { "HUnit", "QuickCheck", "bytestring", "cereal", "crypto-api", "directory", "filepath", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"crypto-cipher-benchmarks" -> { "byteable", "bytestring", "criterion", "crypto-cipher-types", "mtl", "pretty", "securemem" }
	"crypto-cipher-tests" -> { "HUnit", "QuickCheck", "byteable", "bytestring", "crypto-cipher-types", "mtl", "securemem", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"crypto-cipher-types" -> { "byteable", "bytestring", "securemem" }
	"crypto-conduit" -> { "bytestring", "cereal", "conduit", "crypto-api", "transformers" }
	"crypto-numbers" -> { "bytestring", "crypto-random", "ghc-prim", "integer-gmp", "vector" }
	"crypto-pubkey" -> { "byteable", "bytestring", "crypto-numbers", "crypto-pubkey-types", "crypto-random", "cryptohash" }
	"crypto-pubkey-openssh" -> { "asn1-encoding", "asn1-types", "attoparsec", "base64-bytestring", "bytestring", "cereal", "crypto-pubkey-types", "pem" }
	"crypto-pubkey-types" -> { "asn1-types" }
	"crypto-random" -> { "bytestring", "securemem", "unix", "vector" }
	"crypto-random-api" -> { "bytestring", "entropy" }
	"crypto-random-effect" -> { "bytestring", "crypto-random", "extensible-effects", "securemem" }
	"crypto-totp" -> { "bytestring", "cereal", "containers", "cryptohash", "tagged", "unix" }
	"cryptocipher" -> { "cipher-aes", "cipher-blowfish", "cipher-camellia", "cipher-des", "cipher-rc4", "crypto-cipher-types" }
	"cryptohash" -> { "byteable", "bytestring", "ghc-prim" }
	"cryptohash-conduit" -> { "bytestring", "conduit", "conduit-extra", "cryptohash", "resourcet", "transformers" }
	"cryptohash-cryptoapi" -> { "bytestring", "cereal", "crypto-api", "cryptohash", "tagged" }
	"cryptsy-api" -> { "aeson", "bytestring", "deepseq", "either", "http-client", "http-client-tls", "old-locale", "pipes-attoparsec", "pipes-http", "text", "time", "transformers", "unordered-containers", "vector" }
	"crystalfontz" -> { "MaybeT", "crc16-table", "serialport" }
	"cse-ghc-plugin" -> { "ghc" }
	"csound-catalog" -> { "csound-expression", "transformers" }
	"csound-expression" -> { "Boolean", "csound-expression-opcodes", "csound-expression-typed", "data-default", "process" }
	"csound-expression-dynamic" -> { "Boolean", "array", "containers", "data-default", "data-fix", "data-fix-cse", "transformers", "wl-pprint" }
	"csound-expression-opcodes" -> { "csound-expression-dynamic", "csound-expression-typed", "transformers" }
	"csound-expression-typed" -> { "Boolean", "colour", "containers", "csound-expression-dynamic", "data-default", "ghc-prim", "stable-maps", "transformers", "wl-pprint" }
	"csp" -> { "containers", "mtl", "nondeterminism" }
	"cspmchecker" -> { "directory", "filepath", "haskeline", "libcspm", "mtl" }
	"css" -> { "mtl", "text" }
	"css-text" -> { "attoparsec", "text" }
	"csv" -> { "filepath", "parsec" }
	"csv-conduit" -> { "array", "attoparsec", "attoparsec-conduit", "blaze-builder", "bytestring", "conduit", "containers", "csv-conduit", "data-default", "directory", "mmorph", "monad-control", "mtl", "primitive", "text", "transformers", "unordered-containers", "vector" }
	"csv-enumerator" -> { "attoparsec", "attoparsec-enumerator", "bytestring", "containers", "directory", "enumerator", "safe", "transformers", "unix-compat" }
	"csv-nptools" -> { "aeson", "bytestring", "csv", "html", "tabular", "text", "txt-sushi", "vector" }
	"ctemplate" -> { "bytestring" }
	"ctrie" -> { "atomic-primops", "hashable", "primitive" }
	"cubical" -> { "BNFC", "array", "directory", "haskeline", "mtl", "transformers" }
	"cubicbezier" -> { "containers", "deepseq", "integration" }
	"cubicspline" -> { "hmatrix", "safe" }
	"cuboid" -> { "GLUT", "Yampa" }
	"cuda" -> { "bytestring" }
	"cufft" -> { "cuda" }
	"curl" -> { "bytestring" }
	"curl-aeson" -> { "aeson", "bytestring", "curl", "text" }
	"curlhs" -> { "bytestring", "time" }
	"currency" -> { "containers", "hashable", "iso3166-country-codes" }
	"current-locale" -> { "old-locale", "process" }
	"curry-base" -> { "containers", "directory", "filepath", "mtl", "old-time", "pretty", "syb" }
	"curry-frontend" -> { "containers", "curry-base", "filepath", "mtl", "old-time", "pretty", "syb" }
	"cursedcsv" -> { "bytestring", "csv-enumerator", "enumerator", "hscurses", "mtl", "natural-sort", "parseargs", "regex-tdfa", "safe", "unix" }
	"curves" -> { "HaXml", "JuicyPixels", "QuickCheck", "bytestring", "containers", "filepath" }
	"custom-prelude" -> { "basic-prelude", "monad-loops" }
	"cv-combinators" -> { "HOpenCV", "SDL", "allocated-processor", "graphics-drawingcombinators", "vector-space" }
	"cyclotomic" -> { "arithmoi", "containers" }
	"cypher" -> { "aeson", "attoparsec", "bytestring", "classy-parallel", "conduit", "http-conduit", "http-types", "resourcet", "text", "transformers", "transformers-base", "unordered-containers", "vector" }
	"d-bus" -> { "async", "attoparsec", "binary", "blaze-builder", "bytestring", "conduit", "containers", "data-binary-ieee754", "data-default", "free", "hslogger", "mtl", "network", "singletons", "stm", "template-haskell", "text", "transformers", "xml-conduit", "xml-picklers", "xml-types" }
	"d3js" -> { "mtl", "random", "text" }
	"daemonize-doublefork" -> { "directory", "unix" }
	"daemons" -> { "bytestring", "cereal", "containers", "daemons", "data-default", "directory", "filepath", "ghc-prim", "network", "pipes", "transformers", "unix" }
	"damnpacket" -> { "attoparsec", "bytestring", "containers", "deepseq", "text" }
	"dapi" -> { "containers", "explicit-exception", "multiarg", "old-locale", "parsec", "prednote", "rainbow", "text", "time", "transformers" }
	"darcs" -> { "HTTP", "array", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "hashed-storage", "haskeline", "html", "mmap", "mtl", "network", "old-time", "parsec", "process", "random", "regex-compat", "tar", "terminfo", "text", "unix", "utf8-string", "vector", "zlib" }
	"darcs-benchmark" -> { "HTTP", "SHA", "bytestring", "cmdargs", "containers", "datetime", "directory", "filepath", "hs-gchart", "html", "json", "mtl", "network", "old-locale", "process", "regex-posix", "split", "statistics", "strict", "tabular", "tar", "time", "utf8-string", "uvector", "zlib" }
	"darcs-beta" -> { "HTTP", "array", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "hashed-storage", "haskeline", "html", "mmap", "mtl", "network", "old-time", "parsec", "process", "random", "regex-compat", "tar", "terminfo", "text", "unix", "vector", "zlib" }
	"darcs-buildpackage" -> { "ConfigFile", "MissingH", "directory", "hslogger", "network", "parsec", "process", "regex-compat", "unix" }
	"darcs-cabalized" -> { "HUnit", "QuickCheck", "array", "bytestring", "containers", "directory", "html", "mtl", "old-time", "parsec", "process", "regex-compat", "unix" }
	"darcs-fastconvert" -> { "attoparsec", "bytestring", "cmdlib", "containers", "darcs", "datetime", "directory", "filepath", "hashed-storage", "mtl", "old-time", "utf8-string" }
	"darcs-graph" -> { "bytestring", "containers", "directory", "old-locale", "old-time", "process", "time" }
	"darcs-monitor" -> { "HaXml", "containers", "directory", "mtl", "process" }
	"darcs-scripts" -> {  }
	"darcs2dot" -> { "containers", "darcs", "graph-wrapper", "string-conversions" }
	"darcsden" -> { "CouchDB", "HUnit", "HsOpenSSL", "SHA", "aeson", "base64-string", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "containers", "darcs", "directory", "filepath", "harp", "hashed-storage", "highlighting-kate", "hsp", "http-conduit", "json", "mime-mail", "mtl", "old-locale", "old-time", "pandoc", "pcre-light", "process", "pureMD5", "random", "redis", "safe", "snap-core", "snap-server", "split", "ssh", "system-uuid", "text", "time", "utf8-string", "webdriver", "xhtml", "xml" }
	"darcswatch" -> { "Crypto", "HTTP", "bytestring", "cgi", "concurrentoutput", "containers", "directory", "filepath", "mime-string", "mtl", "nano-md5", "network", "old-locale", "old-time", "parsec", "process", "regex-compat", "safe", "time", "unix", "xhtml", "zlib" }
	"data-accessor" -> { "array", "containers", "transformers" }
	"data-accessor-monadLib" -> { "data-accessor", "monadLib" }
	"data-accessor-monads-fd" -> { "data-accessor", "monads-fd", "transformers" }
	"data-accessor-monads-tf" -> { "data-accessor", "monads-tf", "transformers" }
	"data-accessor-mtl" -> { "data-accessor", "mtl" }
	"data-accessor-template" -> { "data-accessor", "template-haskell", "utility-ht" }
	"data-accessor-transformers" -> { "data-accessor", "transformers" }
	"data-aviary" -> {  }
	"data-binary-ieee754" -> { "binary" }
	"data-category" -> {  }
	"data-checked" -> { "deepseq" }
	"data-clist" -> { "QuickCheck", "deepseq" }
	"data-cycle" -> { "collections-api", "collections-base-instances" }
	"data-default" -> { "data-default-class", "data-default-instances-base", "data-default-instances-containers", "data-default-instances-dlist", "data-default-instances-old-locale" }
	"data-default-class" -> {  }
	"data-default-generics" -> { "bytestring", "containers", "dlist", "ghc-prim", "old-locale", "text", "time", "unordered-containers", "vector" }
	"data-default-instances-base" -> { "data-default-class" }
	"data-default-instances-containers" -> { "containers", "data-default-class" }
	"data-default-instances-dlist" -> { "data-default-class", "dlist" }
	"data-default-instances-old-locale" -> { "data-default-class", "old-locale" }
	"data-dword" -> { "ghc-prim", "hashable", "template-haskell" }
	"data-endian" -> {  }
	"data-extra" -> { "mtl", "old-locale", "text", "time" }
	"data-fin" -> { "QuickCheck", "lazysmallcheck", "prelude-safeenum", "reflection", "smallcheck", "tagged" }
	"data-fix" -> {  }
	"data-fix-cse" -> { "containers", "data-fix", "transformers" }
	"data-flags" -> { "template-haskell" }
	"data-fresh" -> { "free", "transformers" }
	"data-hash" -> { "array", "containers" }
	"data-interval" -> { "deepseq", "hashable", "lattices" }
	"data-inttrie" -> {  }
	"data-ivar" -> { "containers" }
	"data-layout" -> { "bytestring", "vector" }
	"data-lens" -> { "comonad", "containers", "semigroupoids", "transformers" }
	"data-lens-fd" -> { "comonad", "data-lens", "mtl", "transformers" }
	"data-lens-ixset" -> { "data-lens", "ixset" }
	"data-lens-template" -> { "data-lens", "template-haskell" }
	"data-list-sequences" -> {  }
	"data-memocombinators" -> { "array", "data-inttrie" }
	"data-named" -> { "attoparsec", "binary", "containers", "text" }
	"data-nat" -> { "semigroups" }
	"data-object" -> { "bytestring", "failure", "text", "time" }
	"data-object-json" -> { "JSONb", "bytestring", "bytestring-trie", "convertible-text", "data-object", "failure", "text" }
	"data-object-yaml" -> { "bytestring", "conduit", "containers", "convertible-text", "data-object", "failure", "text", "transformers", "yaml" }
	"data-or" -> {  }
	"data-ordlist" -> {  }
	"data-partition" -> { "containers" }
	"data-pprint" -> { "deepseq", "mtl", "parallel", "pretty", "time" }
	"data-quotientref" -> {  }
	"data-ref" -> { "stm", "transformers" }
	"data-reify" -> { "containers" }
	"data-reify-cse" -> { "containers", "data-reify" }
	"data-rope" -> { "bytestring", "bytestring-mmap", "unix" }
	"data-size" -> { "bytestring", "containers", "deepseq", "text" }
	"data-spacepart" -> { "vector-space" }
	"data-store" -> { "cereal", "containers", "deepseq", "lens", "safecopy", "transformers" }
	"data-stringmap" -> { "binary", "containers", "deepseq" }
	"data-structure-inferrer" -> { "ansi-terminal", "array", "deepseq", "derive", "directory", "filepath", "language-c", "mtl", "random", "safe", "utility-ht" }
	"data-textual" -> { "bytestring", "parsers", "tagged", "text", "text-latin1", "text-printer" }
	"data-timeout" -> { "data-textual", "parsers", "tagged", "text-printer", "transformers-base" }
	"data-treify" -> { "containers", "ty" }
	"data-type" -> {  }
	"data-util" -> {  }
	"data-variant" -> { "safe" }
	"database-migrate" -> { "bytestring", "cmdargs", "containers", "directory", "either", "filepath", "lens", "postgresql-simple", "text", "time", "transformers" }
	"database-study" -> { "containers" }
	"dataenc" -> { "array", "containers" }
	"datalog" -> { "containers", "failure", "hashable", "text", "transformers", "unordered-containers", "vector" }
	"datapacker" -> { "MissingH", "directory", "filepath", "hslogger", "mtl", "process", "unix" }
	"date-cache" -> { "bytestring" }
	"dates" -> { "base-unicode-symbols", "parsec", "syb", "time" }
	"datetime" -> { "QuickCheck", "old-locale", "old-time", "time" }
	"dawg" -> { "binary", "containers", "mtl", "transformers", "vector", "vector-binary" }
	"dbf" -> { "binary", "bytestring", "monad-loops", "rwlock" }
	"dbjava" -> { "binary", "bytestring", "haskell98", "process", "uulib" }
	"dbmigrations" -> { "HDBC", "HDBC-postgresql", "HDBC-sqlite3", "HUnit", "bytestring", "configurator", "containers", "directory", "fgl", "filepath", "mtl", "process", "random", "template-haskell", "text", "time", "yaml-light" }
	"dbus" -> { "bytestring", "cereal", "containers", "libxml-sax", "network", "parsec", "random", "text", "transformers", "unix", "vector", "xml-types" }
	"dbus-client" -> { "containers", "dbus-core", "monads-tf", "text", "transformers" }
	"dbus-core" -> { "binary", "bytestring", "containers", "data-binary-ieee754", "libxml-sax", "network", "parsec", "text", "unix", "vector", "xml-types" }
	"dbus-qq" -> { "containers", "dbus", "parsec", "template-haskell" }
	"dbus-th" -> { "containers", "dbus", "syb", "template-haskell", "text" }
	"dclabel" -> { "bytestring", "cereal", "containers" }
	"dclabel-eci11" -> { "QuickCheck", "pretty" }
	"ddc-base" -> { "containers", "deepseq", "parsec", "transformers", "wl-pprint" }
	"ddc-build" -> { "containers", "ddc-base", "ddc-core", "ddc-core-eval", "ddc-core-flow", "ddc-core-llvm", "ddc-core-salt", "ddc-core-simpl", "ddc-core-tetra", "ddc-source-tetra", "deepseq", "directory", "filepath", "mtl", "process" }
	"ddc-code" -> { "filepath" }
	"ddc-core" -> { "array", "containers", "ddc-base", "deepseq", "directory", "mtl", "transformers" }
	"ddc-core-eval" -> { "array", "containers", "ddc-base", "ddc-core", "deepseq", "mtl", "transformers" }
	"ddc-core-flow" -> { "array", "containers", "ddc-base", "ddc-core", "ddc-core-salt", "ddc-core-simpl", "deepseq", "mtl", "transformers" }
	"ddc-core-llvm" -> { "array", "containers", "ddc-base", "ddc-core", "ddc-core-salt", "ddc-core-simpl", "mtl", "transformers" }
	"ddc-core-salt" -> { "array", "containers", "ddc-base", "ddc-core", "deepseq", "mtl", "transformers" }
	"ddc-core-simpl" -> { "array", "containers", "ddc-base", "ddc-core", "deepseq", "mtl", "transformers" }
	"ddc-core-tetra" -> { "array", "containers", "ddc-base", "ddc-core", "ddc-core-salt", "ddc-core-simpl", "deepseq", "mtl", "transformers" }
	"ddc-driver" -> { "containers", "ddc-base", "ddc-build", "ddc-core", "ddc-core-eval", "ddc-core-flow", "ddc-core-llvm", "ddc-core-salt", "ddc-core-simpl", "ddc-core-tetra", "ddc-interface", "ddc-source-tetra", "deepseq", "directory", "filepath", "mtl", "process", "transformers" }
	"ddc-interface" -> { "containers", "ddc-base", "directory" }
	"ddc-source-tetra" -> { "array", "containers", "ddc-base", "ddc-core", "ddc-core-salt", "ddc-core-tetra", "deepseq", "mtl", "transformers" }
	"ddc-tools" -> { "containers", "ddc-base", "ddc-build", "ddc-code", "ddc-core", "ddc-core-eval", "ddc-core-flow", "ddc-core-llvm", "ddc-core-salt", "ddc-core-simpl", "ddc-core-tetra", "ddc-driver", "ddc-interface", "ddc-source-tetra", "directory", "filepath", "haskeline", "mtl", "process", "transformers" }
	"ddc-war" -> { "buildbox", "containers", "directory", "filepath", "process", "random", "stm" }
	"ddci-core" -> { "containers", "ddc-base", "ddc-core", "ddc-core-eval", "ddc-core-simpl", "haskeline", "haskell-src-exts" }
	"dead-simple-json" -> { "containers", "parsec", "template-haskell", "transformers", "vector" }
	"debian" -> { "Cabal", "HUnit", "HaXml", "Unixutils", "bytestring", "bzlib", "containers", "directory", "filepath", "mtl", "network", "old-locale", "parsec", "pretty", "process", "process-listlike", "pureMD5", "regex-compat", "regex-tdfa", "text", "time", "unix", "utf8-string", "zlib" }
	"debian-binary" -> { "HSH", "directory", "filepath" }
	"debug-diff" -> { "groom", "process", "temporary" }
	"decepticons" -> { "comonad-transformers" }
	"decoder-conduit" -> { "binary", "bytestring", "conduit" }
	"dedukti" -> { "Stream", "bytestring", "containers", "directory", "filepath", "haskell-src-exts", "haskell-src-exts-qq", "hmk", "mtl", "parsec", "process", "stringtable-atom", "time", "unix", "wl-pprint" }
	"deepseq" -> { "array" }
	"deepseq-generics" -> { "deepseq", "ghc-prim" }
	"deepseq-th" -> { "deepseq", "template-haskell" }
	"deepzoom" -> { "directory", "filepath", "hsmagick" }
	"definitive-base" -> { "array", "bytestring", "clock", "containers", "deepseq", "primitive", "vector" }
	"definitive-graphics" -> { "JuicyPixels", "array", "binary", "bytestring", "containers", "cpu", "deepseq", "definitive-base", "definitive-parser", "mtl", "primitive", "stb-truetype", "transformers", "utf8-string", "vector", "zlib" }
	"definitive-parser" -> { "array", "bytestring", "containers", "cpu", "deepseq", "definitive-base", "primitive", "utf8-string", "vector" }
	"definitive-sound" -> { "alsa-core", "alsa-pcm", "array", "bytestring", "clock", "containers", "deepseq", "definitive-base", "primitive", "sample-frame", "storable-record", "vector" }
	"deka" -> { "bytestring" }
	"delaunay" -> { "AC-Vector", "hashable", "unordered-containers" }
	"delicious" -> { "bytestring", "curl", "feed", "json", "nano-md5", "xml" }
	"delimited-text" -> { "attoparsec", "binary", "bytestring", "bytestring-show" }
	"delta-h" -> { "binary", "bytestring", "containers", "monad-atom", "nlp-scores", "text" }
	"demarcate" -> { "free", "transformers" }
	"denominate" -> { "directory", "filepath" }
	"dependent-map" -> { "containers", "dependent-sum" }
	"dependent-sum" -> {  }
	"dependent-sum-template" -> { "dependent-sum", "template-haskell", "th-extras" }
	"depends" -> { "containers", "directory", "filepath", "process", "transformers", "yaml-config" }
	"dephd" -> { "bio", "bytestring", "cmdargs", "directory", "process", "regex-compat" }
	"dequeue" -> { "QuickCheck", "safe" }
	"derangement" -> { "fgl" }
	"derivation-trees" -> { "applicative-extras", "labeled-tree", "mtl" }
	"derive" -> { "bytestring", "containers", "directory", "filepath", "haskell-src-exts", "pretty", "process", "syb", "template-haskell", "transformers", "uniplate" }
	"derive-IG" -> { "instant-generics", "template-haskell" }
	"derive-gadt" -> { "containers", "haskell-src-exts", "haskell-src-meta", "pretty", "template-haskell" }
	"derive-trie" -> { "array", "containers", "template-haskell" }
	"derp" -> { "containers" }
	"derp-lib" -> { "derp" }
	"detrospector" -> { "binary", "bytestring", "cmdargs", "containers", "hashable", "mwc-random", "text", "unordered-containers", "zlib" }
	"deunicode" -> { "bytestring", "utf8-string" }
	"devil" -> { "aeson", "bytestring", "directory", "filepath", "hinotify", "process", "split", "text", "unix", "unordered-containers" }
	"dewdrop" -> { "bytestring", "containers", "elf", "hdis86", "syb" }
	"dfsbuild" -> { "ConfigFile", "HSH", "MissingH", "directory", "filepath", "hslogger", "network", "old-time", "parsec", "random", "regex-compat", "unix" }
	"dgs" -> { "HTTP", "mtl", "network", "split" }
	"dia-base" -> { "deepseq" }
	"dia-functions" -> { "containers", "data-pprint", "deepseq", "dia-base", "mtl", "xhtml" }
	"diagrams" -> { "diagrams-contrib", "diagrams-core", "diagrams-lib", "diagrams-svg" }
	"diagrams-builder" -> { "cmdargs", "diagrams-lib", "directory", "exceptions", "filepath", "hashable", "haskell-src-exts", "hint", "lens", "mtl", "split", "transformers" }
	"diagrams-cairo" -> { "JuicyPixels", "bytestring", "cairo", "colour", "containers", "data-default-class", "diagrams-core", "diagrams-lib", "directory", "filepath", "ghc-prim", "hashable", "lens", "mtl", "old-time", "optparse-applicative", "process", "split", "statestack", "time", "unix", "vector" }
	"diagrams-contrib" -> { "MonadRandom", "arithmoi", "circle-packing", "colour", "containers", "data-default", "data-default-class", "diagrams-core", "diagrams-lib", "force-layout", "lens", "mtl", "parsec", "semigroups", "split", "text", "vector-space", "vector-space-points" }
	"diagrams-core" -> { "MemoTrie", "containers", "dual-tree", "lens", "monoid-extras", "newtype", "semigroups", "vector-space", "vector-space-points" }
	"diagrams-gtk" -> { "cairo", "diagrams-cairo", "diagrams-lib", "gtk" }
	"diagrams-haddock" -> { "Cabal", "ansi-terminal", "base64-bytestring", "blaze-svg", "bytestring", "cautious-file", "cmdargs", "containers", "cpphs", "diagrams-builder", "diagrams-haddock", "diagrams-lib", "diagrams-svg", "directory", "filepath", "haskell-src-exts", "lens", "mtl", "parsec", "split", "strict", "text", "uniplate", "vector-space" }
	"diagrams-lib" -> { "MemoTrie", "active", "array", "colour", "containers", "data-default-class", "diagrams-core", "filepath", "fingertree", "ghc-prim", "hashable", "intervals", "lens", "monoid-extras", "optparse-applicative", "pretty", "safe", "semigroups", "tagged", "vector-space", "vector-space-points" }
	"diagrams-pdf" -> { "HPDF", "cmdargs", "colour", "diagrams-core", "diagrams-lib", "filepath", "lens", "monoid-extras", "mtl", "semigroups", "split", "vector-space" }
	"diagrams-postscript" -> { "data-default-class", "diagrams-core", "diagrams-lib", "dlist", "filepath", "ghc-prim", "hashable", "lens", "monoid-extras", "mtl", "semigroups", "split", "vector-space" }
	"diagrams-qrcode" -> { "array", "colour", "diagrams-core", "diagrams-lib" }
	"diagrams-svg" -> { "blaze-markup", "blaze-svg", "bytestring", "colour", "containers", "diagrams-core", "diagrams-lib", "directory", "filepath", "ghc-prim", "hashable", "lens", "monoid-extras", "mtl", "old-time", "process", "split", "time", "unix", "vector-space" }
	"diagrams-tikz" -> { "diagrams-core", "diagrams-lib", "dlist", "mtl" }
	"dice" -> { "parsec", "random-fu", "transformers" }
	"dictparser" -> { "dictparser", "parsec", "split" }
	"diet" -> {  }
	"diff3" -> { "Diff" }
	"diffarray" -> { "array" }
	"diffcabal" -> { "Cabal", "Diff", "bytestring", "containers", "directory", "filepath", "pretty", "process" }
	"diffdump" -> { "ansi-terminal", "bytestring", "cmdargs", "directory", "filemanip", "filepath", "parallel-io", "process", "process-extras", "unix" }
	"digamma" -> { "polynomial" }
	"digest" -> { "bytestring" }
	"digest-pure" -> { "array", "bytestring" }
	"digestive-functors" -> { "bytestring", "containers", "mtl", "old-locale", "text", "time" }
	"digestive-functors-aeson" -> { "aeson", "containers", "digestive-functors", "lens", "safe", "text", "vector" }
	"digestive-functors-blaze" -> { "blaze-html", "blaze-markup", "digestive-functors", "text" }
	"digestive-functors-happstack" -> { "bytestring", "digestive-functors", "happstack-server", "text" }
	"digestive-functors-heist" -> { "blaze-builder", "digestive-functors", "heist", "mtl", "text", "xmlhtml" }
	"digestive-functors-hsp" -> { "digestive-functors", "hsp", "hsx", "text" }
	"digestive-functors-scotty" -> { "bytestring", "digestive-functors", "http-types", "scotty", "text", "wai", "wai-extra" }
	"digestive-functors-snap" -> { "bytestring", "containers", "digestive-functors", "directory", "filepath", "mtl", "snap-core", "text" }
	"digit" -> { "lens" }
	"digits" -> { "QuickCheck" }
	"dimensional" -> { "numtype", "time" }
	"dimensional-tf" -> { "numtype-tf", "time" }
	"dingo-core" -> { "SHA", "aeson", "attoparsec", "base64-bytestring", "blaze-builder", "blaze-html", "blaze-textual", "bytestring", "conduit", "containers", "cookie", "deepseq", "fclabels", "file-embed", "hashable", "http-types", "random", "shakespeare-js", "strict-concurrency", "template-haskell", "text", "transformers", "unordered-containers", "wai", "wai-eventsource", "wai-extra", "warp", "web-css" }
	"dingo-example" -> { "aeson", "blaze-html", "bytestring", "dingo-core", "dingo-widgets", "fclabels", "shakespeare-js", "template-haskell", "text", "transformers" }
	"dingo-widgets" -> { "aeson", "blaze-html", "bytestring", "containers", "dingo-core", "fclabels", "file-embed", "shakespeare-js", "template-haskell", "text", "transformers", "unordered-containers" }
	"diophantine" -> {  }
	"direct-binary-files" -> { "bytestring", "mtl" }
	"direct-daemonize" -> { "unix" }
	"direct-fastcgi" -> { "bytestring", "containers", "mtl", "network", "utf8-string" }
	"direct-http" -> { "SafeSemaphore", "bytestring", "containers", "direct-daemonize", "lifted-base", "monad-control", "mtl", "network", "old-locale", "time", "transformers-base", "unix", "utf8-string" }
	"direct-murmur-hash" -> { "bytestring" }
	"direct-plugins" -> { "ghc", "ghc-paths" }
	"direct-sqlite" -> { "bytestring", "text" }
	"directed-cubical" -> { "QuickCheck", "containers", "deepseq", "hashable", "parallel", "unordered-containers", "vector" }
	"directory" -> { "filepath", "time", "unix" }
	"directory-layout" -> { "data-default", "directory", "filepath", "lens", "mtl", "semigroupoids", "semigroups", "text" }
	"directory-tree" -> { "directory", "filepath" }
	"dirfiles" -> { "aeson", "containers", "hblock", "safecopy", "text", "time", "unordered-containers" }
	"disassembler" -> { "array", "containers", "mtl", "parsec" }
	"discordian-calendar" -> { "time" }
	"discount" -> { "bytestring", "text" }
	"discrete-space-map" -> { "adjunctions", "comonad", "distributive", "keys", "semigroupoids" }
	"disjoint-set" -> { "containers", "mtl", "transformers" }
	"disjoint-sets-st" -> { "array" }
	"disk-free-space" -> {  }
	"dist-upload" -> { "Cabal", "directory", "filepath", "process" }
	"distributed-process" -> { "binary", "bytestring", "containers", "data-accessor", "distributed-static", "ghc-prim", "mtl", "network-transport", "old-locale", "random", "rank1dynamic", "stm", "syb", "template-haskell", "time", "transformers" }
	"distributed-process-azure" -> { "azure-service-api", "binary", "bytestring", "certificate", "distributed-process", "distributed-static", "executable-path", "filepath", "libssh2", "mtl", "network-transport", "network-transport-tcp", "pureMD5", "rank1dynamic", "transformers", "unix" }
	"distributed-process-p2p" -> { "binary", "bytestring", "containers", "distributed-process", "distributed-process-p2p", "mtl", "network", "network-transport", "network-transport-tcp" }
	"distributed-process-simplelocalnet" -> { "binary", "bytestring", "containers", "data-accessor", "distributed-process", "network", "network-multicast", "network-transport", "network-transport-tcp", "transformers" }
	"distributed-static" -> { "binary", "bytestring", "containers", "rank1dynamic" }
	"distributive" -> { "tagged", "transformers", "transformers-compat" }
	"djinn" -> { "array", "containers", "haskeline", "mtl", "pretty" }
	"djinn-th" -> { "containers", "logict", "template-haskell" }
	"dlist" -> { "deepseq" }
	"dlist-instances" -> { "dlist", "semigroups" }
	"dns" -> { "attoparsec", "attoparsec-conduit", "binary", "blaze-builder", "bytestring", "conduit", "conduit-extra", "containers", "iproute", "mtl", "network", "network-bytestring", "random", "resourcet" }
	"dnscache" -> { "bytestring", "containers", "contstuff", "dns", "iproute", "time" }
	"dnsrbl" -> { "HUnit", "containers", "hsdns", "network" }
	"dnssd" -> { "transformers" }
	"doc-review" -> { "MonadCatchIO-transformers", "MonadRandom", "base64-bytestring", "binary", "bytestring", "containers", "directory", "feed", "filepath", "haskell98", "heist", "hexpat", "json", "monads-fd", "network", "old-locale", "snap-core", "snap-server", "sqlite", "tagchup", "text", "time", "transformers", "unix", "xhtml-combinators", "xml", "xml-basic" }
	"doccheck" -> { "attoparsec", "directory", "directory-tree", "filepath", "ghc", "ghc-paths", "text" }
	"docidx" -> { "Cabal", "MissingH", "containers", "directory", "filepath", "html", "mtl", "old-locale", "tagsoup", "time" }
	"doctest" -> { "deepseq", "directory", "doctest", "filepath", "ghc", "ghc-paths", "process", "syb", "transformers" }
	"doctest-prop" -> { "HUnit", "QuickCheck" }
	"dom-lt" -> { "array", "containers" }
	"dom-selector" -> { "QuickCheck", "blaze-html", "containers", "html-conduit", "parsec", "template-haskell", "text", "th-lift", "xml-conduit" }
	"domain-auth" -> { "RSA", "SHA", "appar", "binary", "blaze-builder", "bytestring", "containers", "crypto-pubkey-types", "dns", "iproute", "network" }
	"dominion" -> { "hscolour", "lens", "mtl", "random", "random-extras", "random-fu", "transformers" }
	"dot2graphml" -> { "containers", "graphviz", "hxt", "text" }
	"dotfs" -> { "HFuse", "HUnit", "QuickCheck", "bytestring", "containers", "directory", "filepath", "haskell-src", "parsec", "process", "template-haskell", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "transformers", "unix" }
	"dotgen" -> { "containers" }
	"double-conversion" -> { "bytestring", "ghc-prim", "text" }
	"dow" -> { "GLFW", "OpenGL", "array", "directory", "elerea", "mersenne-random" }
	"download" -> { "bytestring", "feed", "tagsoup", "xml" }
	"download-curl" -> { "bytestring", "curl", "feed", "tagsoup", "xml" }
	"download-media-content" -> { "bytestring", "filepath", "http-enumerator", "tagsoup", "text" }
	"dph-base" -> { "array", "ghc-prim", "pretty", "random", "vector" }
	"dph-examples" -> { "HUnit", "containers", "dph-base", "dph-lifted-vseg", "dph-prim-par", "old-time", "parseargs", "random", "vector" }
	"dph-lifted-base" -> { "array", "containers", "dph-base", "dph-prim-par", "ghc", "pretty", "random", "template-haskell", "vector" }
	"dph-lifted-copy" -> { "array", "dph-base", "dph-prim-par", "ghc", "random", "template-haskell", "vector" }
	"dph-lifted-vseg" -> { "array", "containers", "dph-base", "dph-lifted-base", "dph-prim-par", "ghc", "pretty", "random", "template-haskell", "vector" }
	"dph-par" -> {  }
	"dph-prim-interface" -> { "dph-base", "random", "vector" }
	"dph-prim-par" -> { "dph-base", "dph-prim-interface", "dph-prim-seq", "old-time", "random", "vector" }
	"dph-prim-seq" -> { "dph-base", "dph-prim-interface", "ghc-prim", "primitive", "random", "vector" }
	"dph-seq" -> {  }
	"dpkg" -> { "bindings-DSL", "bytestring", "monad-loops" }
	"drClickOn" -> { "containers" }
	"dropbox-sdk" -> { "HTTP", "blaze-builder", "bytestring", "case-insensitive", "certificate", "conduit", "http-conduit", "http-types", "json", "monad-control", "network", "old-locale", "pem", "resourcet", "template-haskell", "time", "tls", "tls-extra", "transformers", "urlencoded", "utf8-string" }
	"dropsolve" -> { "containers", "directory", "filepath", "haskell98", "process", "regex-posix", "time" }
	"dsmc" -> { "attoparsec", "bytestring", "containers", "entropy", "hslogger", "mwc-random", "parallel", "primitive", "repa", "strict", "transformers", "vector" }
	"dsmc-tools" -> { "ConfigFile", "bytestring", "cmdargs", "dsmc", "gloss", "gloss-raster", "hslogger", "mtl", "repa", "strict", "transformers", "vector" }
	"dsp" -> { "array", "dsp", "random" }
	"dstring" -> { "base-unicode-symbols", "dlist" }
	"dtd" -> { "attoparsec", "attoparsec-conduit", "blaze-builder", "conduit", "containers", "lifted-base", "monad-control", "network", "resourcet", "text", "transformers", "uri-conduit", "xml-catalog", "xml-conduit", "xml-types" }
	"dtd-text" -> { "attoparsec", "containers", "dtd-types", "text", "xml-types" }
	"dtd-types" -> { "text", "xml-types" }
	"dtrace" -> {  }
	"dual-tree" -> { "monoid-extras", "newtype", "semigroups" }
	"dvda" -> { "QuickCheck", "containers", "directory", "fgl", "file-location", "graphviz", "hashable", "hashtables", "mtl", "process", "test-framework", "test-framework-quickcheck2", "unordered-containers" }
	"dvdread" -> { "bytestring", "mtl" }
	"dvi-processing" -> { "bytestring", "filepath", "transformers" }
	"dwarf" -> { "binary", "bytestring", "containers" }
	"dwarf-el" -> { "binary", "bytestring", "containers", "transformers", "utf8-string" }
	"dwarfadt" -> { "bytestring", "bytestring-mmap", "containers", "dwarf-el", "dwarfadt", "elf", "lens", "pretty", "transformers" }
	"dx9base" -> { "Win32" }
	"dx9d3d" -> { "Win32", "dx9base" }
	"dx9d3dx" -> { "Win32", "dx9base", "dx9d3d" }
	"dynamic-cabal" -> { "containers", "data-default", "directory", "filepath", "ghc", "ghc-paths", "haskell-generate", "haskell-src-exts", "time", "void" }
	"dynamic-linker-template" -> { "containers", "template-haskell", "unix" }
	"dynamic-loader" -> { "directory", "ghc-prim", "hashable", "hashtables", "time", "transformers" }
	"dynamic-mvector" -> { "primitive", "vector" }
	"dynamic-object" -> { "QuickCheck", "containers", "lens", "mtl", "text", "transformers" }
	"dyre" -> { "binary", "directory", "executable-path", "filepath", "ghc-paths", "io-storage", "process", "time", "unix", "xdg-basedir" }
	"dzen-utils" -> { "colour", "process" }
	"easy-api" -> { "aeson", "bytestring", "either", "http-conduit", "mtl", "resourcet", "text" }
	"easy-file" -> { "directory", "filepath", "time", "unix" }
	"easyplot" -> { "process" }
	"easyrender" -> { "bytestring", "containers", "mtl", "superdoc", "zlib" }
	"ebeats" -> { "time" }
	"ec2-signature" -> { "SHA", "base64-bytestring", "bytestring", "http-types" }
	"ecdsa" -> { "bytestring", "crypto-api", "crypto-pubkey-types", "hecc" }
	"ecu" -> { "bytestring", "digest", "directory", "process", "vcd" }
	"ed25519" -> { "bytestring" }
	"eddie" -> { "cmdargs", "hint" }
	"edenmodules" -> { "containers", "deepseq", "parallel" }
	"edenskel" -> { "edenmodules", "parallel" }
	"edentv" -> { "array", "binary", "bytestring", "cairo", "containers", "directory", "filepath", "ghc-events-parallel", "gtk", "mtl", "zip-archive" }
	"edge" -> { "ALUT", "cmdtheline", "containers", "gloss", "random", "wraparound" }
	"edit-distance" -> { "array", "containers", "random" }
	"edit-lenses" -> { "containers", "data-default", "lattices", "mtl" }
	"edit-lenses-demo" -> {  }
	"editline" -> {  }
	"effective-aspects" -> { "HUnit", "QuickCheck", "ghc-prim", "hashtables", "mtl" }
	"effects" -> { "containers", "newtype", "void" }
	"effects-parser" -> { "effects" }
	"egison" -> { "array", "bytestring", "containers", "direct-sqlite", "directory", "egison", "filepath", "ghc", "ghc-paths", "haskeline", "mtl", "parsec", "random", "regex-posix", "strict-io", "text", "transformers", "unordered-containers" }
	"egison-quote" -> { "egison", "mtl", "parsec", "template-haskell" }
	"egison-tutorial" -> { "array", "bytestring", "containers", "directory", "egison", "filepath", "ghc", "ghc-paths", "haskeline", "mtl", "parsec", "regex-posix", "strict-io", "transformers", "unordered-containers" }
	"ehaskell" -> { "directory", "filepath", "mtlparse", "process", "regexpr", "utf8-string", "yjtools" }
	"eigen" -> { "vector" }
	"either" -> { "MonadRandom", "monad-control", "mtl", "semigroupoids", "semigroups", "transformers", "transformers-base" }
	"either-unwrap" -> {  }
	"eithers" -> {  }
	"ekg" -> { "aeson", "bytestring", "containers", "filepath", "network", "snap-core", "snap-server", "text", "time", "transformers", "unordered-containers" }
	"electrum-mnemonic" -> {  }
	"elerea" -> { "containers" }
	"elerea-examples" -> { "GLFW", "OpenGL", "elerea" }
	"elerea-sdl" -> { "SDL", "elerea" }
	"elf" -> { "binary", "bytestring" }
	"elm-build-lib" -> { "directory", "process", "temporary", "text" }
	"elm-get" -> { "Elm", "HTTP", "aeson", "binary", "bytestring", "containers", "directory", "filepath", "http-client", "http-client-multipart", "http-types", "json", "mtl", "network", "optparse-applicative", "pretty", "process", "resourcet", "text", "vector" }
	"elm-repl" -> { "Elm", "bytestring", "bytestring-trie", "cmdargs", "containers", "directory", "filepath", "haskeline", "mtl", "parsec", "process", "transformers" }
	"elm-server" -> { "Elm", "bytestring", "cmdargs", "containers", "directory", "filepath", "mtl", "process", "snap-core", "snap-server", "unordered-containers" }
	"elm-yesod" -> { "Elm", "blaze-markup", "shakespeare-js", "text", "yesod-core" }
	"email" -> { "HaskellNet", "array", "bytestring", "encoding", "hsemail", "old-locale", "old-time", "parsec", "process", "time" }
	"email-header" -> { "attoparsec", "base64-bytestring", "bytestring", "case-insensitive", "containers", "text", "text-icu", "time" }
	"email-postmark" -> { "HTTP", "aeson", "attoparsec", "bytestring", "containers", "network" }
	"email-validate" -> { "attoparsec", "bytestring", "ghc-prim" }
	"email-validator" -> { "HUnit", "bytestring", "cmdargs", "directory", "dns", "email-validate", "parallel-io", "pcre-light", "tasty", "tasty-hunit" }
	"embeddock" -> { "MissingH", "filepath", "her-lexer", "process" }
	"embeddock-example" -> { "embeddock", "time" }
	"embroidery" -> { "HCodecs", "bytestring", "dlist", "gloss", "haskell98", "mtl" }
	"emgm" -> {  }
	"empty" -> {  }
	"enclosed-exceptions" -> { "async", "deepseq", "lifted-base", "monad-control", "transformers" }
	"encoding" -> { "HaXml", "array", "binary", "bytestring", "containers", "extensible-exceptions", "mtl", "regex-compat" }
	"engineering-units" -> {  }
	"entropy" -> { "bytestring", "unix" }
	"enumerable" -> { "control-monad-omega", "tagged" }
	"enumerator" -> { "bytestring", "containers", "text", "transformers" }
	"enumerator-fd" -> { "enumerator", "mtl" }
	"enumerator-tf" -> { "enumerator", "monads-tf" }
	"enumfun" -> { "enummapset-th" }
	"enummapmap" -> { "contravariant", "data-default", "deepseq", "ghc-prim", "lens", "safecopy", "semigroups" }
	"enummapset" -> { "containers", "deepseq" }
	"enummapset-th" -> { "containers", "deepseq", "template-haskell" }
	"enumset" -> { "data-accessor", "storable-record" }
	"env-parser" -> { "aeson", "attoparsec", "base16-bytestring", "base64-bytestring", "bytestring", "containers", "http-types", "mtl", "network", "old-locale", "text", "time", "transformers" }
	"epanet-haskell" -> {  }
	"epass" -> { "stm", "time" }
	"epic" -> { "Cabal", "array", "directory", "mtl", "process" }
	"epoll" -> { "unix" }
	"eprocess" -> { "exceptions", "mtl" }
	"epub" -> { "bytestring", "filepath", "old-time", "utf8-string", "xml", "zip-archive" }
	"epub-metadata" -> { "bytestring", "containers", "directory", "filepath", "hxt", "mtl", "regex-compat", "zip-archive" }
	"epub-tools" -> { "bytestring", "directory", "epub-metadata", "filepath", "mtl", "parsec", "process", "regex-compat", "zip-archive" }
	"epubname" -> { "directory", "epub-metadata", "mtl", "regex-compat" }
	"eq" -> { "semigroupoids" }
	"equal-files" -> { "bytestring", "explicit-exception", "filemanip", "transformers", "utility-ht" }
	"equational-reasoning" -> { "singletons", "tagged", "template-haskell", "void" }
	"equivalence" -> { "STMonadTrans", "containers", "mtl" }
	"erd" -> { "bytestring", "containers", "graphviz", "parsec", "text" }
	"erf" -> {  }
	"erf-native" -> { "polynomial" }
	"erlang" -> { "binary", "bytestring", "directory", "filepath", "nano-md5", "network", "random" }
	"errno" -> { "mtl" }
	"error-loc" -> { "template-haskell" }
	"error-location" -> { "template-haskell" }
	"error-message" -> { "InfixApplicative", "ansi-wl-pprint", "containers", "either-unwrap", "mtl" }
	"errorcall-eq-instance" -> {  }
	"errors" -> { "either", "safe", "transformers" }
	"ersatz" -> { "array", "blaze-builder", "blaze-textual", "bytestring", "containers", "data-default", "ersatz", "ghc-prim", "lens", "mtl", "parsec", "process", "temporary", "transformers", "unordered-containers" }
	"esotericbot" -> { "attoparsec", "bytestring", "containers", "directory", "fgl", "mtl", "network", "stm", "stream-fusion", "tuple", "unix" }
	"esqueleto" -> { "conduit", "monad-logger", "persistent", "resourcet", "tagged", "text", "transformers", "unordered-containers" }
	"estimators" -> { "MonadRandom", "QuickCheck", "binary", "containers", "deepseq", "list-tries", "mtl", "pretty", "prettyclass", "text" }
	"estreps" -> { "bio", "bytestring", "containers", "random" }
	"etcd" -> { "aeson", "bytestring", "http-conduit", "time" }
	"eternal" -> { "bytestring", "conduit", "directory", "filepath", "http-conduit", "http-types", "network", "process", "regex-compat", "transformers", "utf8-string" }
	"ety" -> { "bytestring", "curl", "random", "text-icu", "utf8-string", "xml" }
	"eurofxref" -> { "bytestring", "conduit", "containers", "failure", "hexpat", "http-conduit", "http-types", "monad-control", "mtl", "time" }
	"event-driven" -> { "monads-tf", "yjtools" }
	"event-handlers" -> { "containers" }
	"event-list" -> { "QuickCheck", "non-negative", "transformers", "utility-ht" }
	"event-monad" -> { "containers", "event-handlers", "haskell98", "monad-loops", "mtl", "pretty", "prettyclass", "priority-queue", "stateref" }
	"every-bit-counts" -> { "haskell98" }
	"ewe" -> { "array", "containers", "mtl", "transformers" }
	"ex-pool" -> { "exceptions", "hashable", "stm", "time", "transformers", "vector" }
	"exact-combinatorics" -> {  }
	"exception-mailer" -> { "hslogger", "mime-mail", "text" }
	"exception-monads-fd" -> { "exception-transformers", "monads-fd", "transformers" }
	"exception-monads-tf" -> { "exception-transformers", "monads-tf", "transformers" }
	"exception-mtl" -> { "exception-transformers", "mtl", "transformers" }
	"exception-transformers" -> { "stm", "transformers" }
	"exceptions" -> { "mtl", "transformers" }
	"executable-path" -> { "directory", "filepath", "unix" }
	"exif" -> {  }
	"exists" -> { "contravariant" }
	"expand" -> { "AspectAG", "HList", "murder", "uu-parsinglib" }
	"expat-enumerator" -> { "bytestring", "enumerator", "hexpat", "text", "transformers", "xml-types" }
	"expiring-mvar" -> {  }
	"explain" -> { "ansi-wl-pprint", "haskell-src-exts" }
	"explicit-exception" -> { "transformers" }
	"explicit-iomodes" -> { "base-unicode-symbols", "tagged" }
	"explicit-iomodes-bytestring" -> { "bytestring", "explicit-iomodes" }
	"explicit-iomodes-text" -> { "explicit-iomodes", "text" }
	"explicit-sharing" -> { "containers", "derive", "mtl", "template-haskell" }
	"explore" -> { "array", "directory", "pngload" }
	"expression-parser" -> {  }
	"extcore" -> { "array", "bytestring", "containers", "directory", "filepath", "mtl", "parsec", "pretty" }
	"extemp" -> { "HTTP", "MaybeT", "bytestring", "containers", "feed", "happstack-auth", "happstack-server", "happstack-state", "happstack-util", "monad-parallel", "mtl", "network", "old-locale", "regex-tdfa", "smartGroup", "stringsearch", "time", "xhtml", "xml" }
	"extensible-data" -> { "data-lens", "hashable", "template-haskell", "unordered-containers" }
	"extensible-effects" -> {  }
	"extensible-exceptions" -> {  }
	"external-sort" -> { "EdisonAPI", "EdisonCore", "binary", "bytestring" }
	"extractelf" -> { "bytestring", "bytestring-mmap", "directory", "elf", "filepath", "optparse-applicative" }
	"ez-couch" -> { "aeson", "attoparsec", "attoparsec-conduit", "blaze-builder", "bytestring", "classy-prelude", "classy-prelude-conduit", "containers", "ghc-prim", "hashable", "hslogger", "http-conduit", "http-types", "mtl", "old-locale", "random", "resourcet", "string-conversions", "text", "time", "tls", "unordered-containers", "vector" }
	"factory" -> { "Cabal", "QuickCheck", "array", "containers", "deepseq", "parallel", "primes", "random", "toolshed" }
	"factual-api" -> { "HTTP", "MissingH", "aeson", "attoparsec", "bytestring", "containers", "curl", "dataenc", "hoauth", "text", "unordered-containers", "utf8-string", "vector" }
	"fad" -> {  }
	"failable-list" -> {  }
	"failure" -> { "transformers" }
	"fair-predicates" -> {  }
	"falling-turnip" -> { "JuicyPixels-repa", "QuickCheck", "gloss", "gloss-raster", "random", "repa", "repa-algorithms", "vector" }
	"fallingblocks" -> { "SDL", "SDL-mixer", "SDL-ttf", "containers", "haskell98" }
	"family-tree" -> { "binary", "containers", "hashable", "intervals", "lens", "tables", "text", "time", "unordered-containers" }
	"fast-logger" -> { "array", "blaze-builder", "bytestring", "directory", "filepath", "text" }
	"fast-math" -> {  }
	"fast-tags" -> { "containers", "text" }
	"fast-tagsoup" -> { "bytestring", "tagsoup", "text", "text-icu" }
	"fast-tagsoup-utf8-only" -> { "bytestring", "tagsoup", "text" }
	"fastcgi" -> { "bytestring", "cgi" }
	"fastirc" -> { "attoparsec", "bytestring", "bytestring-show", "containers", "monadLib", "network-fancy" }
	"fault-tree" -> { "yices" }
	"fay" -> { "Cabal", "HUnit", "aeson", "attoparsec", "bytestring", "containers", "cpphs", "data-default", "directory", "fay", "filepath", "ghc-paths", "haskell-names", "haskell-packages", "haskell-src-exts", "language-ecmascript", "mtl", "optparse-applicative", "pretty-show", "process", "safe", "scientific", "sourcemap", "split", "syb", "test-framework", "test-framework-hunit", "test-framework-th", "text", "time", "uniplate", "unordered-containers", "utf8-string", "vector" }
	"fay-base" -> { "fay" }
	"fay-dom" -> { "fay-base" }
	"fay-hsx" -> { "fay-base", "fay-jquery" }
	"fay-jquery" -> { "fay-base", "fay-text" }
	"fay-ref" -> { "fay-base" }
	"fay-text" -> { "fay", "fay-base", "text" }
	"fay-uri" -> { "fay-base" }
	"fb" -> { "aeson", "attoparsec", "base16-bytestring", "base64-bytestring", "bytestring", "cereal", "conduit", "conduit-extra", "crypto-api", "cryptohash", "cryptohash-cryptoapi", "data-default", "http-conduit", "http-types", "lifted-base", "monad-control", "monad-logger", "old-locale", "resourcet", "text", "time", "transformers", "transformers-base", "unordered-containers" }
	"fb-persistent" -> { "cereal", "fb", "persistent", "text", "time" }
	"fckeditor" -> { "HaXml", "cgi", "xhtml" }
	"fclabels" -> { "mtl", "template-haskell", "transformers" }
	"fclabels-monadlib" -> { "fclabels", "monadLib" }
	"fdo-notify" -> { "containers", "dbus" }
	"fdo-trash" -> { "Diff", "directory", "fdo-trash", "filepath", "old-locale", "parsec", "time", "unix", "url" }
	"feature-flags" -> { "text" }
	"fec" -> { "bytestring" }
	"fedora-packages" -> { "HsOpenSSL", "aeson", "bytestring", "containers", "http-streams", "io-streams", "lens", "text" }
	"feed" -> { "old-locale", "old-time", "time", "utf8-string", "xml" }
	"feed-cli" -> { "directory", "feed", "old-locale", "old-time", "time", "xml" }
	"feed2lj" -> { "HTTP", "curl", "directory", "feed", "haskell98", "old-locale", "pureMD5", "regex-posix", "tagsoup", "time", "utf8-string" }
	"feed2twitter" -> { "bytestring", "download-curl", "feed", "hs-twitter" }
	"feldspar-compiler" -> { "MonadCatchIO-mtl", "ansi-terminal", "containers", "directory", "feldspar-compiler", "feldspar-language", "filepath", "haskell-src-exts", "hint", "mtl", "process", "syntactic" }
	"feldspar-language" -> { "QuickAnnotate", "QuickCheck", "array", "containers", "data-hash", "data-lens", "monad-par", "mtl", "patch-combinators", "syntactic", "tagged", "tuple", "type-level" }
	"fenfire" -> { "HaXml", "cairo", "gtk", "harp", "mtl", "template-haskell", "unix" }
	"fez-conf" -> { "containers", "regex-compat" }
	"ffeed" -> { "HTTP", "json", "network", "pretty", "utf8-string" }
	"fficxx" -> { "Cabal", "HStringTemplate", "bytestring", "containers", "directory", "either", "errors", "filepath", "hashable", "lens", "mtl", "process", "pureMD5", "split", "template-haskell", "transformers", "unordered-containers" }
	"fficxx-runtime" -> {  }
	"ffmpeg-tutorials" -> { "SDL", "bytestring", "haskell98", "hs-ffmpeg", "stm" }
	"fft" -> { "array", "carray", "ix-shapable", "storable-complex", "syb" }
	"fgl" -> { "array", "containers", "mtl" }
	"fgl-extras-decompositions" -> { "containers", "fgl" }
	"fgl-visualize" -> { "dotgen", "fgl" }
	"fibon" -> { "Cabal", "attoparsec", "bytestring", "bytestring-lexing", "cereal", "containers", "directory", "filepath", "hslogger", "mtl", "old-locale", "old-time", "process", "regex-compat", "statistics", "syb", "tabular", "time", "vector" }
	"fibonacci" -> {  }
	"fields" -> { "array", "containers", "fclabels", "monads-fd", "transformers" }
	"fields-json" -> { "base64-bytestring", "containers", "json", "mtl", "utf8-string" }
	"fig" -> { "containers", "parsec", "pretty" }
	"file-embed" -> { "bytestring", "directory", "filepath", "template-haskell" }
	"file-location" -> { "containers", "lifted-base", "template-haskell", "transformers" }
	"filecache" -> { "hashable", "hinotify", "lens", "mtl", "stm", "strict-base-types", "unordered-containers" }
	"filelock" -> { "unix" }
	"filemanip" -> { "bytestring", "directory", "filepath", "mtl", "unix-compat" }
	"filepath" -> {  }
	"filepath-io-access" -> { "base-io-access", "filepath" }
	"filestore" -> { "Diff", "bytestring", "containers", "directory", "filepath", "old-locale", "parsec", "process", "split", "time", "utf8-string", "xml" }
	"filesystem-conduit" -> { "bytestring", "conduit", "containers", "system-fileio", "system-filepath", "text", "transformers", "unix" }
	"filesystem-enumerator" -> { "enumerator", "system-fileio", "system-filepath", "transformers", "unix" }
	"filesystem-trees" -> { "cond", "containers", "data-lens", "deepseq", "directory", "dlist", "filepath", "mtl", "unix" }
	"final" -> { "stm", "transformers" }
	"fingertree" -> {  }
	"fingertree-psqueue" -> { "fingertree" }
	"finite-field" -> { "algebra", "deepseq", "hashable", "template-haskell", "type-level-numbers" }
	"first-class-patterns" -> { "transformers" }
	"firstify" -> { "Safe", "containers", "directory", "filepath", "homeomorphic", "mtl", "yhccore" }
	"fishfood" -> { "Cabal", "QuickCheck", "containers", "factory", "mtl", "toolshed", "unix" }
	"fitsio" -> { "filepath", "mtl" }
	"fix-imports" -> { "containers", "cpphs", "directory", "filepath", "haskell-src-exts", "process", "split", "text", "uniplate" }
	"fix-parser-simple" -> { "mmtl" }
	"fix-symbols-gitit" -> { "containers", "gitit" }
	"fixed-list" -> {  }
	"fixed-point" -> {  }
	"fixed-point-vector" -> { "fixed-point", "vector" }
	"fixed-point-vector-space" -> { "fixed-point", "vector-space" }
	"fixed-precision" -> { "hmpfr", "integer-gmp", "reflection", "tagged", "template-haskell" }
	"fixed-storable-array" -> { "array", "tagged" }
	"fixed-vector" -> { "primitive" }
	"fixed-vector-binary" -> { "binary", "fixed-vector" }
	"fixed-vector-cereal" -> { "cereal", "fixed-vector" }
	"fixedprec" -> { "random" }
	"fixhs" -> { "HaXml", "MissingH", "QuickCheck", "attoparsec", "attoparsec-enumerator", "bytestring", "containers", "deepseq", "dlist", "enumerator", "network", "old-time", "parallel", "text" }
	"fixplate" -> { "containers" }
	"fixpoint" -> {  }
	"fizz-buzz" -> {  }
	"flaccuraterip" -> { "HTTP", "binary", "cmdargs", "deepseq", "process" }
	"flamethrower" -> { "haskell-src-meta", "template-haskell", "text" }
	"flat-mcmc" -> { "monad-par", "monad-par-extras", "mtl", "mwc-random", "primitive", "vector" }
	"flexible-defaults" -> { "containers", "template-haskell", "th-extras", "transformers" }
	"flexible-unlit" -> { "bytestring", "flexible-unlit", "text" }
	"flexiwrap" -> { "QuickCheck", "data-type", "mtl", "special-functors" }
	"flexiwrap-smallcheck" -> { "data-type", "flexiwrap", "mtl", "smallcheck", "special-functors" }
	"flickr" -> { "HTTP", "filepath", "mime", "network", "random", "utf8-string", "xhtml", "xml" }
	"flippers" -> {  }
	"flite" -> { "array", "containers", "haskell98", "parsec" }
	"flo" -> { "bytestring", "mtl", "parsec", "regex-compat", "text" }
	"float-binstring" -> { "parsec", "split" }
	"floatshow" -> { "array", "integer-gmp" }
	"flock" -> { "lifted-base", "monad-control", "transformers", "unix" }
	"flow2dot" -> { "QuickCheck", "containers", "haskell98", "mtl", "parsec", "utf8-string" }
	"flowdock-api" -> { "HsOpenSSL", "MonadCatchIO-transformers", "aeson", "base64-bytestring", "blaze-builder", "bytestring", "data-default", "directory", "filepath", "http-streams", "http-types", "io-streams", "monad-logger", "optparse-applicative", "split", "text", "time", "transformers", "unordered-containers", "vector" }
	"flower" -> { "array", "binary", "bio", "bytestring", "cmdargs", "containers", "mtl", "random" }
	"flowsim" -> { "MonadRandom", "array", "biocore", "biofasta", "biosff", "bytestring", "cmdargs", "containers", "directory", "mtl", "random" }
	"fluent-logger" -> { "bytestring", "msgpack", "network", "network-socket-options", "stm", "time" }
	"fluent-logger-conduit" -> { "bytestring", "conduit", "fluent-logger", "msgpack", "transformers" }
	"fluidsynth" -> { "bindings-DSL", "containers", "directory" }
	"fmark" -> { "Unixutils", "directory", "filepath", "mtl", "process" }
	"fmlist" -> {  }
	"foldl" -> { "bytestring", "primitive", "text", "transformers", "vector" }
	"folds" -> { "comonad", "contravariant", "lens", "pointed", "profunctors", "reflection", "semigroupoids", "tagged", "transformers", "vector" }
	"follower" -> { "ansi-wl-pprint", "cmdargs", "directory", "filepath", "hs-twitter", "old-locale", "strict", "time" }
	"font-opengl-basic4x6" -> { "GLFW-b", "OpenGL" }
	"foo" -> { "GLUT", "OpenGL", "containers", "haskell98" }
	"for-free" -> { "comonad", "comonad-transformers", "containers", "contravariant", "transformers" }
	"force-layout" -> { "containers", "data-default-class", "lens", "vector-space", "vector-space-points" }
	"fordo" -> { "process", "transformers" }
	"foreign-storable-asymmetric" -> {  }
	"foreign-store" -> {  }
	"forkable-monad" -> { "transformers" }
	"formal" -> { "HTTP", "MissingH", "ansi-terminal", "bytestring", "containers", "directory", "file-embed", "indents", "interpolatedstring-perl6", "jmacro", "mtl", "network", "pandoc", "parsec", "process", "text", "transformers", "urlencoded", "wl-pprint-text" }
	"format" -> { "haskell2010", "parsec" }
	"formatting" -> { "old-locale", "text", "text-format", "time" }
	"forml" -> { "GraphSCC", "HTTP", "MissingH", "ansi-terminal", "bytestring", "cereal", "containers", "directory", "file-embed", "ghc-prim", "hslogger", "indents", "interpolatedstring-perl6", "jmacro", "mtl", "network", "pandoc", "parsec", "process", "text", "urlencoded", "utf8-string", "zlib" }
	"formlets" -> { "applicative-extras", "blaze-html", "bytestring", "haskell98", "syb", "transformers", "xhtml" }
	"formlets-hsp" -> { "applicative-extras", "formlets", "haskell98", "hsp", "hsx", "mtl" }
	"forth-hll" -> { "array-forth", "free", "mtl" }
	"fountain" -> { "containers", "random" }
	"fpco-api" -> { "aeson", "attoparsec", "bytestring", "containers", "data-default", "directory", "failure", "fay", "filepath", "fpco-api", "ghc-prim", "http-conduit", "http-types", "ini", "lifted-base", "monad-extras", "monad-logger", "mtl", "network", "optparse-applicative", "persistent", "persistent-template", "pretty-show", "process", "random", "resourcet", "safe", "scientific", "syb", "template-haskell", "text", "texts", "unordered-containers", "vector", "yesod-fay" }
	"fpipe" -> {  }
	"fpnla" -> {  }
	"fpnla-examples" -> { "accelerate", "array", "deepseq", "fpnla", "hmatrix", "linear-algebra-cblas", "monad-par", "parallel", "repa", "vector" }
	"fquery" -> { "directory", "extensible-exceptions", "hashtables", "parsec", "process", "regex-compat", "unix" }
	"fractal" -> {  }
	"fraction" -> { "semigroups" }
	"frag" -> { "GLUT", "OpenGL", "array", "random" }
	"frame" -> { "HDBC", "HDBC-odbc", "HTTP", "MissingH", "bytestring", "containers", "directory", "ghc-binary", "happstack-fastcgi", "happstack-server", "haskell98", "haskelldb", "haskelldb-hdbc", "haskelldb-hdbc-odbc", "mtl", "old-time", "pretty", "utf8-string" }
	"frame-markdown" -> { "frame", "pandoc" }
	"franchise" -> {  }
	"free" -> { "bifunctors", "comonad", "distributive", "mtl", "profunctors", "semigroupoids", "semigroups", "template-haskell", "transformers" }
	"free-functors" -> { "algebraic-classes", "comonad", "constraints", "template-haskell", "transformers", "void" }
	"free-game" -> { "GLFW-b", "JuicyPixels", "JuicyPixels-util", "OpenGL", "OpenGLRaw", "array", "boundingboxes", "colors", "containers", "control-bool", "directory", "filepath", "free", "freetype2", "hashable", "lens", "linear", "mtl", "random", "reflection", "template-haskell", "transformers", "vector", "void" }
	"free-operational" -> { "comonad-transformers", "free", "kan-extensions", "mtl", "transformers" }
	"free-theorems" -> { "containers", "haskell-src", "haskell-src-exts", "mtl", "pretty" }
	"free-theorems-counterexamples" -> { "HUnit", "cgi", "containers", "free-theorems", "haskell-src", "haskell-src-exts", "mtl", "pretty", "utf8-string", "xhtml" }
	"free-theorems-seq" -> { "array", "bytestring", "containers", "free-theorems", "haskell-src", "mtl", "old-locale", "old-time", "parsec", "pretty", "utf8-string", "xhtml" }
	"free-theorems-seq-webui" -> { "cgi", "containers", "free-theorems-seq", "mtl", "network", "pretty", "utf8-string", "xhtml" }
	"free-theorems-webui" -> { "bytestring", "cgi", "csv", "dataenc", "directory", "filepath", "free-theorems", "process", "time", "xhtml" }
	"freekick2" -> { "EdisonCore", "FTGL", "OpenGL", "SDL", "array", "binary", "bytestring", "containers", "directory", "filepath", "haskell98", "mtl", "pngload", "random", "template-haskell" }
	"freenect" -> { "vector" }
	"freesect" -> { "array", "cpphs", "directory", "mtl", "parallel", "pretty", "random", "syb" }
	"freesound" -> { "bytestring", "curl", "data-accessor", "data-accessor-template", "directory", "mtl", "xml" }
	"freetype2" -> {  }
	"fresh" -> { "containers", "haskell-src-exts", "syb" }
	"friendly-time" -> { "old-locale", "time" }
	"frisby" -> { "array", "containers", "mtl" }
	"frquotes" -> {  }
	"fs-events" -> {  }
	"fsharp" -> {  }
	"fsmActions" -> { "MissingH", "containers", "fgl", "filepath", "graphviz", "mtl", "parsec", "pretty" }
	"fsnotify" -> { "containers", "hinotify", "system-fileio", "system-filepath", "text", "time" }
	"fst" -> { "array", "haskeline", "mtl", "transformers" }
	"fsutils" -> { "directory", "filepath" }
	"fswatcher" -> { "directory", "fsnotify", "process", "system-filepath", "unix" }
	"ftdi" -> { "base-unicode-symbols", "bytestring", "safe", "transformers", "usb" }
	"ftp-conduit" -> { "MissingH", "byteorder", "bytestring", "conduit", "network", "transformers", "utf8-string" }
	"ftphs" -> { "MissingH", "hslogger", "mtl", "network", "parsec", "regex-compat" }
	"ftree" -> { "ShowF", "type-unary" }
	"ftshell" -> { "Shellac", "Shellac-readline", "containers", "free-theorems", "mtl", "pretty" }
	"fugue" -> {  }
	"full-sessions" -> { "ghc", "network" }
	"full-text-search" -> { "array", "containers", "text", "vector" }
	"fullstop" -> { "fullstop", "split" }
	"funcmp" -> { "filepath", "process" }
	"function-combine" -> { "data-type" }
	"function-instances-algebra" -> { "numeric-prelude" }
	"functional-arrow" -> { "HList" }
	"functor-apply" -> {  }
	"functor-combo" -> { "TypeCompose", "containers", "data-inttrie", "lub", "type-unary" }
	"functorm" -> {  }
	"functors" -> {  }
	"funion" -> { "HFuse", "bytestring", "directory", "filepath", "haskell98", "unix" }
	"funpat" -> { "mtl" }
	"funsat" -> { "QuickCheck", "array", "bimap", "bitset", "containers", "fgl", "mtl", "parse-dimacs", "pretty", "random", "time" }
	"futun" -> { "bytestring", "network", "unix" }
	"future" -> {  }
	"fuzzy-timings" -> { "containers", "glpk-hs", "mtl", "random", "time" }
	"fuzzytime" -> { "cmdargs", "directory", "old-time", "process" }
	"g-npm" -> { "HTTP", "json" }
	"gact" -> { "biopsl", "bytestring", "cmdargs", "hashable", "unordered-containers" }
	"game-probability" -> { "containers", "probability", "random" }
	"game-tree" -> {  }
	"gameclock" -> { "cairo", "containers", "glib", "gtk", "time" }
	"gamma" -> { "continued-fractions", "converge", "template-haskell", "vector" }
	"gang-of-threads" -> { "containers", "mtl", "stm", "transformers" }
	"garepinoh" -> { "haskeline", "transformers" }
	"garsia-wachs" -> {  }
	"gbu" -> { "Graphalyze", "containers", "fgl", "haskell98", "mtl", "regex-posix" }
	"gc-monitoring-wai" -> { "aeson", "blaze-builder", "conduit", "http-types", "text", "transformers", "unordered-containers", "wai" }
	"gconf" -> { "glib" }
	"gd" -> { "bytestring" }
	"gdiff" -> {  }
	"gdiff-ig" -> { "array", "ghc-prim", "instant-generics", "template-haskell" }
	"gdiff-th" -> { "containers", "gdiff", "mtl", "template-haskell", "th-expand-syns", "uniplate" }
	"gearbox" -> { "GLUT", "OpenGLRaw", "Vec" }
	"geek" -> { "Glob", "aeson", "aeson-pretty", "air", "air-extra", "air-spec", "bytestring", "containers", "curl", "data-default", "directory", "filepath", "fsnotify", "hack2", "hack2-contrib", "hspec", "miku", "moe", "mtl", "old-locale", "process", "random", "safe", "split", "system-filepath", "text", "text-icu", "time", "uuid" }
	"geek-server" -> { "air", "bytestring", "data-default", "geek", "hack2", "hack2-handler-snap-server", "hspec", "pandoc", "text" }
	"gemstone" -> { "FTGL", "OpenGL", "SDL", "SDL-image", "array", "bitmap", "bitmap-opengl", "containers", "lens", "linear", "random", "stb-image", "transformers" }
	"gencheck" -> { "combinat", "containers", "ieee754", "memoize", "random", "template-haskell", "transformers" }
	"gender" -> { "attoparsec", "text" }
	"general-prelude" -> { "lens", "pointless-fun", "strict", "system-filepath" }
	"generator" -> { "List", "transformers" }
	"generators" -> { "mtl", "random" }
	"generic-aeson" -> { "aeson", "attoparsec", "generic-deriving", "mtl", "tagged", "text", "vector" }
	"generic-binary" -> { "binary", "bytestring", "ghc-prim" }
	"generic-church" -> { "tagged" }
	"generic-deepseq" -> { "ghc-prim" }
	"generic-deriving" -> { "template-haskell" }
	"generic-maybe" -> { "ghc-prim" }
	"generic-server" -> { "bytestring", "network" }
	"generic-storable" -> { "ghc-prim" }
	"generic-tree" -> {  }
	"generic-xml" -> { "HaXml", "mtl", "syb-with-class", "template-haskell" }
	"genericserialize" -> {  }
	"genetics" -> { "random-fu" }
	"geni-gui" -> { "GenI", "array", "cabal-macosx", "containers", "directory", "filepath", "geni-gui", "graphviz", "hslogger", "json", "mtl", "process", "text", "transformers", "wx", "wxcore", "yaml-light" }
	"geni-util" -> { "GenI", "HTTP", "blaze-html", "blaze-markup", "bytestring", "cmdargs", "directory", "filepath", "geni-util", "geniserver", "http-streams", "io-streams", "json", "text" }
	"geniconvert" -> { "GenI", "HUnit", "HaXml", "QuickCheck", "binary", "containers", "haskell98", "mtl", "parsec", "utf8-string" }
	"genifunctors" -> { "containers", "mtl", "template-haskell" }
	"geniplate" -> { "mtl", "template-haskell" }
	"geniserver" -> { "GenI", "bytestring", "cmdargs", "geniserver", "http-types", "json", "snap-core", "snap-server", "text", "transformers", "utf8-string" }
	"genprog" -> { "MonadRandom", "syb", "syz" }
	"gentlemark" -> { "parsec", "transformers" }
	"geocalc" -> {  }
	"geodetic" -> { "coordinate", "lens", "optional" }
	"geohash" -> { "array" }
	"geojson" -> { "aeson", "lens", "text" }
	"getemx" -> { "curl", "directory", "filepath", "haskell98", "hxt", "mtl", "old-locale", "process", "time" }
	"getflag" -> {  }
	"getopt-simple" -> { "containers" }
	"gf" -> { "array", "bytestring", "cgi", "containers", "directory", "filepath", "fst", "haskeline", "httpd-shed", "json", "mtl", "network", "old-locale", "parallel", "pretty", "process", "random", "time", "time-compat", "unix", "utf8-string" }
	"ggtsTC" -> { "containers", "parsec" }
	"ghc-core" -> { "colorize-haskell", "directory", "filepath", "pcre-light", "process" }
	"ghc-core-html" -> { "blaze-html", "bytestring", "containers", "mtl", "parsec", "process" }
	"ghc-datasize" -> { "ghc-heap-view" }
	"ghc-dup" -> { "ghc" }
	"ghc-events" -> { "array", "binary", "bytestring", "containers", "mtl" }
	"ghc-events-analyze" -> { "SVGFonts", "containers", "diagrams-lib", "diagrams-svg", "filepath", "ghc-events", "lens", "mtl", "optparse-applicative", "parsec", "template-haskell", "th-lift", "transformers" }
	"ghc-events-parallel" -> { "array", "binary", "bytestring", "containers", "mtl" }
	"ghc-gc-tune" -> { "directory", "filepath", "process" }
	"ghc-heap-view" -> { "binary", "bytestring", "containers", "ghc", "template-haskell", "transformers" }
	"ghc-imported-from" -> { "Cabal", "containers", "directory", "filepath", "ghc", "ghc-imported-from", "ghc-mod", "ghc-paths", "ghc-syb-utils", "mtl", "process", "safe", "syb", "transformers" }
	"ghc-make" -> { "shake" }
	"ghc-man-completion" -> { "parsec", "process" }
	"ghc-mod" -> { "Cabal", "containers", "convertible", "directory", "filepath", "ghc", "ghc-mod", "ghc-syb-utils", "hlint", "io-choice", "old-time", "process", "syb", "time", "transformers" }
	"ghc-mtl" -> { "exceptions", "extensible-exceptions", "ghc", "mtl" }
	"ghc-parmake" -> { "array", "containers", "directory", "filepath", "ghc-parmake", "process", "temporary" }
	"ghc-parser" -> { "ghc" }
	"ghc-paths" -> {  }
	"ghc-pkg-autofix" -> { "Cabal", "cmdargs", "filepath", "parsec", "process", "split" }
	"ghc-syb" -> { "ghc" }
	"ghc-syb-utils" -> { "ghc", "ghc-syb", "syb" }
	"ghc-time-alloc-prof" -> { "attoparsec", "containers", "ghc-time-alloc-prof", "text", "time" }
	"ghc-vis" -> { "cairo", "containers", "deepseq", "fgl", "ghc-heap-view", "graphviz", "gtk", "mtl", "svgcairo", "text", "transformers", "xdot" }
	"ghci-diagrams" -> { "cairo", "colour", "diagrams", "gtk" }
	"ghci-haskeline" -> { "array", "bytestring", "directory", "filepath", "ghc", "ghc-paths", "haskeline", "mtl", "process", "unix" }
	"ghci-lib" -> { "MissingH", "ghc" }
	"ghci-ng" -> { "array", "bytestring", "directory", "filepath", "ghc", "ghc-paths", "haskeline", "process", "transformers", "unix" }
	"ghcjs-codemirror" -> {  }
	"ghcjs-dom" -> { "ghcjs-base", "mtl" }
	"ghclive" -> { "aeson", "blaze-html", "blaze-markup", "bytestring", "containers", "diagrams-lib", "diagrams-svg", "directory", "file-embed", "ghc-prim", "ghclive", "hint", "mtl", "text", "time", "unix", "unordered-containers", "vector", "wai", "wai-websockets", "warp", "websockets", "yesod", "yesod-static" }
	"ghczdecode" -> { "zenc" }
	"ght" -> { "SHA", "binary", "bytestring", "data-default", "directory", "filepath", "iteratee", "iteratee-compress", "mmap", "mtl", "old-locale", "storable-endian", "time", "ui-command", "unix", "zlib" }
	"ginsu" -> { "array", "binary", "bytestring", "containers", "directory", "mtl", "network", "old-locale", "old-time", "parsec", "pretty", "process", "random", "regex-posix", "syb", "unix", "utf8-string" }
	"gio" -> { "array", "bytestring", "containers", "glib", "mtl" }
	"gist" -> { "aeson", "bytestring", "conduit", "http-conduit", "text" }
	"git-all" -> { "cmdargs", "hslogger", "parallel-io", "regex-posix", "shelly", "system-fileio", "system-filepath", "text", "transformers", "unix" }
	"git-annex" -> { "DAV", "HTTP", "IfElse", "MissingH", "MonadCatchIO-transformers", "QuickCheck", "SHA", "SafeSemaphore", "aeson", "async", "blaze-builder", "bloomfilter", "byteable", "bytestring", "case-insensitive", "clientsession", "containers", "crypto-api", "cryptohash", "data-default", "dataenc", "dbus", "directory", "dlist", "dns", "edit-distance", "extensible-exceptions", "fdo-notify", "feed", "filepath", "gnutls", "hS3", "hamlet", "hinotify", "hslogger", "http-client", "http-conduit", "http-types", "json", "lifted-base", "monad-control", "mtl", "network", "network-conduit", "network-info", "network-multicast", "network-protocol-xmpp", "old-locale", "optparse-applicative", "process", "random", "regex-tdfa", "securemem", "stm", "tasty", "tasty-hunit", "tasty-quickcheck", "tasty-rerun", "template-haskell", "text", "time", "transformers", "unix", "unix-compat", "utf8-string", "uuid", "wai", "wai-logger", "warp", "warp-tls", "xml-types", "yesod", "yesod-core", "yesod-default", "yesod-form", "yesod-static" }
	"git-checklist" -> { "directory", "filepath", "optparse-applicative", "parsec", "pretty", "process" }
	"git-date" -> { "bytestring", "time", "utf8-string" }
	"git-gpush" -> { "bytestring", "containers", "directory", "filepath", "gitlib", "gitlib-cmdline", "hslogger", "old-locale", "optparse-applicative", "shelly", "tagged", "text", "time", "transformers" }
	"git-monitor" -> { "bytestring", "containers", "directory", "fast-logger", "filepath", "gitlib", "gitlib-libgit2", "hslogger", "monad-logger", "old-locale", "optparse-applicative", "shelly", "tagged", "template-haskell", "text", "time", "transformers", "unix" }
	"git-object" -> { "attoparsec", "attoparsec-enumerator", "bytestring", "directory", "enumerator", "filepath", "zlib-enum" }
	"git-repair" -> { "IfElse", "MissingH", "QuickCheck", "async", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "hslogger", "mtl", "network", "optparse-applicative", "process", "text", "time", "unix", "unix-compat", "utf8-string" }
	"github" -> { "HTTP", "aeson", "attoparsec", "bytestring", "case-insensitive", "conduit", "containers", "data-default", "failure", "hashable", "http-conduit", "http-types", "network", "old-locale", "text", "time", "unordered-containers", "vector" }
	"github-backup" -> { "IfElse", "MissingH", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "github", "hslogger", "mtl", "network", "pretty-show", "process", "text", "unix", "unix-compat" }
	"github-post-receive" -> { "aeson", "bytestring", "conduit", "email-validate", "http-types", "text", "wai", "warp" }
	"gitignore" -> { "aeson", "base64-bytestring", "bytestring", "http-conduit", "network", "safe", "text" }
	"gitit" -> { "ConfigFile", "HStringTemplate", "HTTP", "SHA", "base64-bytestring", "blaze-html", "bytestring", "cgi", "containers", "directory", "feed", "filepath", "filestore", "ghc", "ghc-paths", "happstack-server", "highlighting-kate", "hslogger", "json", "mtl", "network", "old-locale", "old-time", "pandoc", "pandoc-types", "parsec", "pretty", "process", "random", "recaptcha", "safe", "tagsoup", "text", "time", "url", "utf8-string", "xhtml", "xml", "xss-sanitize", "zlib" }
	"gitlib" -> { "base16-bytestring", "bytestring", "conduit", "containers", "directory", "failure", "filepath", "hashable", "lifted-base", "monad-control", "mtl", "resourcet", "semigroups", "tagged", "text", "time", "transformers", "unix", "unordered-containers" }
	"gitlib-cmdline" -> { "bytestring", "conduit", "containers", "directory", "failure", "gitlib", "monad-control", "mtl", "old-locale", "parsec", "process-extras", "shelly", "system-filepath", "tagged", "text", "time", "transformers", "transformers-base", "unordered-containers" }
	"gitlib-cross" -> {  }
	"gitlib-libgit2" -> { "bytestring", "conduit", "containers", "directory", "failure", "fast-logger", "filepath", "gitlib", "hlibgit2", "lifted-async", "lifted-base", "missing-foreign", "mmorph", "monad-control", "monad-logger", "monad-loops", "mtl", "resourcet", "stm", "stm-conduit", "tagged", "template-haskell", "text", "text-icu", "time", "transformers", "transformers-base" }
	"gitlib-s3" -> { "aeson", "attempt", "aws", "bifunctors", "binary", "bytestring", "conduit", "data-default", "directory", "filepath", "ghc-prim", "gitlib", "gitlib-libgit2", "hlibgit2", "http-conduit", "lens", "lifted-base", "monad-control", "monad-logger", "resourcet", "retry", "split", "stm", "template-haskell", "text", "time", "transformers", "unordered-containers" }
	"gitlib-sample" -> { "failure", "gitlib", "mtl", "transformers" }
	"gitlib-test" -> { "HUnit", "bytestring", "conduit", "failure", "gitlib", "hspec", "hspec-expectations", "monad-control", "tagged", "text", "time", "transformers" }
	"gitlib-utils" -> { "bytestring", "conduit", "data-default", "failure", "gitlib", "hex", "lifted-base", "system-fileio", "system-filepath", "tagged", "text", "transformers", "unordered-containers" }
	"gl-capture" -> { "OpenGL", "bytestring" }
	"glade" -> { "glib", "gtk" }
	"gladexml-accessor" -> { "HaXml", "glade", "template-haskell" }
	"glapp" -> { "GLFW-b", "OpenGL", "containers", "lens", "mtl" }
	"glib" -> { "containers", "utf8-string" }
	"glider-nlp" -> { "containers", "text" }
	"glintcollider" -> { "ppm", "split" }
	"global-config" -> { "data-default", "global-variables", "transformers" }
	"global-lock" -> {  }
	"global-variables" -> { "containers", "stm" }
	"glome-hs" -> { "GLUT", "GlomeTrace", "GlomeVec", "OpenGL", "array", "haskell98", "parallel", "random", "time" }
	"gloss" -> { "GLUT", "OpenGL", "bmp", "bytestring", "containers", "ghc-prim" }
	"gloss-accelerate" -> { "accelerate", "accelerate-cuda", "gloss" }
	"gloss-banana" -> { "gloss", "reactive-banana" }
	"gloss-devil" -> { "bytestring", "gloss", "repa", "repa-devil" }
	"gloss-examples" -> { "bmp", "bytestring", "containers", "ghc-prim", "gloss", "gloss-raster", "random", "repa", "repa-algorithms", "repa-io", "vector" }
	"gloss-game" -> { "gloss", "gloss-juicy" }
	"gloss-juicy" -> { "JuicyPixels", "bmp", "bytestring", "gloss", "vector" }
	"gloss-raster" -> { "containers", "ghc-prim", "gloss", "repa" }
	"gloss-raster-accelerate" -> { "accelerate", "accelerate-cuda", "gloss", "gloss-accelerate" }
	"glpk-hs" -> { "array", "containers", "deepseq", "mtl" }
	"gluturtle" -> { "GLUT", "convertible", "stm", "yjsvg", "yjtools" }
	"gmap" -> { "AvlTree", "COrdering", "QuickCheck", "array", "random" }
	"gmndl" -> { "OpenGL", "array", "gtk", "gtkglext", "hmatrix", "mtl", "priority-queue", "qd" }
	"gnome-desktop" -> { "directory", "gconf", "glib", "gtk", "random" }
	"gnome-keyring" -> { "bytestring", "text", "time" }
	"gnomevfs" -> { "array", "containers", "glib", "gtk", "haskell98", "mtl" }
	"gnuidn" -> { "bytestring", "text" }
	"gnuplot" -> { "array", "containers", "data-accessor", "data-accessor-transformers", "deepseq", "filepath", "old-locale", "process", "temporary", "time", "transformers", "utility-ht" }
	"gnutls" -> { "bytestring", "monads-tf", "transformers" }
	"goa" -> { "directory", "filepath", "process" }
	"gofer-prelude" -> {  }
	"google-dictionary" -> { "HTTP", "aeson", "bytestring", "lens", "mtl" }
	"google-html5-slide" -> { "blaze-html", "cmdargs", "data-default", "hamlet", "pandoc", "shakespeare-css", "syb", "text", "time" }
	"google-mail-filters" -> { "containers", "google-search", "old-locale", "text", "time", "xml-conduit" }
	"google-search" -> { "free", "nats", "old-locale", "text", "time" }
	"googleplus" -> { "aeson", "attoparsec", "bytestring", "containers", "enumerator", "haskell98", "http-enumerator", "http-types", "mtl", "text", "time", "timerep", "transformers", "url" }
	"gopherbot" -> { "HDBC", "HDBC-postgresql", "MissingH", "network", "parsec", "unix" }
	"gpah" -> { "Cabal", "HTTP", "bytestring", "cmdargs", "containers", "csv", "deepseq", "directory", "filepath", "haskell-src-exts", "hint", "network", "process", "syb", "tar", "uniplate", "uu-parsinglib", "zlib" }
	"gpcsets" -> {  }
	"gpolyline" -> { "split" }
	"gps" -> { "gpx-conduit", "pretty", "prettyclass", "statistics", "time", "vector" }
	"gps2htmlReport" -> { "Chart", "GPX", "bytestring", "cairo", "cmdargs", "colour", "data-accessor", "directory", "filepath", "gd", "gps", "hsmagick", "html", "http-enumerator", "process", "random", "tar", "time", "xsd" }
	"gpx-conduit" -> { "attoparsec", "conduit", "filepath", "monad-control", "old-locale", "text", "time", "void", "xml-conduit", "xml-types" }
	"graceful" -> { "directory", "network", "stm", "unix" }
	"grammar-combinators" -> { "MaybeT", "containers", "enumerable", "fgl", "graphviz", "mtl", "multirec", "parsec", "template-haskell", "text", "uu-parsinglib" }
	"grapefruit-examples" -> { "colour", "containers", "fraction", "grapefruit-frp", "grapefruit-records", "grapefruit-ui" }
	"grapefruit-frp" -> { "TypeCompose", "arrows", "containers", "fingertree", "semigroups" }
	"grapefruit-records" -> { "arrows", "grapefruit-frp" }
	"grapefruit-ui" -> { "arrows", "colour", "containers", "fraction", "grapefruit-frp", "grapefruit-records" }
	"grapefruit-ui-gtk" -> { "colour", "containers", "fraction", "glib", "grapefruit-frp", "grapefruit-records", "grapefruit-ui", "gtk" }
	"graph-rewriting" -> { "base-unicode-symbols", "containers", "mtl" }
	"graph-rewriting-cl" -> { "GLUT", "OpenGL", "base-unicode-symbols", "graph-rewriting", "graph-rewriting-gl", "graph-rewriting-layout", "parsec" }
	"graph-rewriting-gl" -> { "AC-Vector", "GLUT", "OpenGL", "base-unicode-symbols", "containers", "graph-rewriting", "graph-rewriting-layout" }
	"graph-rewriting-lambdascope" -> { "GLUT", "IndentParser", "OpenGL", "base-unicode-symbols", "graph-rewriting", "graph-rewriting-gl", "graph-rewriting-layout", "graph-rewriting-strategies", "parsec" }
	"graph-rewriting-layout" -> { "AC-Vector", "base-unicode-symbols", "graph-rewriting" }
	"graph-rewriting-ski" -> { "GLUT", "OpenGL", "base-unicode-symbols", "graph-rewriting", "graph-rewriting-gl", "graph-rewriting-layout", "parsec" }
	"graph-rewriting-strategies" -> { "base-unicode-symbols", "containers", "graph-rewriting" }
	"graph-rewriting-trs" -> { "GLUT", "OpenGL", "base-unicode-symbols", "containers", "directory", "filepath", "graph-rewriting", "graph-rewriting-gl", "graph-rewriting-layout", "uu-parsinglib" }
	"graph-rewriting-ww" -> { "GLUT", "IndentParser", "OpenGL", "base-unicode-symbols", "graph-rewriting", "graph-rewriting-gl", "graph-rewriting-layout", "parsec" }
	"graph-serialize" -> { "array", "bytestring", "containers" }
	"graph-utils" -> { "containers", "fgl", "mtl", "parsec", "syb", "template-haskell" }
	"graph-visit" -> { "containers", "data-lens", "data-lens-template", "mtl" }
	"graph-wrapper" -> { "array", "containers" }
	"graphbuilder" -> { "containers", "mtl" }
	"graphics-drawingcombinators" -> { "FTGL", "OpenGL", "bitmap", "stb-image" }
	"graphics-formats-collada" -> { "OpenGL", "bitmap-opengl", "containers", "hxt", "stb-image", "transformers" }
	"graphicsFormats" -> { "OpenGL", "QuickCheck", "haskell98" }
	"graphicstools" -> { "CV", "bindings-DSL", "containers", "directory", "ghc-prim", "graphicstools", "wx", "wxcore" }
	"graphmod" -> { "containers", "directory", "dotgen", "filepath", "haskell-lexer" }
	"graphs" -> { "array", "containers", "transformers", "void" }
	"graphtype" -> { "containers", "dotgen", "haskell-src-exts", "haskell98", "uniplate" }
	"graphviz" -> { "bytestring", "colour", "containers", "directory", "dlist", "fgl", "filepath", "polyparse", "process", "temporary", "text", "transformers", "wl-pprint-text" }
	"gravatar" -> { "HTTP", "bytestring", "data-default", "pureMD5", "text" }
	"gray-code" -> {  }
	"gray-extended" -> {  }
	"greencard" -> { "array", "containers", "pretty" }
	"greencard-lib" -> { "array", "containers", "greencard", "pretty" }
	"greg-client" -> { "binary", "bytestring", "clock", "hostname", "network", "stm", "system-uuid", "time" }
	"grid" -> { "base-unicode-symbols", "cereal", "containers" }
	"grm" -> { "Cabal", "cmdargs", "directory", "filepath", "parsec", "process", "syb", "wl-pprint" }
	"groom" -> { "haskell-src-exts" }
	"groundhog" -> { "blaze-builder", "bytestring", "containers", "monad-control", "monad-logger", "mtl", "text", "time", "transformers", "transformers-base" }
	"groundhog-mysql" -> { "bytestring", "containers", "groundhog", "monad-control", "monad-logger", "mysql", "mysql-simple", "resource-pool", "text", "time", "transformers" }
	"groundhog-postgresql" -> { "attoparsec", "blaze-builder", "bytestring", "containers", "groundhog", "monad-control", "monad-logger", "postgresql-libpq", "postgresql-simple", "resource-pool", "text", "time", "transformers" }
	"groundhog-sqlite" -> { "bytestring", "containers", "direct-sqlite", "groundhog", "monad-control", "monad-logger", "resource-pool", "text", "transformers", "unordered-containers" }
	"groundhog-th" -> { "bytestring", "containers", "groundhog", "template-haskell", "text", "time", "yaml" }
	"group-with" -> { "containers" }
	"groupoid" -> {  }
	"groupoids" -> { "semigroupoids" }
	"groups" -> {  }
	"gruff" -> { "FTGL", "OpenGL", "OpenGLRaw", "Vec", "bytestring", "containers", "directory", "filepath", "gruff", "gtk", "gtkglext", "mtl", "old-locale", "parallel", "qd", "qd-vec", "ruff", "time" }
	"gruff-examples" -> { "Vec", "containers", "data-memocombinators", "filepath", "gruff", "qd", "qd-vec", "random", "ruff" }
	"gsasl" -> { "bytestring", "transformers" }
	"gsc-weighting" -> { "hierarchical-clustering" }
	"gsl-random" -> { "vector" }
	"gsl-random-fu" -> { "gsl-random", "random-fu" }
	"gsmenu" -> { "X11", "containers", "mtl", "parsec", "permute", "sindre", "text" }
	"gstreamer" -> { "array", "bytestring", "directory", "glib", "mtl" }
	"gt-tools" -> { "HTTP", "containers", "extensible-exceptions", "haskeline", "json", "mtl", "unix", "url", "utf8-string" }
	"gtfs" -> { "csv", "directory", "filepath", "rowrecord", "split" }
	"gtk" -> { "array", "bytestring", "cairo", "containers", "gio", "glib", "mtl", "pango" }
	"gtk-jsinput" -> { "gtk", "json", "transformers" }
	"gtk-mac-integration" -> { "array", "containers", "glib", "gtk", "mtl" }
	"gtk-serialized-event" -> { "array", "containers", "glib", "gtk", "haskell98", "mtl" }
	"gtk-simple-list-view" -> { "gtk" }
	"gtk-toggle-button-list" -> { "gtk" }
	"gtk-toy" -> { "containers", "gtk" }
	"gtk-traymanager" -> { "glib", "gtk" }
	"gtk2hs-buildtools" -> { "array", "containers", "directory", "filepath", "pretty", "process", "random" }
	"gtk2hs-cast-glade" -> { "glade", "gtk", "gtk2hs-cast-glib", "hint", "template-haskell" }
	"gtk2hs-cast-glib" -> { "glib" }
	"gtk2hs-cast-gnomevfs" -> { "gnomevfs", "gtk2hs-cast-glib", "gtk2hs-cast-th", "hint", "template-haskell" }
	"gtk2hs-cast-gtk" -> { "gtk", "gtk2hs-cast-glib", "gtk2hs-cast-th", "hint", "template-haskell" }
	"gtk2hs-cast-gtkglext" -> { "gtk2hs-cast-glib", "gtk2hs-cast-th", "gtkglext", "hint", "template-haskell" }
	"gtk2hs-cast-gtksourceview2" -> { "gtk2hs-cast-glib", "gtk2hs-cast-th", "gtksourceview2", "hint", "template-haskell" }
	"gtk2hs-cast-th" -> { "hint", "template-haskell" }
	"gtk2hs-hello" -> { "glib", "gtk3", "transformers" }
	"gtk2hs-rpn" -> { "cairo", "glib", "gtk", "mtl" }
	"gtk3" -> { "array", "bytestring", "cairo", "containers", "gio", "glib", "gtk3", "mtl", "pango", "time", "transformers" }
	"gtk3-mac-integration" -> { "array", "containers", "glib", "gtk3", "mtl" }
	"gtkglext" -> { "glib", "gtk", "pango" }
	"gtkimageview" -> { "array", "containers", "glib", "gtk", "haskell98", "mtl" }
	"gtkrsync" -> { "MissingH", "gconf", "glade", "gtk", "process", "regex-posix", "unix" }
	"gtksourceview2" -> { "array", "containers", "glib", "gtk", "mtl" }
	"gtksourceview3" -> { "array", "containers", "glib", "gtk3", "mtl" }
	"guarded-rewriting" -> { "instant-generics" }
	"guess-combinator" -> { "HList" }
	"gulcii" -> { "cairo", "containers", "filepath", "gtk" }
	"gutenberg-fibonaccis" -> {  }
	"h-booru" -> { "hxt", "template-haskell" }
	"h2048" -> { "MonadRandom", "h2048", "mtl", "text", "transformers", "vty", "vty-ui" }
	"hArduino" -> { "bytestring", "containers", "mtl", "serialport", "time" }
	"hBDD" -> {  }
	"hBDD-CUDD" -> { "containers", "deepseq", "hBDD", "unix" }
	"hCsound" -> { "monads-tf", "transformers", "vector" }
	"hDFA" -> { "containers", "directory", "process" }
	"hF2" -> { "cereal", "vector" }
	"hGelf" -> { "QuickCheck", "aeson", "bytestring", "cereal", "network", "old-time", "pureMD5", "text", "time", "zlib" }
	"hMollom" -> { "Crypto", "HTTP", "aeson", "attoparsec", "bytestring", "dataenc", "ghc-prim", "mtl", "old-locale", "old-time", "pureMD5", "random", "time" }
	"hOpenPGP" -> { "attoparsec", "base64-bytestring", "bytestring", "bzlib", "cereal", "cereal-conduit", "conduit", "containers", "crypto-cipher-types", "crypto-pubkey", "crypto-random", "cryptocipher", "cryptohash", "data-default", "errors", "incremental-parser", "ixset", "lens", "monad-loops", "mtl", "nettle", "openpgp-asciiarmor", "securemem", "split", "text", "time", "transformers", "zlib" }
	"hPDB" -> { "AC-Vector", "Octree", "QuickCheck", "bytestring", "containers", "deepseq", "directory", "ghc-prim", "iterable", "mmap", "mtl", "parallel", "template-haskell", "text", "text-format", "vector", "zlib" }
	"hPDB-examples" -> { "AC-Vector", "GLUT", "Octree", "OpenGL", "QuickCheck", "bytestring", "containers", "deepseq", "directory", "ghc-prim", "hPDB", "iterable", "mtl", "template-haskell", "text", "text-format", "vector" }
	"hPushover" -> { "aeson", "bytestring", "http-conduit", "network" }
	"hR" -> { "array", "containers", "unix" }
	"hS3" -> { "Crypto", "HTTP", "MissingH", "bytestring", "dataenc", "hxt", "network", "old-locale", "old-time", "random", "regex-compat", "utf8-string" }
	"hSimpleDB" -> { "Crypto", "HTTP", "bytestring", "dataenc", "hxt", "network", "old-locale", "old-time", "utf8-string" }
	"hTalos" -> { "bytestring" }
	"hTensor" -> { "containers", "hmatrix", "random" }
	"hVOIDP" -> { "array", "hmatrix" }
	"hacanon-light" -> { "mtl", "template-haskell" }
	"hack" -> { "bytestring", "data-default" }
	"hack-contrib" -> { "ansi-wl-pprint", "bytestring", "cgi", "containers", "data-default", "directory", "filepath", "hack", "haskell98", "mps", "network", "old-locale", "old-time", "time", "utf8-string" }
	"hack-contrib-press" -> { "bytestring", "bytestring-class", "containers", "hack", "json", "mtl", "parsec", "press" }
	"hack-frontend-happstack" -> { "bytestring", "containers", "hack", "happstack-server", "network", "utf8-string" }
	"hack-frontend-monadcgi" -> { "bytestring", "cgi", "containers", "hack" }
	"hack-handler-cgi" -> { "bytestring", "hack" }
	"hack-handler-epoll" -> { "HTTP", "containers", "data-default", "epoll", "failure", "hack", "network", "unix", "utf8-string" }
	"hack-handler-evhttp" -> { "bytestring", "bytestring-class", "containers", "data-default", "hack", "hack-contrib", "network" }
	"hack-handler-fastcgi" -> { "bytestring", "hack", "hack-handler-cgi" }
	"hack-handler-happstack" -> { "bytestring", "cgi", "containers", "data-default", "hack", "happstack-server", "mtl", "network" }
	"hack-handler-hyena" -> { "bytestring", "containers", "data-default", "hack", "hyena", "network" }
	"hack-handler-kibro" -> { "cgi", "data-default", "hack", "kibro", "network" }
	"hack-handler-simpleserver" -> { "bytestring", "failure", "hack", "network", "web-encodings" }
	"hack-middleware-cleanpath" -> { "bytestring", "hack", "split", "web-encodings" }
	"hack-middleware-clientsession" -> { "clientsession", "hack", "old-locale", "predicates", "time", "web-encodings" }
	"hack-middleware-gzip" -> { "hack", "split", "zlib" }
	"hack-middleware-jsonp" -> { "bytestring", "bytestring-class", "hack", "web-encodings" }
	"hack2" -> { "bytestring", "data-default" }
	"hack2-contrib" -> { "air", "bytestring", "cgi", "containers", "data-default", "directory", "filepath", "hack2", "network", "old-locale", "time", "utf8-string" }
	"hack2-contrib-extra" -> { "air", "air-extra", "bytestring", "cgi", "containers", "data-default", "directory", "filepath", "hack2", "hack2-contrib", "network", "old-locale", "old-time", "time" }
	"hack2-handler-happstack-server" -> { "bytestring", "cgi", "containers", "data-default", "enumerator", "hack2", "happstack-server", "mtl", "network" }
	"hack2-handler-mongrel2-http" -> { "aeson", "air", "attoparsec", "blaze-builder", "blaze-textual", "bytestring", "containers", "data-default", "directory", "enumerator", "hack2", "mtl", "network", "safe", "stm", "text", "unix", "zeromq-haskell" }
	"hack2-handler-snap-server" -> { "air", "blaze-builder", "bytestring", "case-insensitive", "containers", "data-default", "directory", "enumerator", "hack2", "mtl", "network", "snap-core", "snap-server" }
	"hack2-handler-warp" -> { "air", "data-default", "hack2", "hack2-interface-wai", "warp" }
	"hack2-interface-wai" -> { "air", "bytestring", "case-insensitive", "containers", "data-default", "hack2", "http-types", "mtl", "network", "safe", "wai" }
	"hackage-db" -> { "Cabal", "bytestring", "containers", "directory", "filepath", "tar", "utf8-string" }
	"hackage-plot" -> { "bytestring", "containers", "directory", "download-curl", "filepath", "gnuplot", "old-locale", "old-time", "parsedate" }
	"hackage-proxy" -> { "Cabal", "basic-prelude", "blaze-builder", "bytestring", "case-insensitive", "conduit", "containers", "filepath", "http-client", "http-client-conduit", "http-conduit", "http-types", "optparse-applicative", "tar", "text", "transformers", "unordered-containers", "wai", "warp", "zlib", "zlib-conduit" }
	"hackage-server" -> { "Cabal", "HStringTemplate", "HTTP", "acid-state", "aeson", "array", "async", "attoparsec", "base16-bytestring", "base64-bytestring", "binary", "blaze-builder", "bytestring", "cereal", "containers", "crypto-api", "csv", "deepseq", "directory", "filepath", "happstack-server", "hscolour", "hslogger", "lifted-base", "mime-mail", "mtl", "network", "old-locale", "parsec", "pretty", "process", "pureMD5", "random", "rss", "safecopy", "snowball", "split", "stm", "tar", "text", "time", "tokenize", "transformers", "unix", "unordered-containers", "vector", "xhtml", "zlib" }
	"hackage-sparks" -> { "bytestring", "directory", "download", "filepath", "hsparklines", "old-locale", "old-time", "parsedate", "tagsoup" }
	"hackage2hwn" -> { "download", "feed", "tagsoup" }
	"hackage2twitter" -> { "feed", "feed2twitter" }
	"hackager" -> { "Cabal", "containers", "directory", "filepath", "mtl", "process" }
	"hackport" -> { "HTTP", "MissingH", "array", "bytestring", "containers", "deepseq", "directory", "extensible-exceptions", "filepath", "mtl", "network", "old-locale", "old-time", "parsec", "pretty", "process", "regex-compat", "tar", "time", "unix", "xml", "zlib" }
	"hactors" -> { "stm" }
	"haddock" -> { "Cabal", "array", "bytestring", "containers", "deepseq", "directory", "filepath", "ghc", "ghc-paths", "haddock", "xhtml" }
	"haddock-leksah" -> { "Cabal", "array", "containers", "directory", "filepath", "ghc", "ghc-paths", "pretty" }
	"haeredes" -> { "HUnit", "MissingH", "QuickCheck", "bytestring", "cmdargs", "dns", "iproute", "parallel-io", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"haggis" -> { "HDBC", "HDBC-sqlite3", "MissingH", "blaze-builder", "bytestring", "containers", "convertible", "directory", "filemanip", "filepath", "haggis", "hquery", "network", "old-locale", "optparse-applicative", "pandoc", "pandoc-types", "parsec", "rss", "split", "text", "time", "unix", "xmlhtml" }
	"haha" -> { "containers", "time" }
	"hails" -> { "SHA", "authenticate", "base64-bytestring", "binary", "blaze-builder", "bson", "bytestring", "conduit", "containers", "cookie", "directory", "failure", "filepath", "ghc-paths", "hails", "http-conduit", "http-types", "lio", "mongoDB", "mtl", "network", "parsec", "resourcet", "text", "time", "transformers", "unix", "wai", "wai-app-static", "wai-extra", "warp" }
	"hails-bin" -> { "bson", "bytestring", "containers", "ghc-paths", "hails", "iterIO", "iterio-server", "mongoDB", "mtl" }
	"hake" -> { "directory", "filepath", "mtl", "process", "regexpr", "time", "yjtools" }
	"hakismet" -> { "HTTP", "network" }
	"hako" -> { "haskell-src-meta", "parsec", "template-haskell", "text", "transformers" }
	"hakyll" -> { "binary", "blaze-html", "blaze-markup", "bytestring", "cmdargs", "containers", "cryptohash", "data-default", "deepseq", "directory", "filepath", "fsnotify", "http-conduit", "http-types", "lrucache", "mtl", "network", "old-locale", "old-time", "pandoc", "pandoc-citeproc", "parsec", "process", "random", "regex-base", "regex-tdfa", "snap-core", "snap-server", "system-filepath", "tagsoup", "text", "time" }
	"hakyll-agda" -> { "Agda", "containers", "directory", "filepath", "hakyll", "mtl", "pandoc", "transformers", "xhtml" }
	"hakyll-blaze-templates" -> { "blaze-html", "blaze-markup", "hakyll" }
	"hakyll-contrib" -> { "directory", "filepath", "hakyll", "pandoc" }
	"hakyll-contrib-links" -> { "binary", "containers", "hakyll", "pandoc", "pandoc-types", "parsec" }
	"hakyll-convert" -> { "binary", "bytestring", "cmdargs", "directory", "feed", "filepath", "hakyll", "hakyll-convert", "old-locale", "text", "time", "xml" }
	"hakyll-elm" -> { "Elm", "blaze-html", "blaze-markup", "hakyll", "mtl" }
	"halberd" -> { "Cabal", "containers", "halberd", "haskell-names", "haskell-packages", "haskell-src-exts", "mtl", "safe", "syb", "tagged" }
	"halfs" -> { "HFuse", "QuickCheck", "array", "bytestring", "cereal", "containers", "directory", "filepath", "fingertree", "halfs", "mtl", "random", "time", "unix" }
	"halipeto" -> { "HaXml", "directory", "pandoc" }
	"haltavista" -> { "hint", "process" }
	"hamid" -> { "HCodecs", "newtype" }
	"hamlet" -> { "shakespeare" }
	"hampp" -> { "Glob", "bytestring", "containers", "directory", "filepath", "preprocessor-tools" }
	"hamtmap" -> { "array", "deepseq", "hashable" }
	"hamusic" -> { "HaXml", "containers", "directory", "filepath", "haskore", "musicxml", "non-negative", "process" }
	"handa-gdata" -> { "GenericPretty", "HTTP", "base64-bytestring", "binary", "bytestring", "case-insensitive", "cmdargs", "directory", "filepath", "http-conduit", "json", "network", "old-locale", "pretty", "process", "pureMD5", "random", "regex-posix", "resourcet", "split", "time", "unix-compat", "utf8-string", "xml" }
	"hangman" -> { "mtl", "random", "utility-ht" }
	"hans" -> { "bytestring", "cereal", "containers", "fingertree", "hans", "monadLib", "old-locale", "random", "time", "unix" }
	"happindicator" -> { "array", "bytestring", "containers", "glib", "gtk", "mtl" }
	"happraise" -> { "directory", "filepath" }
	"happs-hsp" -> { "HAppS-Server", "bytestring", "hsp", "mtl", "plugins" }
	"happs-hsp-template" -> { "HAppS-Server", "RJson", "bytestring", "containers", "directory", "filepath", "hinotify", "hsp", "mtl", "network", "plugins" }
	"happs-tutorial" -> { "DebugTraceHelpers", "HStringTemplate", "HStringTemplateHelpers", "HTTP", "bytestring", "containers", "directory", "filepath", "happstack", "happstack-data", "happstack-helpers", "happstack-ixset", "happstack-server", "happstack-state", "hscolour", "mtl", "old-time", "parsec", "pretty", "pureMD5", "safe", "syb" }
	"happstack" -> { "happstack-server" }
	"happstack-auth" -> { "bytestring", "containers", "convertible", "happstack", "happstack-data", "happstack-ixset", "happstack-server", "happstack-state", "mtl", "old-time", "random" }
	"happstack-authenticate" -> { "QuickCheck", "acid-state", "aeson", "authenticate", "blaze-html", "bytestring", "containers", "fb", "happstack-server", "http-conduit", "http-types", "ixset", "mtl", "pwstore-purehaskell", "reform", "reform-blaze", "reform-happstack", "safecopy", "text", "time", "unordered-containers", "web-routes", "web-routes-happstack" }
	"happstack-clientsession" -> { "bytestring", "cereal", "clientsession", "happstack-server", "monad-control", "mtl", "safecopy", "transformers-base" }
	"happstack-contrib" -> { "HTTP", "HUnit", "bytestring", "directory", "happstack-data", "happstack-ixset", "happstack-server", "happstack-state", "happstack-util", "mtl", "network", "old-time", "syb", "unix" }
	"happstack-data" -> { "binary", "bytestring", "containers", "mtl", "pretty", "syb", "syb-with-class", "syb-with-class-instances-text", "template-haskell", "text", "time" }
	"happstack-dlg" -> { "applicative-extras", "bytestring", "containers", "formlets", "happstack-server", "mtl", "random", "template-haskell", "time", "xhtml" }
	"happstack-facebook" -> { "HTTP", "RJson", "applicative-extras", "bytestring", "containers", "filepath", "happstack", "happstack-data", "happstack-hsp", "happstack-ixset", "happstack-server", "happstack-state", "happstack-util", "harp", "hsp", "hsx", "html", "json", "mtl", "network", "old-time", "random", "syb", "text", "time", "utf8-string", "web-routes", "web-routes-mtl" }
	"happstack-fastcgi" -> { "bytestring", "cgi", "containers", "fastcgi", "happstack-server", "mtl", "utf8-string" }
	"happstack-fay" -> { "aeson", "fay", "happstack-fay-ajax", "happstack-server", "mtl" }
	"happstack-fay-ajax" -> { "fay-base", "fay-jquery" }
	"happstack-foundation" -> { "acid-state", "happstack-hsp", "happstack-server", "hsp", "lifted-base", "monad-control", "mtl", "reform", "reform-happstack", "reform-hsp", "safecopy", "text", "web-routes", "web-routes-happstack", "web-routes-hsp", "web-routes-th" }
	"happstack-hamlet" -> { "happstack-server", "shakespeare", "text" }
	"happstack-heist" -> { "blaze-builder", "bytestring", "either", "filepath", "happstack-server", "heist", "mtl", "text" }
	"happstack-helpers" -> { "DebugTraceHelpers", "HSH", "HStringTemplate", "HStringTemplateHelpers", "HTTP", "MissingH", "PBKDF2", "bytestring", "containers", "directory", "filepath", "happstack-data", "happstack-ixset", "happstack-server", "happstack-state", "haskell98", "hscolour", "mtl", "network", "old-time", "parsec", "pureMD5", "random", "safe", "syb", "text", "utf8-string" }
	"happstack-hsp" -> { "bytestring", "happstack-server", "harp", "hsp", "hsx2hs", "mtl", "syb", "text", "utf8-string" }
	"happstack-hstringtemplate" -> { "HStringTemplate", "bytestring", "happstack-server", "hslogger", "mtl" }
	"happstack-ixset" -> { "containers", "happstack-data", "happstack-util", "mtl", "syb", "syb-with-class", "template-haskell" }
	"happstack-jmacro" -> { "base64-bytestring", "bytestring", "cereal", "digest", "happstack-server", "jmacro", "text", "utf8-string", "wl-pprint-text" }
	"happstack-lite" -> { "bytestring", "happstack-server", "mtl", "text" }
	"happstack-monad-peel" -> { "happstack-server", "monad-peel", "mtl", "transformers" }
	"happstack-plugins" -> { "happstack-server", "mtl", "plugins-auto", "template-haskell", "th-lift" }
	"happstack-server" -> { "base64-bytestring", "blaze-html", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "hslogger", "html", "monad-control", "mtl", "network", "old-locale", "parsec", "process", "sendfile", "syb", "system-filepath", "template-haskell", "text", "threads", "time", "time-compat", "transformers", "transformers-base", "unix", "utf8-string", "xhtml", "zlib" }
	"happstack-server-tls" -> { "HsOpenSSL", "bytestring", "extensible-exceptions", "happstack-server", "hslogger", "network", "sendfile", "time", "unix" }
	"happstack-state" -> { "binary", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "happstack-data", "happstack-util", "hslogger", "mtl", "old-time", "random", "stm", "syb", "template-haskell", "unix" }
	"happstack-static-routing" -> { "containers", "happstack-server", "list-tries", "transformers" }
	"happstack-util" -> { "array", "bytestring", "directory", "extensible-exceptions", "filepath", "hslogger", "mtl", "network", "old-locale", "old-time", "parsec", "process", "random", "template-haskell", "time", "unix", "unix-compat" }
	"happstack-yui" -> { "boomerang", "bytestring", "containers", "directory", "happstack-jmacro", "happstack-server", "hsp", "interpolatedstring-perl6", "jmacro", "mtl", "pretty", "template-haskell", "text", "web-routes", "web-routes-boomerang", "web-routes-happstack", "web-routes-th" }
	"happy" -> { "array", "containers", "mtl" }
	"happy-meta" -> { "array", "containers", "haskell-src-meta", "mtl", "template-haskell" }
	"harchive" -> { "binary", "network", "parsec", "unix", "zlib" }
	"hark" -> { "bytestring", "directory", "filepath", "haskell98", "mtl", "old-locale", "old-time", "regex-pcre" }
	"haroonga" -> { "bindings-DSL", "monad-control", "resourcet", "transformers" }
	"harp" -> {  }
	"harpy" -> { "array", "containers", "disassembler", "mtl", "parsec", "pretty", "template-haskell" }
	"has" -> { "QuickCheck" }
	"has-th" -> { "has", "template-haskell" }
	"hascal" -> { "numbers" }
	"hascat" -> { "HTTP", "HaXml", "bytestring", "hascat-lib", "hascat-setup", "hascat-system", "haxr", "html", "network", "unix" }
	"hascat-lib" -> { "HTTP", "HaXml", "bytestring", "containers", "directory", "haskell98", "html", "mtl", "network", "old-locale", "old-time", "parsec", "plugins", "xhtml" }
	"hascat-setup" -> { "directory", "hascat-lib", "hascat-system", "haskell98", "plugins" }
	"hascat-system" -> { "HTTP", "HaXml", "bytestring", "containers", "hascat-lib", "mtl", "network", "old-time", "parsec", "plugins", "unix" }
	"hash" -> { "bifunctors", "bytestring", "data-default", "generic-deriving", "hashable", "lens", "transformers" }
	"hashable" -> { "bytestring", "ghc-prim", "integer-gmp", "text" }
	"hashable-extras" -> { "bifunctors", "bytestring", "generic-deriving", "hashable", "transformers" }
	"hashable-generics" -> { "ghc-prim", "hashable" }
	"hashed-storage" -> { "binary", "bytestring", "containers", "dataenc", "directory", "extensible-exceptions", "filepath", "mmap", "mtl", "zlib" }
	"hashmap" -> { "containers", "deepseq", "hashable" }
	"hashring" -> { "containers", "hashable" }
	"hashtables" -> { "ghc-prim", "hashable", "primitive", "vector" }
	"hasim" -> { "containers", "mtl" }
	"hask-home" -> { "Cabal", "directory", "hmarkup", "hsemail", "network", "parsec", "process", "regex-compat", "xhtml" }
	"haskades" -> { "bytestring", "containers", "errors", "haskell-src", "text", "text-format" }
	"haskarrow" -> { "cmdargs", "containers", "cpphs", "directory", "her-lexer", "split" }
	"haskdeep" -> { "attoparsec", "attoparsec-conduit", "base16-bytestring", "bytestring", "cereal", "conduit", "containers", "crypto-api", "crypto-conduit", "cryptohash", "cryptohash-cryptoapi", "filesystem-conduit", "old-locale", "optparse-applicative", "regex-tdfa", "regex-tdfa-text", "system-fileio", "system-filepath", "text", "time" }
	"haskdogs" -> { "Cabal", "HSH", "filepath" }
	"haskeem" -> { "containers", "directory", "haskeline", "haskell98", "mtl", "network", "old-time", "parsec", "process", "random", "unix" }
	"haskeline" -> { "bytestring", "containers", "directory", "filepath", "terminfo", "transformers", "unix", "utf8-string" }
	"haskeline-class" -> { "haskeline", "mtl" }
	"haskell-aliyun" -> { "Crypto", "aeson", "base64-bytestring", "basic-prelude", "blaze-builder", "bytestring", "case-insensitive", "conduit", "data-default", "http-conduit", "http-types", "lifted-base", "monad-control", "old-locale", "resourcet", "safe", "system-filepath", "text", "time", "transformers", "transformers-base", "vector", "xml2json" }
	"haskell-awk" -> { "MonadCatchIO-mtl", "bytestring", "containers", "directory", "easy-file", "filepath", "haskell-src-exts", "hint", "network", "process", "stringsearch", "time" }
	"haskell-bcrypt" -> { "bytestring" }
	"haskell-cnc" -> { "HSH", "HUnit", "MissingH", "array", "bytestring", "containers", "directory", "extensible-exceptions", "ghc-prim", "mtl", "process", "random", "time", "unix" }
	"haskell-coffee" -> { "process" }
	"haskell-docs" -> { "containers", "ghc", "ghc-paths", "haddock", "monad-loops" }
	"haskell-ftp" -> { "basic-prelude", "bytestring", "case-insensitive", "conduit", "directory", "lifted-base", "monad-control", "network", "network-conduit", "process-conduit", "system-filepath", "text", "transformers", "transformers-base", "unix" }
	"haskell-generate" -> { "containers", "haskell-src-exts", "template-haskell", "transformers" }
	"haskell-in-space" -> { "HGL", "random" }
	"haskell-lexer" -> {  }
	"haskell-modbus" -> { "array", "bytestring", "cereal" }
	"haskell-mpi" -> { "array", "bytestring", "cereal", "extensible-exceptions" }
	"haskell-names" -> { "Cabal", "aeson", "bytestring", "containers", "data-lens", "data-lens-template", "filepath", "haskell-packages", "haskell-src-exts", "hse-cpp", "mtl", "tagged", "transformers", "traverse-with-class", "type-eq", "uniplate" }
	"haskell-openflow" -> { "bytestring", "cereal", "network", "network-info" }
	"haskell-packages" -> { "Cabal", "aeson", "bytestring", "containers", "deepseq", "directory", "either", "filepath", "haskell-src-exts", "hse-cpp", "mtl", "optparse-applicative", "tagged" }
	"haskell-pdf-presenter" -> { "bytestring", "cairo", "containers", "directory", "filepath", "glib", "gtk", "old-locale", "poppler", "template-haskell", "time", "zlib" }
	"haskell-platform-test" -> { "Cabal", "GLUT", "HTTP", "HUnit", "OpenGL", "QuickCheck", "array", "bytestring", "cgi", "containers", "deepseq", "directory", "extensible-exceptions", "fgl", "filepath", "ghc", "ghc-prim", "haskell-src", "haskell98", "hpc", "html", "mtl", "network", "old-locale", "old-time", "parallel", "parsec", "pretty", "process", "random", "regex-base", "regex-compat", "regex-posix", "stm", "syb", "template-haskell", "time", "unix", "xhtml", "zlib" }
	"haskell-qrencode" -> { "bytestring" }
	"haskell-reflect" -> { "MonadCatchIO-mtl", "containers", "hint", "mtl", "parsec", "template-haskell", "transformers" }
	"haskell-spacegoo" -> { "aeson", "bytestring", "conduit", "mtl", "network-conduit", "pretty", "pretty-show", "text", "vector", "vector-space" }
	"haskell-src" -> { "array", "pretty", "syb" }
	"haskell-src-exts" -> { "array", "cpphs", "pretty" }
	"haskell-src-exts-qq" -> { "haskell-src-exts", "haskell-src-meta", "syb", "template-haskell" }
	"haskell-src-meta" -> { "haskell-src-exts", "pretty", "syb", "template-haskell", "th-orphans", "uniplate" }
	"haskell-src-meta-mwotton" -> { "containers", "ghc-prim", "haskell-src-exts", "pretty", "syb", "template-haskell" }
	"haskell-type-exts" -> { "containers", "haskell-src-exts", "pretty" }
	"haskell-typescript" -> { "process" }
	"haskell-tyrant" -> { "binary", "bytestring", "network" }
	"haskell-updater" -> { "Cabal", "bytestring", "containers", "directory", "filepath", "process" }
	"haskell-xmpp" -> { "HaXml", "array", "html", "mtl", "network", "polyparse", "pretty", "random", "regex-compat", "stm", "utf8-string" }
	"haskell2010" -> { "array", "ghc-prim" }
	"haskell98" -> { "array", "directory", "old-locale", "old-time", "process", "time" }
	"haskell98libraries" -> { "array", "directory", "old-locale", "old-time", "process", "time" }
	"haskelldb" -> { "containers", "directory", "mtl", "old-locale", "old-time", "pretty", "time" }
	"haskelldb-connect-hdbc" -> { "HDBC", "containers", "haskelldb" }
	"haskelldb-connect-hdbc-catchio-mtl" -> { "HDBC", "MonadCatchIO-mtl", "haskelldb", "haskelldb-connect-hdbc", "mtl" }
	"haskelldb-connect-hdbc-catchio-tf" -> { "HDBC", "MonadCatchIO-transformers", "haskelldb", "haskelldb-connect-hdbc", "transformers" }
	"haskelldb-connect-hdbc-catchio-transformers" -> { "HDBC", "MonadCatchIO-transformers", "haskelldb", "haskelldb-connect-hdbc", "transformers" }
	"haskelldb-connect-hdbc-lifted" -> { "HDBC", "haskelldb", "haskelldb-connect-hdbc", "lifted-base", "monad-control", "transformers-base" }
	"haskelldb-dynamic" -> { "haskell98", "haskelldb", "mtl", "plugins" }
	"haskelldb-flat" -> { "containers", "directory", "haskelldb", "mtl", "old-time" }
	"haskelldb-hdbc" -> { "HDBC", "containers", "convertible", "haskelldb", "mtl", "old-time" }
	"haskelldb-hdbc-mysql" -> { "HDBC", "HDBC-mysql", "haskelldb", "haskelldb-hdbc", "mtl" }
	"haskelldb-hdbc-odbc" -> { "HDBC", "HDBC-odbc", "haskelldb", "haskelldb-hdbc", "mtl" }
	"haskelldb-hdbc-postgresql" -> { "HDBC", "HDBC-postgresql", "haskelldb", "haskelldb-hdbc", "mtl" }
	"haskelldb-hdbc-sqlite3" -> { "HDBC", "HDBC-sqlite3", "haskelldb", "haskelldb-hdbc", "mtl" }
	"haskelldb-hsql" -> { "haskelldb", "hsql", "mtl", "old-time" }
	"haskelldb-hsql-mysql" -> { "haskelldb", "haskelldb-hsql", "hsql", "hsql-mysql", "mtl" }
	"haskelldb-hsql-odbc" -> { "haskelldb", "haskelldb-hsql", "hsql", "hsql-odbc", "mtl" }
	"haskelldb-hsql-oracle" -> { "haskelldb", "haskelldb-hsql", "hsql", "hsql-oracle", "mtl" }
	"haskelldb-hsql-postgresql" -> { "haskelldb", "haskelldb-hsql", "hsql", "hsql-postgresql", "mtl" }
	"haskelldb-hsql-sqlite" -> { "haskelldb", "haskelldb-hsql", "hsql", "hsql-sqlite", "mtl" }
	"haskelldb-hsql-sqlite3" -> { "haskelldb", "haskelldb-hsql", "hsql", "hsql-sqlite3", "mtl" }
	"haskelldb-th" -> { "haskelldb", "mtl", "template-haskell" }
	"haskelldb-wx" -> {  }
	"haskelm" -> { "aeson", "binary", "containers", "directory", "haskell-src-exts", "haskell-src-meta", "mtl", "parsec", "pretty", "split", "template-haskell", "temporary", "text", "th-desugar", "unordered-containers", "vector" }
	"haskgame" -> { "SDL", "SDL-ttf", "containers", "haskell98" }
	"haskheap" -> { "aeson", "bytestring", "http-conduit", "http-types", "network", "old-locale", "text", "time", "unordered-containers" }
	"haskhol-core" -> { "containers", "deepseq", "parsec", "pretty", "template-haskell" }
	"haskintex" -> { "HaTeX", "directory", "filepath", "haskintex", "hint", "parsec", "process", "text", "transformers" }
	"haskoin-crypto" -> { "QuickCheck", "binary", "byteable", "bytestring", "containers", "cryptohash", "haskoin-util", "mtl" }
	"haskoin-protocol" -> { "QuickCheck", "binary", "bytestring", "haskoin-crypto", "haskoin-util" }
	"haskoin-script" -> { "QuickCheck", "binary", "bytestring", "haskoin-crypto", "haskoin-protocol", "haskoin-util", "mtl" }
	"haskoin-util" -> { "QuickCheck", "binary", "bytestring", "either", "mtl" }
	"haskoin-wallet" -> { "QuickCheck", "aeson", "aeson-pretty", "binary", "bytestring", "conduit", "containers", "directory", "either", "haskoin-crypto", "haskoin-protocol", "haskoin-script", "haskoin-util", "mtl", "persistent", "persistent-sqlite", "persistent-template", "text", "time", "unordered-containers", "vector", "yaml" }
	"haskoon" -> { "MaybeT", "MissingH", "bytestring", "cgi", "directory", "fastcgi", "filepath", "hslogger", "hsp", "hsx", "mtl", "network", "regex-posix", "safe", "utf8-string" }
	"haskoon-httpspec" -> { "HTTP", "bidispec", "bytestring", "haskoon", "hslogger", "httpspec", "mtl", "network" }
	"haskoon-salvia" -> { "HTTP", "bytestring", "cgi", "fclabels", "haskoon", "hslogger", "monads-fd", "mtl", "network", "salvia", "salvia-protocol", "transformers" }
	"haskore" -> { "array", "bytestring", "containers", "data-accessor", "event-list", "haskell-src", "markov-chain", "midi", "non-negative", "parsec", "process", "random", "transformers", "utility-ht" }
	"haskore-realtime" -> { "bytestring", "data-accessor", "directory", "event-list", "haskore", "midi", "non-negative", "old-time", "process", "transformers", "unix" }
	"haskore-supercollider" -> { "array", "bytestring", "containers", "data-accessor", "event-list", "haskore", "haskore-realtime", "hosc", "hsc3", "non-negative", "opensoundcontrol-ht", "process", "random", "supercollider-ht", "transformers", "unix", "utility-ht" }
	"haskore-synthesizer" -> { "data-accessor", "event-list", "haskore", "non-negative", "numeric-prelude", "random", "synthesizer-core", "utility-ht" }
	"haskore-vintage" -> {  }
	"hasktags" -> { "bytestring", "directory", "filepath", "json", "unix", "utf8-string" }
	"haslo" -> { "QuickCheck", "mtl", "old-time", "time", "wtk" }
	"hasloGUI" -> { "QuickCheck", "convertible", "gtk", "haslo", "lenses", "mtl", "old-time", "time", "wtk", "wtk-gtk" }
	"hasparql-client" -> { "HTTP", "monads-fd", "network", "xml" }
	"haspell" -> { "bytestring" }
	"hastache" -> { "blaze-builder", "bytestring", "containers", "directory", "filepath", "ieee754", "mtl", "syb", "text", "transformers", "utf8-string" }
	"hastache-aeson" -> { "aeson", "attoparsec", "bytestring", "containers", "hastache", "text", "unordered-containers", "vector" }
	"haste" -> { "curl", "filepath", "mtl" }
	"haste-compiler" -> { "HTTP", "array", "binary", "blaze-builder", "bytestring", "bzlib", "containers", "data-binary-ieee754", "data-default", "directory", "executable-path", "filepath", "ghc", "ghc-paths", "ghc-prim", "integer-gmp", "monads-tf", "mtl", "network", "process", "random", "shellmate", "system-fileio", "tar", "temporary", "time", "transformers", "utf8-string", "websockets", "zip-archive" }
	"hat" -> { "bytestring", "containers", "directory", "filepath", "haskeline", "haskell-src-exts", "old-locale", "old-time", "process", "random" }
	"hatex-guide" -> { "HaTeX", "blaze-html", "directory", "filepath", "parsec", "text", "time", "transformers" }
	"hath" -> { "HUnit", "MissingH", "QuickCheck", "bytestring", "cmdargs", "dns", "parallel-io", "split", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"hatt" -> { "QuickCheck", "ansi-wl-pprint", "cmdargs", "containers", "haskeline", "hatt", "parsec" }
	"hawitter" -> { "HTTP", "SHA", "base64-string", "bytestring", "clock", "containers", "gconf", "glade", "gtk", "hoauth", "json", "mtl", "network", "old-locale", "parsec", "regex-base", "regex-tdfa", "time", "utf8-string" }
	"haxparse" -> { "binary", "bytestring", "containers", "data-binary-ieee754", "data-default", "haxparse", "mtl", "optparse-applicative", "parsec", "split", "template-haskell", "transformers", "utf8-string", "zlib" }
	"haxr" -> { "HTTP", "HaXml", "array", "base64-bytestring", "blaze-builder", "bytestring", "mtl", "network", "old-locale", "old-time", "template-haskell", "time", "utf8-string" }
	"haxr-th" -> { "haxr", "template-haskell" }
	"haxy" -> { "HTTP", "bytestring", "data-default-class", "hostname", "http-server", "url" }
	"hback" -> { "cairo", "filepath", "glade", "gtk", "haskell98", "process", "svgcairo", "time", "unix" }
	"hbayes" -> { "HUnit", "QuickCheck", "array", "binary", "boxes", "containers", "directory", "filepath", "gamma", "mtl", "mwc-random", "parsec", "pretty", "random", "split", "statistics", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "vector" }
	"hbcd" -> { "Decimal", "bytestring", "digits", "split" }
	"hbeanstalk" -> { "attoparsec", "blaze-builder", "bytestring", "containers", "network" }
	"hbeat" -> { "OpenGL", "SDL", "SDL-mixer", "containers", "mtl", "old-time" }
	"hblas" -> { "primitive", "storable-complex", "vector" }
	"hblock" -> { "aeson", "blaze-markup", "bytestring", "cereal", "containers", "deepseq", "hashable", "path-pieces", "safecopy", "text", "unordered-containers", "uuid", "vector" }
	"hbro" -> { "bytestring", "cond", "containers", "data-default", "directory", "dyre", "filepath", "glib", "gtk", "hbro", "lens", "monad-control", "mtl", "network", "pango", "process", "transformers", "transformers-base", "unix", "webkit", "xdg-basedir", "zeromq4-haskell" }
	"hbro-contrib" -> { "directory", "filepath", "glib", "gtk", "hbro", "monad-control", "mtl", "network", "old-locale", "pango", "process", "text", "time", "transformers-base", "unix", "webkit" }
	"hburg" -> { "array", "containers", "filepath", "haskell98", "mtl" }
	"hcc" -> { "bytestring", "language-c" }
	"hcg-minus" -> { "colour" }
	"hcg-minus-cairo" -> { "cairo", "colour", "filepath", "hcg-minus", "utf8-string" }
	"hcheat" -> { "mps" }
	"hchesslib" -> { "array", "attoparsec", "containers", "text" }
	"hcltest" -> { "bytestring", "concurrent-extra", "directory", "dlist", "either", "filepath", "free", "lens", "lifted-base", "mmorph", "monad-control", "mtl", "optparse-applicative", "process", "random-shuffle", "split", "stm", "tagged", "tasty", "temporary", "text", "transformers", "transformers-base" }
	"hcron" -> { "bytestring", "containers", "directory", "mtl", "old-locale", "pretty", "process", "random", "stm", "time" }
	"hcube" -> { "HaskellForMaths", "QuickCheck", "directory", "text" }
	"hcwiid" -> { "unix" }
	"hdaemonize" -> { "extensible-exceptions", "filepath", "hsyslog", "mtl", "unix" }
	"hdaemonize-buildfix" -> { "extensible-exceptions", "filepath", "hsyslog", "mtl", "unix" }
	"hdbc-postgresql-hstore" -> { "HDBC", "attoparsec", "containers", "text" }
	"hdbc-tuple" -> { "HDBC", "convertible", "typical" }
	"hdbi" -> { "Decimal", "attoparsec", "blaze-builder", "bytestring", "containers", "deepseq", "old-locale", "stm", "template-haskell", "text", "time", "uuid" }
	"hdbi-conduit" -> { "conduit", "hdbi", "resourcet", "transformers" }
	"hdbi-postgresql" -> { "attoparsec", "blaze-builder", "bytestring", "hdbi", "mtl", "old-locale", "postgresql-libpq", "postgresql-simple", "safe", "text", "time", "uuid" }
	"hdbi-sqlite" -> { "blaze-builder", "bytestring", "direct-sqlite", "hdbi", "text" }
	"hdbi-tests" -> { "Decimal", "HUnit", "QuickCheck", "bytestring", "containers", "hdbi", "ieee754", "quickcheck-assertions", "quickcheck-instances", "stm", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "text", "time", "uuid" }
	"hdevtools" -> { "cmdargs", "directory", "ghc", "ghc-paths", "network", "syb", "time", "unix" }
	"hdf" -> { "directory", "fgl", "filepath", "hosc", "hsc3", "murmur-hash", "process", "sc3-rdu", "split", "transformers" }
	"hdigest" -> { "Crypto", "cgi", "network", "parsec", "random", "time" }
	"hdirect" -> { "array", "haskell98", "pretty" }
	"hdis86" -> { "QuickCheck", "bytestring", "containers" }
	"hdiscount" -> { "bytestring" }
	"hdm" -> { "directory", "process", "unix", "vty" }
	"hdocs" -> { "MonadCatchIO-transformers", "aeson", "aeson-pretty", "bytestring", "containers", "filepath", "ghc", "ghc-paths", "haddock", "hdocs", "mtl", "network", "process", "text", "transformers" }
	"hdph" -> { "bytestring", "cereal", "containers", "deepseq", "hdph-closure", "mtl", "network", "network-info", "network-multicast", "network-transport", "network-transport-tcp", "random", "template-haskell", "time" }
	"hdph-closure" -> { "array", "bytestring", "cereal", "containers", "deepseq", "template-haskell" }
	"heap" -> { "QuickCheck" }
	"heaps" -> {  }
	"heapsort" -> { "QuickCheck", "array" }
	"hebrew-time" -> { "time" }
	"hecc" -> { "cereal", "crypto-api", "hF2" }
	"hedis" -> { "BoundedChan", "attoparsec", "bytestring", "bytestring-lexing", "mtl", "network", "resource-pool", "time", "vector" }
	"hedis-pile" -> { "binary", "bytestring", "hedis", "hedis-tags", "string-conversions", "transformers" }
	"hedis-simple" -> { "bytestring", "either", "hedis", "mtl" }
	"hedis-tags" -> { "bytestring", "hedis" }
	"hedn" -> { "attoparsec", "bytestring", "containers", "deepseq", "mtl", "old-locale", "stringsearch", "text", "time", "utf8-string", "vector" }
	"heist" -> { "MonadCatchIO-transformers", "aeson", "attoparsec", "blaze-builder", "blaze-html", "bytestring", "containers", "directory", "directory-tree", "dlist", "errors", "filepath", "hashable", "mtl", "process", "random", "text", "time", "transformers", "unordered-containers", "vector", "xmlhtml" }
	"heist-aeson" -> { "aeson", "blaze-builder", "bytestring", "containers", "heist", "monads-fd", "text", "vector", "xmlhtml" }
	"heist-async" -> { "heist", "template-haskell", "text", "xmlhtml" }
	"helisp" -> { "containers", "mtl", "parsec", "process" }
	"hellage" -> { "HTTP", "Lucu", "bytestring", "containers", "directory", "hellnet", "hjpath", "hjson", "mtl", "network", "regex-pcre", "safe", "stm", "tar", "utf8-string", "zlib" }
	"hellnet" -> { "Crypto", "HTTP", "Lucu", "RSA", "bytestring", "containers", "directory", "filepath", "haskell98", "hjpath", "hjson", "mtl", "network", "old-locale", "parsec", "pretty", "process", "random", "regex-posix", "safe", "time", "unix", "uri", "utf8-string" }
	"hello" -> {  }
	"helm" -> { "SDL", "cairo", "containers", "elerea", "filepath", "mtl", "pango", "random" }
	"hemkay" -> { "array", "binary", "bytestring", "hemkay-core", "portaudio" }
	"hemkay-core" -> { "array", "binary", "bytestring" }
	"hemokit" -> { "aeson", "base64-bytestring", "bytestring", "cairo", "cipher-aes", "conduit", "deepseq", "deepseq-generics", "gtk", "hemokit", "hidapi", "mtl", "network-simple", "optparse-applicative", "pretty-show", "robot", "split", "svgcairo", "time", "transformers", "vector", "vector-fftw", "websockets", "xhb" }
	"hen" -> { "bitset", "exceptions", "mtl", "transformers", "uuid" }
	"henet" -> { "bitset", "bytestring", "network", "typesafe-endian" }
	"hepevt" -> { "bytestring", "haskell2010", "lha" }
	"her-lexer" -> { "mtl", "split" }
	"her-lexer-parsec" -> { "her-lexer", "parsec", "transformers" }
	"herbalizer" -> { "containers", "ghc-prim", "indents", "mtl", "parsec", "regex-posix" }
	"here" -> { "haskell-src-meta", "mtl", "parsec", "template-haskell" }
	"heredoc" -> { "template-haskell" }
	"hermit" -> { "ansi-terminal", "array", "containers", "data-default", "directory", "ghc", "haskeline", "hermit", "kure", "marked-pretty", "mtl", "operational", "process", "stm", "temporary", "terminfo", "transformers" }
	"hermit-syb" -> { "containers", "ghc", "ghc-prim", "hermit", "syb", "template-haskell" }
	"heroku" -> { "network", "text" }
	"herringbone" -> { "bytestring", "containers", "directory", "herringbone", "http-types", "mtl", "old-locale", "process", "process-listlike", "system-fileio", "system-filepath", "text", "time", "transformers", "unix-compat", "wai", "wai-app-static", "warp" }
	"hesql" -> { "HDBC", "HDBC-postgresql", "filepath", "haskell-src", "hssqlppp", "parsec" }
	"hetero-map" -> {  }
	"hetris" -> { "array", "hscurses", "old-time", "random" }
	"heukarya" -> { "containers", "deepseq", "parallel", "random", "text" }
	"hevolisa" -> { "bytestring", "cairo", "filepath", "haskell98" }
	"hevolisa-dph" -> { "bytestring", "cairo", "dph-seq", "filepath", "haskell98" }
	"hex" -> { "bytestring" }
	"hexdump" -> {  }
	"hexpat" -> { "List", "bytestring", "containers", "deepseq", "text", "transformers", "utf8-string" }
	"hexpat-iteratee" -> { "List", "bytestring", "containers", "extensible-exceptions", "hexpat", "iteratee", "parallel", "transformers" }
	"hexpat-lens" -> { "bytestring", "deepseq", "hexpat", "hexpat-tagsoup", "lens" }
	"hexpat-pickle" -> { "bytestring", "containers", "extensible-exceptions", "hexpat", "text", "utf8-string" }
	"hexpat-pickle-generic" -> { "bytestring", "hexpat", "text" }
	"hexpat-tagsoup" -> { "hexpat", "tagsoup" }
	"hexpr" -> { "data-ref", "either", "mtl", "parsec", "transformers" }
	"hexquote" -> { "bytestring", "containers", "parsec", "template-haskell" }
	"hfann" -> {  }
	"hfd" -> { "MissingH", "MonadCatchIO-transformers", "bytestring", "haskeline", "iteratee", "network", "transformers" }
	"hfiar" -> { "eprocess", "mtl", "wx", "wxcore" }
	"hflags" -> { "containers", "template-haskell", "text" }
	"hfoil" -> { "HTTP", "MissingH", "directory", "gloss", "haskeline", "hmatrix", "transformers" }
	"hfov" -> {  }
	"hfractal" -> { "GLUT", "OpenGL", "OpenGLRaw", "array", "colour", "containers", "data-accessor", "data-accessor-template", "gd" }
	"hfsevents" -> { "bytestring", "cereal", "mtl", "text", "unix" }
	"hfusion" -> { "containers", "haskell-src", "mtl", "pretty", "syb" }
	"hg-buildpackage" -> { "HSH", "MissingH", "directory", "hslogger", "network", "parsec", "regex-compat", "regex-posix", "unix" }
	"hgal" -> { "array", "containers", "mtl" }
	"hgalib" -> { "array", "haskell98", "mtl" }
	"hgdbmi" -> { "parsec", "process", "stm", "unix" }
	"hgen" -> { "directory", "filepath", "hylolib", "mtl", "random" }
	"hgeometric" -> { "containers" }
	"hgeometry" -> {  }
	"hgettext" -> { "Cabal", "containers", "directory", "filepath", "haskell-src-exts", "process", "setlocale", "uniplate" }
	"hgithub" -> { "aeson", "attoparsec", "base64-bytestring", "bytestring", "case-insensitive", "cmdargs", "directory", "hgithub", "http-enumerator", "text" }
	"hgl-example" -> { "HGL", "HTam", "array", "random" }
	"hgom" -> { "containers", "directory", "filepath", "mtl", "parsec", "wl-pprint" }
	"hgopher" -> { "bytestring", "network" }
	"hi" -> { "bytestring", "directory", "filepath", "parsec", "process", "split", "template", "temporary", "text", "time" }
	"hiccup" -> { "HUnit", "bytestring", "containers", "haskell98", "mtl", "parsec", "random", "readline", "time" }
	"hichi" -> { "array", "bytestring", "mtl", "network" }
	"hidapi" -> { "bytestring", "deepseq-generics" }
	"hieraclus" -> { "HUnit", "containers", "mtl", "multiset" }
	"hierarchical-clustering" -> { "array", "containers" }
	"hierarchical-clustering-diagrams" -> { "diagrams-lib", "hierarchical-clustering" }
	"hierarchical-exceptions" -> { "template-haskell" }
	"hiernotify" -> { "directory", "filepath", "mtl", "old-time", "stm", "timers-updatable" }
	"highWaterMark" -> { "ghc" }
	"higher-leveldb" -> { "bytestring", "cereal", "data-default", "leveldb-haskell", "lifted-base", "monad-control", "mtl", "resourcet", "transformers", "transformers-base" }
	"higherorder" -> {  }
	"highlight-versions" -> { "Cabal", "ansi-terminal", "containers", "hackage-db" }
	"highlighter" -> { "blaze-html", "bytestring", "filepath", "mtl", "pcre-light", "text" }
	"highlighting-kate" -> { "blaze-html", "containers", "filepath", "highlighting-kate", "mtl", "parsec", "regex-pcre-builtin" }
	"himerge" -> { "directory", "glib", "gtk", "haskell98", "mozembed", "old-time", "parallel", "process", "unix" }
	"himg" -> { "HTTP", "bytestring", "directory", "gtk", "http-conduit", "network", "temporary" }
	"himpy" -> { "MissingH", "NetSNMP", "aeson", "attoparsec", "binary", "bytestring", "cereal", "containers", "network", "old-time", "protobuf", "regex-posix", "stm", "text", "type-level", "unordered-containers", "vector" }
	"hinduce-associations-apriori" -> { "containers", "deepseq", "hinduce-missingh", "parallel", "vector" }
	"hinduce-classifier" -> { "hinduce-missingh", "layout" }
	"hinduce-classifier-decisiontree" -> { "convertible", "hinduce-classifier", "hinduce-missingh", "layout" }
	"hinduce-examples" -> { "containers", "convertible", "csv", "hinduce-associations-apriori", "hinduce-classifier", "hinduce-classifier-decisiontree", "hinduce-missingh", "layout", "vector" }
	"hinduce-missingh" -> {  }
	"hinotify" -> { "containers", "directory", "unix" }
	"hinquire" -> { "QuickCheck", "bifunctors", "test-framework", "test-framework-quickcheck2", "test-framework-th" }
	"hinstaller" -> { "Cabal", "bytestring", "directory", "filepath", "process", "template-haskell" }
	"hint" -> { "exceptions", "extensible-exceptions", "filepath", "ghc", "ghc-paths", "mtl", "unix", "utf8-string" }
	"hint-server" -> { "eprocess", "exceptions", "hint", "monad-loops", "mtl" }
	"hinvaders" -> { "haskell98", "random" }
	"hinze-streams" -> { "Stream", "haskell98" }
	"hipe" -> { "containers", "hgeometry", "hxt", "parsec", "split", "text", "text-format" }
	"hips" -> { "bytestring", "directory", "functors", "mtl" }
	"hircules" -> { "containers", "directory", "gtk", "mtl", "network", "old-locale", "old-time", "time", "utf8-string" }
	"hirt" -> { "attoparsec", "cmdargs", "containers", "csv", "hlbfgsb", "hmatrix", "mwc-random", "numeric-extras", "random", "statistics", "text", "text-format", "vector", "vector-space" }
	"hissmetrics" -> { "bytestring", "conduit", "http-conduit", "http-types", "text", "time" }
	"hist-pl" -> { "aeson", "aeson-pretty", "bytestring", "cmdargs", "containers", "hist-pl-dawg", "hist-pl-fusion", "hist-pl-lexicon", "hist-pl-lmf", "hist-pl-transliter", "morfeusz", "pipes", "polimorf", "text" }
	"hist-pl-dawg" -> { "binary", "containers", "dawg", "text", "text-binary" }
	"hist-pl-fusion" -> { "binary", "containers", "dawg", "hist-pl-dawg", "hist-pl-lexicon", "polimorf", "text", "text-binary" }
	"hist-pl-lexicon" -> { "binary", "containers", "dawg", "directory", "filepath", "hist-pl-dawg", "hist-pl-types", "pipes", "text", "transformers" }
	"hist-pl-lmf" -> { "hist-pl-types", "polysoup", "text" }
	"hist-pl-transliter" -> { "parsec" }
	"hist-pl-types" -> { "binary", "text", "text-binary" }
	"histogram-fill" -> { "deepseq", "monad-primitive", "primitive", "vector" }
	"histogram-fill-binary" -> { "binary", "histogram-fill", "vector" }
	"histogram-fill-cereal" -> { "cereal", "histogram-fill", "vector" }
	"historian" -> { "containers", "directory", "filepath", "process", "regex-compat", "regex-posix" }
	"hit" -> { "attoparsec", "bytestring", "containers", "cryptohash", "mtl", "parsec", "patience", "random", "system-fileio", "system-filepath", "time", "vector", "zlib", "zlib-bindings" }
	"hjpath" -> { "containers", "hjson", "parsec" }
	"hjs" -> { "array", "bytestring", "containers", "directory", "mtl", "parsec", "regex-compat" }
	"hjsmin" -> { "blaze-builder", "bytestring", "containers", "language-javascript", "optparse-applicative", "text" }
	"hjson" -> { "containers", "parsec" }
	"hjson-query" -> { "containers", "hjson" }
	"hlatex" -> { "base-unicode-symbols", "containers", "derive", "directory", "filepath", "frquotes", "mtl", "process", "template-haskell", "transformers", "uniplate", "utf8-string" }
	"hlbfgsb" -> { "vector" }
	"hlcm" -> { "array", "bytestring", "bytestring-csv", "containers", "haskell98", "parallel" }
	"hledger" -> { "HUnit", "cmdargs", "containers", "data-pprint", "directory", "filepath", "haskeline", "hledger-lib", "mtl", "old-locale", "old-time", "parsec", "process", "regexpr", "safe", "shakespeare-text", "split", "tabular", "text", "time", "utf8-string" }
	"hledger-chart" -> { "Chart", "HUnit", "cmdargs", "colour", "containers", "hledger", "hledger-lib", "safe", "time" }
	"hledger-interest" -> { "Cabal", "hledger-lib", "mtl", "time" }
	"hledger-irr" -> { "Cabal", "hledger-lib", "statistics", "time" }
	"hledger-lib" -> { "HUnit", "bytestring", "cmdargs", "containers", "csv", "data-pprint", "directory", "filepath", "mtl", "old-locale", "old-time", "parsec", "pretty-show", "regex-tdfa", "regexpr", "safe", "split", "time", "transformers", "utf8-string" }
	"hledger-vty" -> { "HUnit", "cmdargs", "hledger", "hledger-lib", "safe", "time", "vty" }
	"hledger-web" -> { "HUnit", "blaze-html", "blaze-markup", "bytestring", "clientsession", "cmdargs", "data-default", "directory", "filepath", "hamlet", "hjsmin", "hledger", "hledger-lib", "http-client", "http-conduit", "json", "network-conduit", "old-locale", "parsec", "regexpr", "safe", "shakespeare-text", "template-haskell", "text", "time", "transformers", "wai", "wai-extra", "wai-handler-launch", "warp", "yaml", "yesod", "yesod-core", "yesod-static" }
	"hlibev" -> { "network" }
	"hlibfam" -> {  }
	"hlibgit2" -> { "bindings-DSL", "zlib" }
	"hlint" -> { "cmdargs", "containers", "cpphs", "directory", "filepath", "haskell-src-exts", "hscolour", "process", "transformers", "uniplate" }
	"hlogger" -> { "old-locale", "time" }
	"hlongurl" -> { "bytestring", "curl", "json", "regex-base", "regex-posix" }
	"hls" -> { "containers", "hcg-minus", "hps" }
	"hly" -> { "directory", "filepath", "hmt", "process" }
	"hmark" -> { "bytestring", "random", "safe", "tokyocabinet-haskell", "utf8-string" }
	"hmarkup" -> { "containers", "mtl", "network", "parsec", "xhtml" }
	"hmatrix" -> { "array", "binary", "deepseq", "process", "random", "storable-complex", "vector" }
	"hmatrix-glpk" -> { "hmatrix" }
	"hmatrix-gsl-stats" -> { "binary", "hmatrix", "storable-complex" }
	"hmatrix-mmap" -> { "hmatrix", "mmap" }
	"hmatrix-nipals" -> { "hmatrix" }
	"hmatrix-quadprogpp" -> { "hmatrix", "vector" }
	"hmatrix-repa" -> { "hmatrix", "repa", "vector" }
	"hmatrix-special" -> { "hmatrix" }
	"hmatrix-static" -> { "array", "haskell-src-meta", "hmatrix", "parsec", "template-haskell", "tfp" }
	"hmatrix-svdlibc" -> { "hmatrix" }
	"hmatrix-syntax" -> { "haskell-src-exts", "haskell-src-meta", "hmatrix", "template-haskell" }
	"hmatrix-tests" -> { "HUnit", "QuickCheck", "hmatrix", "random" }
	"hmeap" -> { "array", "bytestring", "bytestring-lexing", "delimited-text", "parsec" }
	"hmeap-utils" -> { "array", "bytestring", "bytestring-lexing", "delimited-text", "gnuplot", "hmatrix", "hmeap", "hosc", "hsc3", "parsec" }
	"hmemdb" -> { "binary", "containers", "monad-stm", "stm", "transformers" }
	"hmidi" -> { "stm" }
	"hmk" -> { "bytestring", "containers", "directory", "filepath", "mtl", "parsec", "pcre-light", "process", "unix" }
	"hmm" -> { "array", "data-memocombinators", "list-extras", "logfloat" }
	"hmp3" -> { "array", "binary", "bytestring", "containers", "directory", "mersenne-random", "old-time", "pcre-light", "process", "unix", "zlib" }
	"hmpfr" -> { "integer-gmp" }
	"hmt" -> { "bytestring", "colour", "containers", "directory", "filepath", "logict", "multiset-comb", "parsec", "permutation", "primes", "split", "utf8-string" }
	"hmt-diagrams" -> { "cairo", "colour", "filepath", "hcg-minus", "hcg-minus-cairo", "hmt", "html-minimalist", "xml" }
	"hmumps" -> { "QuickCheck", "containers", "haskeline", "mtl", "parsec", "regex-compat", "syb", "text" }
	"hnetcdf" -> { "containers", "either", "errors", "filepath", "repa", "transformers", "vector" }
	"hnn" -> { "uvector" }
	"hnop" -> {  }
	"hoauth" -> { "RSA", "SHA", "binary", "bytestring", "crypto-pubkey-types", "curl", "dataenc", "entropy", "mtl", "old-locale", "random", "time", "utf8-string" }
	"hoauth2" -> { "aeson", "bytestring", "bytestring-show", "conduit", "http-conduit", "http-types", "monad-control", "mtl", "random", "resourcet", "text", "transformers" }
	"hobbes" -> { "filemanip", "filepath", "fsnotify", "system-filepath", "text" }
	"hobbits" -> { "deepseq", "haskell-src-exts", "haskell-src-meta", "mtl", "syb", "tagged", "template-haskell", "th-expand-syns", "transformers", "type-equality" }
	"hoe" -> { "cmdargs", "hint", "mtl" }
	"hofix-mtl" -> { "mtl", "star-to-star", "template-haskell" }
	"hog" -> { "cmdargs", "filepath", "irc", "network", "old-locale", "time", "unix" }
	"hogg" -> { "HUnit", "array", "bytestring", "containers", "mtl", "old-locale", "random", "time" }
	"hogre" -> { "cgen" }
	"hogre-examples" -> { "hogre" }
	"hois" -> { "X11", "hois" }
	"hole" -> { "containers" }
	"holey-format" -> { "text", "text-format" }
	"holy-project" -> { "Cabal", "HUnit", "QuickCheck", "aeson", "ansi-terminal", "bytestring", "directory", "filepath", "hastache", "holy-project", "http-conduit", "lens", "lens-aeson", "process", "random", "smallcheck", "split", "syb", "tasty", "tasty-hunit", "tasty-quickcheck", "tasty-smallcheck", "text", "time" }
	"homeomorphic" -> { "QuickCheck", "containers", "mtl" }
	"hommage" -> { "array", "directory", "haskell98", "random", "time" }
	"hommage-ds" -> { "DirectSound", "array", "haskell98", "hommage" }
	"honi" -> { "bytestring", "text" }
	"honk" -> {  }
	"hood" -> { "array" }
	"hoodie" -> { "array", "astar", "containers", "hfov", "monad-loops", "mtl", "ncurses", "random" }
	"hoodle" -> { "cmdargs", "configurator", "containers", "directory", "dyre", "filepath", "hoodle", "hoodle-core", "mtl" }
	"hoodle-builder" -> { "blaze-builder", "bytestring", "double-conversion", "hoodle-types", "lens", "strict" }
	"hoodle-core" -> { "Diff", "attoparsec", "base64-bytestring", "binary", "bytestring", "cairo", "cereal", "configurator", "containers", "coroutine-object", "dbus", "directory", "dyre", "either", "errors", "filepath", "fsnotify", "gd", "gtk", "hoodle-builder", "hoodle-parser", "hoodle-render", "hoodle-types", "lens", "monad-loops", "mtl", "network", "network-info", "network-simple", "old-locale", "pango", "poppler", "process", "pureMD5", "stm", "strict", "svgcairo", "system-filepath", "template-haskell", "text", "time", "transformers", "transformers-free", "uuid", "xournal-parser" }
	"hoodle-parser" -> { "attoparsec", "bytestring", "containers", "either", "hoodle-types", "lens", "mtl", "strict", "text", "transformers", "xournal-types" }
	"hoodle-publish" -> { "HTTP", "attoparsec", "bytestring", "cairo", "cmdargs", "containers", "coroutine-object", "directory", "directory-tree", "filepath", "gtk", "hoodle-parser", "hoodle-render", "hoodle-types", "io-streams", "lens", "mtl", "network", "pdf-toolbox-core", "pdf-toolbox-document", "poppler", "process", "transformers", "uuid" }
	"hoodle-render" -> { "base64-bytestring", "bytestring", "cairo", "containers", "directory", "filepath", "gd", "hoodle-types", "lens", "monad-loops", "mtl", "poppler", "strict", "svgcairo", "unix", "uuid" }
	"hoodle-types" -> { "bytestring", "cereal", "containers", "lens", "mtl", "strict", "uuid" }
	"hoogle" -> { "Cabal", "QuickCheck", "aeson", "array", "binary", "blaze-builder", "bytestring", "case-insensitive", "cmdargs", "conduit", "containers", "deepseq", "directory", "filepath", "haskell-src-exts", "http-types", "old-locale", "parsec", "process", "random", "resourcet", "safe", "shake", "tagsoup", "text", "time", "transformers", "uniplate", "unix", "vector", "vector-algorithms", "wai", "warp" }
	"hoopl" -> { "containers" }
	"hoovie" -> { "HDBC", "HDBC-sqlite3", "blaze-builder", "bytestring", "configurator", "directory", "enumerator", "file-embed", "filepath", "mtl", "network", "network-info", "network-multicast", "old-locale", "old-time", "process", "regex-compat", "snap-core", "snap-server", "text", "time", "transformers", "unix", "xml" }
	"hopencc" -> { "bytestring", "utf8-string" }
	"hopencl" -> { "bytestring" }
	"hopenpgp-tools" -> { "aeson", "ansi-wl-pprint", "attoparsec", "base16-bytestring", "bytestring", "cereal", "cereal-conduit", "conduit", "containers", "crypto-pubkey", "cryptohash", "directory", "errors", "fgl", "hOpenPGP", "ixset", "lens", "old-locale", "openpgp-asciiarmor", "optparse-applicative", "text", "time", "transformers", "yaml" }
	"hopenssl" -> { "bytestring", "mtl" }
	"hopfield" -> { "JuicyPixels", "MonadRandom", "QuickCheck", "array", "deepseq", "directory", "erf", "exact-combinatorics", "hmatrix", "hopfield", "monad-loops", "optparse-applicative", "parallel", "probability", "random", "random-fu", "rvar", "split", "vector" }
	"hopfield-networks" -> { "MonadRandom", "QuickCheck", "hopfield-networks", "matrix", "split", "vector" }
	"hopfli" -> { "bytestring", "zlib" }
	"hosc" -> { "binary", "blaze-builder", "bytestring", "data-binary-ieee754", "network", "time", "transformers" }
	"hosc-json" -> { "aeson", "attoparsec", "bifunctors", "bytestring", "hosc", "json", "text", "unordered-containers", "utf8-string", "vector" }
	"hosc-utils" -> { "bytestring", "cgi", "haskeline", "hosc", "hosc-json", "hsc3", "json", "text", "transformers", "utf8-string", "websockets", "www-minus" }
	"hostname" -> {  }
	"hostname-validate" -> { "attoparsec", "bytestring" }
	"hosts-server" -> { "attoparsec", "bytestring", "data-default", "dns", "iproute", "network" }
	"hothasktags" -> { "containers", "cpphs", "filepath", "haskell-src-exts" }
	"hotswap" -> { "plugins" }
	"hp2any-core" -> { "attoparsec", "bytestring", "containers", "directory", "filepath", "network", "old-locale", "process", "time" }
	"hp2any-graph" -> { "GLUT", "OpenGL", "bytestring", "containers", "directory", "filepath", "hp2any-core", "network", "parseargs", "process" }
	"hp2any-manager" -> { "OpenGL", "array", "bytestring", "cairo", "containers", "directory", "filepath", "glade", "glib", "gtk", "gtkglext", "hp2any-core", "hp2any-graph", "time" }
	"hp2html" -> { "containers", "filepath" }
	"hp2pretty" -> { "array", "attoparsec", "bytestring", "containers", "filepath", "floatshow", "mtl" }
	"hpaco" -> { "cmdargs", "filepath", "hpaco-lib", "strict" }
	"hpaco-lib" -> { "aeson", "bytestring", "containers", "data-variant", "file-embed", "filepath", "mtl", "parsec", "safe", "split", "strict", "transformers" }
	"hpage" -> { "Cabal", "FindBin", "bytestring", "cabal-macosx", "containers", "directory", "eprocess", "filepath", "haskell-src-exts", "hint", "hint-server", "monad-loops", "mtl", "process", "time", "wx", "wxcore" }
	"hpapi" -> {  }
	"hpaste" -> { "ConfigFile", "Diff", "HJScript", "MissingH", "MonadCatchIO-transformers", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "cgi", "containers", "css", "directory", "download-curl", "feed", "filepath", "haskell-src-exts", "hlint", "hscolour", "mime-mail", "mtl", "named-formlet", "network", "old-locale", "postgresql-simple", "process", "safe", "snap-app", "snap-core", "snap-server", "text", "time", "transformers", "utf8-string" }
	"hpasteit" -> { "bytestring", "directory", "filepath", "http-conduit", "http-types", "lifted-base", "network", "optparse-applicative", "process", "safe", "utf8-string" }
	"hpc" -> { "containers", "directory", "time" }
	"hpc-coveralls" -> { "aeson", "bytestring", "curl", "hpc", "process", "regex-posix" }
	"hpc-strobe" -> { "filepath", "hpc" }
	"hpc-tracer" -> { "array", "containers", "haskell98", "hpc", "network", "parsec", "pretty", "process", "unix" }
	"hplaylist" -> { "directory", "filepath", "process" }
	"hpodder" -> { "ConfigFile", "HDBC", "HDBC-sqlite3", "HaXml", "MissingH", "directory", "filepath", "hslogger", "mtl", "network", "old-time", "parsec", "process", "unix" }
	"hprotoc" -> { "array", "binary", "bytestring", "containers", "directory", "filepath", "haskell-src-exts", "mtl", "parsec", "protocol-buffers", "protocol-buffers-descriptor", "utf8-string" }
	"hps" -> { "directory", "filepath", "hcg-minus", "random" }
	"hps-cairo" -> { "cairo", "gtk", "hps", "hps-cairo", "random" }
	"hps-kmeans" -> { "vector" }
	"hpuz" -> { "array", "bytestring", "parsec" }
	"hpygments" -> { "aeson", "bytestring", "process", "process-extras" }
	"hpylos" -> { "EEConfig", "GLUT", "OpenGL", "array", "containers" }
	"hpyrg" -> { "lens", "optparse-applicative", "parsec", "text" }
	"hquantlib" -> { "containers", "hmatrix", "hmatrix-special", "mersenne-random", "parallel", "statistics", "time", "vector" }
	"hquery" -> { "containers", "parsec", "text", "xmlhtml" }
	"hranker" -> { "HCL", "NonEmpty" }
	"hricket" -> { "containers" }
	"hruby" -> { "aeson", "attoparsec", "bytestring", "scientific", "stm", "text", "unordered-containers", "vector" }
	"hs-GeoIP" -> { "bytestring", "deepseq" }
	"hs-bibutils" -> {  }
	"hs-captcha" -> { "bytestring", "gd", "random" }
	"hs-cdb" -> { "array", "bytestring", "bytestring-mmap", "directory", "filepath", "mtl" }
	"hs-dotnet" -> { "ghc-prim" }
	"hs-excelx" -> { "bytestring", "containers", "mtl", "text", "time", "xml-conduit", "zip-archive" }
	"hs-ffmpeg" -> { "bytestring", "haskell98" }
	"hs-fltk" -> {  }
	"hs-gchart" -> { "mtl" }
	"hs-gen-iface" -> { "Cabal", "containers", "filepath", "haskell-names", "haskell-packages", "haskell-src-exts", "hse-cpp", "mtl", "tagged" }
	"hs-gizapp" -> { "containers", "directory", "filepath", "parsec", "process" }
	"hs-java" -> { "Glob", "LibZip", "MissingH", "array", "binary", "binary-state", "bytestring", "containers", "control-monad-exception", "data-binary-ieee754", "data-default", "directory", "filepath", "mtl", "parsec", "utf8-string" }
	"hs-json-rpc" -> { "HTTP", "aeson", "bytestring", "network", "text" }
	"hs-logo" -> { "cmdargs", "colour", "containers", "diagrams-core", "diagrams-lib", "diagrams-svg", "mtl", "parsec", "parsec-numbers", "random" }
	"hs-pgms" -> { "MonadPrompt", "array", "directory", "glib", "gtk", "mtl", "random" }
	"hs-pkpass" -> { "aeson", "attoparsec", "bytestring", "conduit", "directory", "filesystem-conduit", "old-locale", "random", "shakespeare-text", "shelly", "system-filepath", "text", "time", "transformers", "unordered-containers", "uuid", "zip-archive" }
	"hs-twitter" -> { "HTTP", "json", "mime", "network", "old-locale", "old-time", "random", "utf8-string" }
	"hs-twitterarchiver" -> { "HTTP", "json", "mtl", "network", "pretty" }
	"hs-vcard" -> { "old-locale", "time" }
	"hs2048" -> { "hs2048", "random" }
	"hs2bf" -> { "array", "containers", "directory", "filepath", "haskell-src", "mtl" }
	"hs2dot" -> { "directory", "haskell-src", "haskell-src-exts", "haskell98", "split" }
	"hsConfigure" -> { "directory", "filepath", "process", "unix" }
	"hsSqlite3" -> { "bindings-sqlite3", "bytestring", "mtl", "utf8-string" }
	"hsXenCtrl" -> { "array", "bytestring", "dlist", "mtl" }
	"hsb2hs" -> { "bytestring", "containers", "directory", "filepath", "preprocessor-tools" }
	"hsbackup" -> { "bytestring", "cmdargs", "directory", "filepath", "hashed-storage", "old-locale", "strict", "time" }
	"hsbencher" -> { "GenericPretty", "async", "bytestring", "containers", "directory", "filepath", "handa-gdata", "http-conduit", "io-streams", "mtl", "process", "random", "time", "unix" }
	"hsc2hs" -> { "containers", "directory", "process" }
	"hsc3" -> { "binary", "bytestring", "containers", "data-default", "directory", "filepath", "hosc", "murmur-hash", "network", "process", "random", "split", "transformers" }
	"hsc3-auditor" -> { "filepath", "hmt", "hosc", "hsc3" }
	"hsc3-cairo" -> { "cairo", "gtk", "hosc", "hsc3", "split" }
	"hsc3-db" -> { "hsc3" }
	"hsc3-dot" -> { "directory", "filepath", "hsc3", "process" }
	"hsc3-graphs" -> { "MonadRandom", "array", "bytestring", "cairo", "cmath", "containers", "data-default", "directory", "filepath", "hls", "hmt", "hosc", "hps", "hsc3", "hsc3-cairo", "hsc3-graphs", "hsc3-lang", "hsc3-sf", "hsc3-unsafe", "hsharc", "primes", "process", "random", "random-shuffle", "sc3-rdu", "split" }
	"hsc3-lang" -> { "MonadRandom", "array", "bifunctors", "bytestring", "containers", "data-default", "hmatrix-special", "hosc", "hsc3", "random", "random-shuffle", "split", "transformers" }
	"hsc3-plot" -> { "directory", "filepath", "gnuplot", "hsc3", "process", "statistics", "vector" }
	"hsc3-process" -> { "bytestring", "containers", "data-default", "directory", "filepath", "hosc", "hsc3", "hsc3-process", "process", "time", "time-compat", "transformers" }
	"hsc3-rec" -> { "hsc3" }
	"hsc3-rw" -> { "directory", "haskell-src-exts", "parsec", "polyparse", "split", "syb", "transformers" }
	"hsc3-server" -> { "ListZipper", "bitset", "bytestring", "containers", "data-default", "failure", "hashtables", "hosc", "hsc3", "hsc3-process", "hsc3-server", "lifted-base", "monad-control", "random", "resourcet", "transformers", "transformers-base", "unix" }
	"hsc3-sf" -> { "bytestring", "hosc" }
	"hsc3-sf-hsndfile" -> { "array", "hsc3-sf", "hsndfile", "hsndfile-vector", "vector" }
	"hsc3-unsafe" -> { "hsc3" }
	"hsc3-utils" -> { "hsc3-rw" }
	"hscamwire" -> { "array", "time", "unix" }
	"hscassandra" -> { "Thrift", "bytestring", "cassandra-thrift", "containers", "mtl", "network", "old-time" }
	"hscd" -> { "HTTP", "aeson", "bytestring", "ghc-prim" }
	"hsclock" -> { "cairo", "glib", "gtk", "old-time" }
	"hscolour" -> { "containers" }
	"hscope" -> { "bytestring", "cereal", "cpphs", "deepseq", "directory", "haskell-src-exts", "mtl", "process", "pure-cdb", "uniplate", "vector" }
	"hscrtmpl" -> { "directory", "old-locale", "process", "time" }
	"hscurses" -> { "mtl", "old-locale", "old-time", "unix" }
	"hscurses-fish-ex" -> { "hscurses", "random", "safe", "unix" }
	"hsdif" -> { "bytestring", "hosc" }
	"hsdip" -> { "HUnit", "cairo", "containers", "parsec" }
	"hsdns" -> { "containers", "network" }
	"hsdns-cache" -> { "SafeSemaphore", "hsdns", "network", "text", "time", "unordered-containers" }
	"hse-cpp" -> { "cpphs", "haskell-src-exts" }
	"hsemail" -> { "mtl", "old-time", "parsec" }
	"hsemail-ns" -> { "mtl", "old-time", "parsec" }
	"hsenv" -> { "Cabal", "bytestring", "directory", "file-embed", "filepath", "mtl", "process", "safe", "split", "unix" }
	"hserv" -> { "cmdargs", "wai-app-static", "warp" }
	"hsfacter" -> { "containers", "language-puppet", "text" }
	"hsfcsh" -> { "hdaemonize", "hslogger", "network", "process" }
	"hsgnutls" -> { "bytestring", "mtl", "old-time" }
	"hsgsom" -> { "containers", "random", "stm", "time" }
	"hsgtd" -> { "ansi-terminal", "containers", "directory", "haskeline", "mtl" }
	"hsharc" -> { "xml" }
	"hsignal" -> { "array", "binary", "bytestring", "hmatrix", "hmatrix-gsl-stats", "hstatistics", "mtl", "storable-complex" }
	"hsimport" -> { "attoparsec", "cmdargs", "directory", "haskell-src-exts", "hsimport", "lens", "mtl", "split", "text" }
	"hsini" -> { "bytestring", "containers", "mtl", "parsec" }
	"hskeleton" -> { "Cabal" }
	"hslackbuilder" -> { "Cabal", "directory", "filepath", "process", "unix" }
	"hslibsvm" -> { "containers" }
	"hslinks" -> { "Cabal", "MemoTrie", "hint", "process", "regex-compat" }
	"hslogger" -> { "containers", "directory", "mtl", "network", "old-locale", "process", "time", "unix" }
	"hslogger-template" -> { "hslogger", "mtl", "template-haskell" }
	"hslogger4j" -> { "hslogger" }
	"hslogstash" -> { "aeson", "attoparsec", "blaze-builder", "bytestring", "conduit", "containers", "data-default", "hedis", "http-conduit", "http-types", "iconv", "lens", "network", "network-conduit", "parallel-io", "stm", "stm-chans", "stm-conduit", "stm-firehose", "text", "text-format", "time", "transformers", "unordered-containers", "vector", "wai" }
	"hslua" -> { "mtl" }
	"hsmagick" -> { "bytestring", "directory", "filepath", "pretty", "process" }
	"hsmtpclient" -> { "array", "directory", "network", "old-time" }
	"hsndfile" -> {  }
	"hsndfile-storablevector" -> { "hsndfile", "storablevector" }
	"hsndfile-vector" -> { "hsndfile", "vector" }
	"hsnock" -> { "parsec", "readline" }
	"hsnoise" -> { "vector" }
	"hsns" -> { "network", "pcap" }
	"hsntp" -> { "array", "mtl", "network", "old-time", "random", "unix" }
	"hsp" -> { "mtl", "text" }
	"hsp-cgi" -> { "containers", "harp", "hsp", "network" }
	"hsparklines" -> { "bytestring", "dataenc", "gd" }
	"hsparql" -> { "HTTP", "MissingH", "bytestring", "mtl", "network", "rdf4h", "text", "xml" }
	"hspear" -> { "bytestring", "bytestring-lexing", "split", "utf8-string", "zlib" }
	"hspec" -> { "HUnit", "QuickCheck", "ansi-terminal", "deepseq", "directory", "filepath", "hspec-expectations", "quickcheck-io", "random", "setenv", "tf-random", "time", "transformers" }
	"hspec-discover" -> { "hspec" }
	"hspec-expectations" -> { "HUnit" }
	"hspec-expectations-lens" -> { "HUnit", "hspec", "hspec-expectations", "lens" }
	"hspec-expectations-lifted" -> { "hspec-expectations", "transformers" }
	"hspec-expectations-pretty" -> { "deepseq", "hspec-expectations", "wl-pprint-extras", "wl-pprint-terminfo" }
	"hspec-experimental" -> { "HUnit", "QuickCheck", "hspec" }
	"hspec-jenkins" -> { "blaze-markup", "hspec" }
	"hspec-meta" -> { "HUnit", "QuickCheck", "ansi-terminal", "deepseq", "directory", "filepath", "hspec-expectations", "quickcheck-io", "random", "setenv", "tf-random", "time", "transformers" }
	"hspec-shouldbe" -> { "hspec", "test-shouldbe" }
	"hspec-smallcheck" -> { "hspec", "smallcheck" }
	"hspec-test-framework" -> { "HUnit", "QuickCheck", "hspec" }
	"hspec-test-framework-th" -> { "hspec-test-framework", "language-haskell-extract", "template-haskell" }
	"hspec-webdriver" -> { "HUnit", "hashable", "hspec", "lifted-base", "stm", "text", "transformers", "unordered-containers", "webdriver" }
	"hspec2" -> { "HUnit", "QuickCheck", "ansi-terminal", "deepseq", "directory", "filepath", "hspec-expectations", "quickcheck-io", "random", "setenv", "tf-random", "time", "transformers" }
	"hspr-sh" -> { "old-time" }
	"hspread" -> { "binary", "bytestring", "containers", "extensible-exceptions", "network" }
	"hspresent" -> { "array", "bytestring", "vty" }
	"hsprocess" -> { "MonadCatchIO-mtl", "bytestring", "containers", "directory", "easy-file", "filepath", "hint", "process", "stringsearch", "time" }
	"hsql" -> { "old-time" }
	"hsql-mysql" -> { "Cabal", "hsql" }
	"hsql-odbc" -> { "hsql", "old-time" }
	"hsql-postgresql" -> { "hsql", "old-time" }
	"hsql-sqlite3" -> { "hsql" }
	"hsqml" -> { "containers", "filepath", "network", "tagged", "text", "transformers" }
	"hsqml-morris" -> { "OddWord", "containers", "deepseq", "directory", "hsqml", "tagged" }
	"hsshellscript" -> { "directory", "parsec", "random", "unix" }
	"hssourceinfo" -> { "containers", "directory", "filepath", "regexpr" }
	"hssqlppp" -> { "containers", "mtl", "parsec", "pretty", "syb", "template-haskell", "transformers", "uniplate" }
	"hstatistics" -> { "array", "hmatrix", "hmatrix-gsl-stats", "random", "vector" }
	"hstats" -> { "haskell98" }
	"hstatsd" -> { "bytestring", "mtl", "network", "text" }
	"hstest" -> { "HUnit", "QuickCheck", "directory", "filepath", "ghc", "ghc-paths", "mtl", "random" }
	"hstidy" -> { "haskell-src-exts" }
	"hstradeking" -> { "RSA", "aeson", "attoparsec", "bytestring", "case-insensitive", "conduit", "configurator", "containers", "hoauth", "hstradeking", "http-conduit", "lifted-base", "numbers", "old-locale", "resourcet", "safe", "text", "time", "transformers", "vector" }
	"hstyle" -> { "cmdargs", "directory", "filepath", "haskell-src-exts", "syb", "text", "vector" }
	"hstzaar" -> { "QuickCheck", "cairo", "containers", "directory", "filepath", "glade", "gtk", "parallel", "random", "xml" }
	"hsubconvert" -> { "bytestring", "cmdargs", "general-prelude", "gitlib", "hslogger", "lens", "mtl", "parallel-io", "regex-posix", "stringable", "svndump", "system-fileio", "system-filepath", "text", "text-format", "time", "transformers", "unix" }
	"hswip" -> { "haskell98", "mtl" }
	"hsx" -> { "haskell-src-exts", "mtl", "utf8-string" }
	"hsx-jmacro" -> { "happstack-hsp", "hsp", "jmacro", "mtl", "text", "wl-pprint-text" }
	"hsx-xhtml" -> { "hsx", "mtl" }
	"hsx2hs" -> { "haskell-src-exts", "haskell-src-meta", "mtl", "template-haskell", "utf8-string" }
	"hsyscall" -> {  }
	"hsyslog" -> {  }
	"hszephyr" -> { "bytestring", "mtl", "time" }
	"htags" -> { "directory", "filepath", "haskell-src", "mtl" }
	"htar" -> { "bytestring", "bzlib", "directory", "filepath", "old-locale", "old-time", "tar", "zlib" }
	"htiled" -> { "base64-bytestring", "bytestring", "containers", "filepath", "hxt", "zlib" }
	"htime" -> { "process", "time" }
	"html" -> {  }
	"html-conduit" -> { "bytestring", "conduit", "conduit-extra", "containers", "resourcet", "system-filepath", "tagstream-conduit", "text", "transformers", "xml-conduit", "xml-types" }
	"html-kure" -> { "hxt", "kure" }
	"html-minimalist" -> { "xml" }
	"html-truncate" -> { "tagsoup" }
	"html2hamlet" -> { "ascii", "blaze-builder", "bytestring", "cmdargs", "hamlet", "http-enumerator", "network", "text", "xmlhtml" }
	"htodo" -> { "HDBC", "HDBC-sqlite3" }
	"htrace" -> {  }
	"hts" -> { "hmt", "xml" }
	"htsn" -> { "MissingH", "cmdargs", "configurator", "directory", "filepath", "hdaemonize", "hslogger", "htsn-common", "hxt", "network", "tasty", "tasty-hunit", "unix" }
	"htsn-common" -> { "ansi-terminal", "hslogger", "transformers" }
	"htsn-import" -> { "MissingH", "cmdargs", "configurator", "directory", "filepath", "groundhog", "groundhog-postgresql", "groundhog-sqlite", "groundhog-th", "hslogger", "htsn-common", "hxt", "old-locale", "tasty", "tasty-hunit", "time", "transformers", "tuple" }
	"http-accept" -> { "bytestring" }
	"http-attoparsec" -> { "attoparsec", "bytestring", "http-types" }
	"http-client" -> { "array", "base64-bytestring", "blaze-builder", "bytestring", "case-insensitive", "containers", "cookie", "data-default-class", "deepseq", "exceptions", "filepath", "http-types", "mime-types", "network", "publicsuffixlist", "random", "streaming-commons", "text", "time", "transformers" }
	"http-client-auth" -> { "base64-string", "blaze-builder", "bytestring", "case-insensitive", "conduit", "crypto-conduit", "http-conduit", "pureMD5", "transformers", "utf8-string" }
	"http-client-conduit" -> { "http-client" }
	"http-client-multipart" -> { "http-client" }
	"http-client-openssl" -> { "HsOpenSSL", "http-client", "network" }
	"http-client-tls" -> { "bytestring", "connection", "data-default-class", "http-client", "network", "tls" }
	"http-common" -> { "base64-bytestring", "blaze-builder", "bytestring", "case-insensitive", "directory", "mtl", "network", "text", "transformers", "unordered-containers" }
	"http-conduit" -> { "bytestring", "conduit", "http-client", "http-client-tls", "http-types", "lifted-base", "monad-control", "mtl", "resourcet", "transformers" }
	"http-conduit-browser" -> { "bytestring", "case-insensitive", "certificate", "conduit", "containers", "cookie", "data-default", "failure", "http-conduit", "http-types", "lifted-base", "monad-control", "network", "resourcet", "socks", "time", "tls", "transformers" }
	"http-conduit-downloader" -> { "HsOpenSSL", "bytestring", "conduit", "connection", "data-default", "http-client", "http-conduit", "http-types", "lifted-base", "mtl", "network", "old-locale", "resourcet", "time", "zlib" }
	"http-date" -> { "array", "attoparsec", "bytestring" }
	"http-encodings" -> { "HTTP", "bytestring", "iconv", "mime", "mtl", "parsec", "text", "utf8-string", "zlib" }
	"http-enumerator" -> { "asn1-data", "attoparsec", "attoparsec-enumerator", "base64-bytestring", "blaze-builder", "blaze-builder-enumerator", "bytestring", "case-insensitive", "certificate", "containers", "cprng-aes", "data-default", "enumerator", "failure", "http-types", "monad-control", "network", "tls", "tls-extra", "transformers", "utf8-string", "zlib-enum" }
	"http-media" -> { "bytestring", "containers", "utf8-string" }
	"http-monad" -> { "HTTP", "bytestring", "containers", "explicit-exception", "lazyio", "network", "parsec", "transformers", "utility-ht" }
	"http-proxy" -> { "base64-bytestring", "blaze-builder", "blaze-builder-conduit", "bytestring", "bytestring-lexing", "case-insensitive", "conduit", "ghc-prim", "http-conduit", "http-types", "lifted-base", "network", "resourcet", "tls", "transformers", "wai" }
	"http-querystring" -> { "bytestring", "containers", "http-types" }
	"http-reverse-proxy" -> { "async", "blaze-builder", "bytestring", "case-insensitive", "conduit", "conduit-extra", "containers", "data-default-class", "http-client", "http-types", "lifted-base", "monad-control", "network", "network-conduit", "resourcet", "streaming-commons", "text", "transformers", "wai", "wai-logger", "word8" }
	"http-server" -> { "HTTP", "mime", "network", "text", "unix", "url", "utf8-string" }
	"http-shed" -> { "network" }
	"http-streams" -> { "HsOpenSSL", "aeson", "attoparsec", "base64-bytestring", "blaze-builder", "bytestring", "case-insensitive", "directory", "http-common", "io-streams", "mtl", "network", "openssl-streams", "text", "transformers", "unordered-containers" }
	"http-test" -> { "aeson", "bytestring", "curl", "http-test", "mtl", "safe", "stm", "text" }
	"http-types" -> { "array", "blaze-builder", "bytestring", "case-insensitive", "text" }
	"http-wget" -> { "failure", "process", "transformers" }
	"http2" -> { "PSQueue", "aeson", "aeson-pretty", "array", "blaze-builder", "bytestring", "containers", "directory", "filepath", "text", "unordered-containers", "vector", "word8" }
	"httpd-shed" -> { "network" }
	"httpspec" -> { "HTTP", "MissingH", "bidispec", "bytestring", "cgi", "containers", "encoding", "filepath", "hxt", "hxthelper", "mtl", "network", "pretty", "safe" }
	"htune" -> { "alsa-pcm", "carray", "fft", "gloss" }
	"htzaar" -> { "OpenGL", "SDL", "random" }
	"hub" -> { "array", "bytestring", "containers", "directory", "fgl", "filepath", "hexpat", "process", "regex-compat", "unix", "utf8-string" }
	"hubigraph" -> { "containers", "haxr", "mtl" }
	"hubris" -> { "Cabal", "array", "bytestring", "containers", "ghc", "ghc-paths", "haskell98", "hint", "mtl", "old-time", "process" }
	"huffman" -> { "containers", "fingertree" }
	"hugs2yc" -> { "containers", "directory", "filepath", "mtl", "parsec", "uniplate", "ycextra", "yhccore" }
	"hulk" -> { "ConfigFile", "Crypto", "aeson", "bytestring", "case-insensitive", "cmdargs", "containers", "directory", "fastirc", "filepath", "ghc-prim", "monad-extras", "mtl", "network", "split", "strict", "text", "time", "unix", "utf8-string" }
	"hums" -> { "ConfigFile", "HaXml", "MissingH", "blaze-builder", "bytestring", "case-insensitive", "conduit", "containers", "directory", "filepath", "http-types", "hxt", "mtl", "network", "parsec", "system-fileio", "system-filepath", "system-uuid", "text", "transformers", "unix", "unordered-containers", "wai", "warp" }
	"hunit-gui" -> { "HUnit", "cairo", "gtk", "haskell98" }
	"hunit-parsec" -> { "HUnit", "parsec" }
	"hunit-rematch" -> { "HUnit", "rematch" }
	"hunp" -> { "bytestring", "directory", "filepath", "monads-fd", "parsec", "pcre-light", "process", "split" }
	"hurdle" -> { "array", "bytestring", "containers", "kangaroo" }
	"husk-scheme" -> { "array", "bytestring", "containers", "directory", "filepath", "ghc-paths", "haskeline", "husk-scheme", "knob", "mtl", "parsec", "process", "time", "transformers", "utf8-string" }
	"husk-scheme-libs" -> { "array", "containers", "husk-scheme", "json", "mtl", "transformers" }
	"husky" -> { "containers", "mtl", "old-locale", "parsec", "readline", "time" }
	"hweblib" -> { "attoparsec", "bytestring", "containers", "mtl", "text", "transformers" }
	"hws" -> { "array", "containers", "directory", "haskell98", "html", "mtl", "network", "old-time", "regex-compat", "text", "unix" }
	"hx" -> {  }
	"hxmppc" -> { "fclabels", "network", "network-protocol-xmpp", "text", "transformers", "xml-types" }
	"hxournal" -> { "Diff", "TypeCompose", "bytestring", "cairo", "cmdargs", "configurator", "containers", "directory", "double-conversion", "dyre", "fclabels", "filepath", "gtk", "hxournal", "monad-coroutine", "mtl", "poppler", "strict", "template-haskell", "time", "transformers", "xournal-builder", "xournal-parser", "xournal-render", "xournal-types" }
	"hxt" -> { "HUnit", "binary", "bytestring", "containers", "deepseq", "directory", "filepath", "hxt-charproperties", "hxt-regex-xmlschema", "hxt-unicode", "mtl", "network", "parsec" }
	"hxt-binary" -> { "binary", "bytestring", "bzlib", "deepseq", "haskell98", "hxt" }
	"hxt-cache" -> { "SHA", "binary", "bytestring", "containers", "deepseq", "directory", "filepath", "hxt", "old-locale", "time", "unix" }
	"hxt-charproperties" -> {  }
	"hxt-curl" -> { "bytestring", "curl", "hxt", "parsec" }
	"hxt-expat" -> { "bytestring", "hexpat", "hxt" }
	"hxt-extras" -> { "hxt" }
	"hxt-filter" -> { "HTTP", "HUnit", "containers", "directory", "filepath", "haskell98", "hxt", "network", "parsec", "process" }
	"hxt-http" -> { "HTTP", "bytestring", "hxt", "network", "parsec" }
	"hxt-pickle-utils" -> { "hxt", "mtl" }
	"hxt-regex-xmlschema" -> { "hxt-charproperties", "parsec" }
	"hxt-relaxng" -> { "containers", "hxt", "hxt-charproperties", "hxt-regex-xmlschema", "network", "parsec" }
	"hxt-tagsoup" -> { "hxt", "hxt-charproperties", "hxt-unicode", "tagsoup" }
	"hxt-unicode" -> { "hxt-charproperties" }
	"hxt-xpath" -> { "containers", "directory", "filepath", "hxt", "parsec" }
	"hxt-xslt" -> { "containers", "directory", "filepath", "hxt", "hxt-xpath", "parsec" }
	"hxthelper" -> { "bytestring", "encoding", "hxt", "mtl" }
	"hxweb" -> { "cgi", "fastcgi", "libxml", "mtl", "xslt" }
	"hyahtzee" -> { "HUnit", "containers", "random" }
	"hyakko" -> { "aeson", "blaze-html", "bytestring", "cmdargs", "directory", "filepath", "ghc", "highlighting-kate", "pandoc", "regex-pcre", "text", "unordered-containers" }
	"hybrid" -> { "containers", "haskell98", "mtl", "parsec" }
	"hybrid-vectors" -> { "deepseq", "primitive", "vector" }
	"hydra-hs" -> { "hmatrix" }
	"hydra-print" -> { "async", "bytestring", "containers", "directory", "filepath", "io-streams", "mtl", "ncurses", "process", "random", "semigroups", "text", "time", "transformers", "unix" }
	"hyena" -> { "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "mtl", "network", "network-bytestring", "unix" }
	"hylolib" -> { "QuickCheck", "array", "containers", "mtl", "pretty", "random", "uniplate" }
	"hylotab" -> { "hylolib", "mtl" }
	"hyloutils" -> { "containers", "hylolib", "mtl", "uniplate" }
	"hyperdrive" -> { "bytestring", "bytestring-lexing", "extensible-exceptions", "mtl", "network", "pipes", "pretty" }
	"hyperloglog" -> { "approximate", "binary", "bits", "bytes", "cereal", "cereal-vector", "comonad", "deepseq", "distributive", "generic-deriving", "hashable", "hashable-extras", "lens", "reflection", "safecopy", "semigroupoids", "semigroups", "tagged", "vector" }
	"hyperpublic" -> { "aeson", "attoparsec", "bytestring", "http-enumerator", "http-types" }
	"hyphenate" -> { "containers" }
	"hyphenation" -> { "containers", "unordered-containers" }
	"hzk" -> { "bytestring" }
	"i18n" -> { "array", "containers", "directory", "filepath", "mtl", "old-locale", "old-time", "parsec", "utf8-string" }
	"iCalendar" -> { "base64-bytestring", "bytestring", "case-insensitive", "containers", "data-default", "mime", "mtl", "network", "old-locale", "parsec", "text", "time" }
	"iException" -> { "interleavableIO", "mtl" }
	"iconv" -> { "bytestring" }
	"ideas" -> { "QuickCheck", "cgi", "containers", "directory", "filepath", "mtl", "parsec", "random", "time", "uniplate" }
	"ideas-math" -> { "QuickCheck", "containers", "ideas", "parsec", "random" }
	"idempotent" -> {  }
	"identifiers" -> { "ListLike", "binary", "cereal", "containers", "deepseq", "hashable", "text", "unordered-containers" }
	"idiii" -> { "MissingH", "bytestring", "containers", "data-accessor", "idiii", "polyparse", "text", "utf8-string" }
	"idna" -> { "punycode", "stringprep", "text" }
	"idna2008" -> { "punycode", "split" }
	"idris" -> { "Cabal", "annotated-wl-pprint", "ansi-terminal", "ansi-wl-pprint", "binary", "bytestring", "containers", "deepseq", "directory", "filepath", "haskeline", "idris", "language-java", "mtl", "network", "parsers", "pretty", "process", "split", "text", "time", "transformers", "trifecta", "unix", "unordered-containers", "utf8-string", "vector", "vector-binary-instances", "xml", "zlib" }
	"ieee" -> {  }
	"ieee-utils" -> {  }
	"ieee-utils-tempfix" -> {  }
	"ieee754" -> {  }
	"ieee754-parser" -> { "binary", "bytestring" }
	"iff" -> { "binary", "bytestring" }
	"ifscs" -> { "containers", "failure" }
	"ig" -> { "aeson", "attoparsec", "base16-bytestring", "bytestring", "conduit", "conduit-extra", "crypto-api", "cryptohash", "cryptohash-cryptoapi", "data-default", "http-conduit", "http-types", "lifted-base", "monad-control", "resourcet", "text", "time", "transformers", "transformers-base", "unordered-containers" }
	"ige-mac-integration" -> { "array", "containers", "glib", "gtk", "haskell98", "mtl" }
	"igraph" -> { "containers", "hashable", "unordered-containers" }
	"ihaskell" -> { "HTTP", "HUnit", "MissingH", "aeson", "base64-bytestring", "bytestring", "cereal", "classy-prelude", "cmdargs", "containers", "directory", "filepath", "ghc", "ghc-parser", "ghc-paths", "ghci-lib", "haskeline", "here", "hlint", "hspec", "ipython-kernel", "mtl", "parsec", "process", "random", "shelly", "split", "strict", "system-argv0", "system-filepath", "tar", "transformers", "unix", "utf8-string" }
	"ihaskell-aeson" -> { "aeson", "aeson-pretty", "classy-prelude", "here", "ihaskell" }
	"ihaskell-blaze" -> { "blaze-html", "blaze-markup", "classy-prelude", "ihaskell" }
	"ihaskell-charts" -> { "Chart", "Chart-cairo", "bytestring", "classy-prelude", "data-default-class", "directory", "ihaskell" }
	"ihaskell-diagrams" -> { "bytestring", "classy-prelude", "diagrams", "diagrams-cairo", "diagrams-lib", "directory", "ihaskell" }
	"ihaskell-display" -> { "classy-prelude", "ihaskell" }
	"ihaskell-magic" -> { "base64-bytestring", "bytestring", "classy-prelude", "ihaskell", "magic", "text", "utf8-string" }
	"ihttp" -> { "attoparsec", "bytestring", "containers", "contstuff", "enumerator", "netlines", "network" }
	"illuminate" -> { "array", "containers", "filemanip", "filepath", "hscolour", "html", "utf8-string", "xhtml" }
	"imagefilters" -> { "gd" }
	"imagemagick" -> { "MonadCatchIO-transformers", "bytestring", "imagemagick", "lifted-base", "resourcet", "system-filepath", "text", "transformers", "vector" }
	"imagepaste" -> { "HTTP", "containers", "json", "mtl", "network", "regex-posix", "tagsoup", "template-haskell", "transformers", "vcs-revision" }
	"imagesize-conduit" -> { "bytestring", "conduit" }
	"imapget" -> { "HaskellNet", "HsOpenSSL", "bytestring", "directory", "network", "text" }
	"imbib" -> { "ConfigFile", "bibtex", "bytestring", "containers", "curl", "directory", "download-curl", "filepath", "glib", "gnomevfs", "gtk", "mtl", "parsec", "process", "split", "utf8-string" }
	"imgurder" -> { "curl", "directory", "haskell98", "hxt", "hxt-xpath", "url" }
	"imm" -> { "async", "bytestring", "case-insensitive", "cond", "data-default", "directory", "dyre", "feed", "filepath", "hslogger", "http-conduit", "http-types", "imm", "lens", "mime-mail", "monad-control", "mtl", "network", "old-locale", "opml", "random", "resourcet", "text", "text-icu", "time", "timerep", "tls", "transformers", "transformers-base", "utf8-string", "xdg-basedir", "xml" }
	"imparse" -> { "MissingH", "ascetic", "compilation", "containers", "directory", "indents", "parsec", "richreports", "split", "staticanalysis", "text", "uxadt" }
	"implicit" -> { "JuicyPixels", "blaze-builder", "blaze-markup", "blaze-svg", "bytestring", "containers", "deepseq", "directory", "filepath", "mtl", "optparse-applicative", "parallel", "parsec", "storable-endian", "text", "unordered-containers", "vector-space" }
	"implicit-params" -> { "data-default-class" }
	"improve" -> { "mtl", "yices" }
	"inch" -> { "IndentParser", "containers", "filepath", "mtl", "parsec", "presburger", "pretty" }
	"incremental-parser" -> { "monoid-subclasses" }
	"incremental-sat-solver" -> { "containers", "mtl" }
	"increments" -> { "beamable", "bytestring", "containers", "ghc-prim" }
	"indentation" -> { "mtl", "parsec" }
	"indentparser" -> { "mtl", "parsec" }
	"indents" -> { "concatenative", "mtl", "parsec" }
	"index-core" -> {  }
	"indexed" -> {  }
	"indexed-do-notation" -> { "haskell-src-meta", "indexed", "template-haskell" }
	"indexed-extras" -> { "bifunctors", "indexed", "mtl", "pointed" }
	"indexed-free" -> { "indexed" }
	"indian-language-font-converter" -> { "HDBC", "HDBC-sqlite3", "gtk" }
	"infinite-search" -> {  }
	"infinity" -> { "Cabal", "binary", "filepath", "ghc", "irc", "plugins" }
	"infix" -> { "containers", "haskell-src" }
	"inflections" -> { "containers", "parsec" }
	"inflist" -> { "QuickCheck" }
	"influxdb" -> { "aeson", "attoparsec", "bytestring", "containers", "data-default-class", "dlist", "http-client", "influxdb", "lifted-base", "mtl", "mwc-random", "network", "retry", "scientific", "tagged", "text", "time", "vector" }
	"ini" -> { "aeson", "attoparsec", "text", "unordered-containers" }
	"inject" -> { "attoparsec", "inject", "process", "text" }
	"inject-function" -> {  }
	"inquire" -> { "aether", "text" }
	"inserts" -> { "attoparsec", "bytestring", "dlist" }
	"inspection-proxy" -> { "async", "bytestring", "cmdargs", "pipes", "pipes-network" }
	"instant-generics" -> { "containers", "syb", "template-haskell" }
	"instant-zipper" -> { "instant-generics", "mtl" }
	"instinct" -> { "containers", "mersenne-random", "vector" }
	"instrument-chord" -> { "array", "containers", "music-diatonic" }
	"int-cast" -> {  }
	"integration" -> { "parallel" }
	"intel-aes" -> { "DRBG", "bytestring", "cereal", "crypto-api", "largeword", "process", "random", "rdtsc", "split", "tagged", "time", "unix" }
	"interleavableGen" -> { "directory", "haskell-src", "hint", "mtl" }
	"interleavableIO" -> { "mtl" }
	"interleave" -> {  }
	"interlude" -> {  }
	"intern" -> { "array", "bytestring", "hashable", "text", "unordered-containers" }
	"internetmarke" -> { "HPDF", "explicit-exception", "parsec", "process", "transformers", "utility-ht" }
	"interpol" -> { "haskell-src-exts", "regex-posix", "syb" }
	"interpolate" -> { "haskell-src-meta", "template-haskell" }
	"interpolatedstring-perl6" -> { "bytestring", "haskell-src-meta", "template-haskell", "text" }
	"interpolatedstring-qq" -> { "haskell-src-meta-mwotton", "template-haskell" }
	"interpolatedstring-qq-mwotton" -> { "haskell-src-meta-mwotton", "template-haskell" }
	"intervals" -> { "array", "distributive" }
	"intset" -> { "bits-extras", "bytestring", "deepseq" }
	"invariant" -> { "contravariant" }
	"invertible-syntax" -> { "partial-isomorphisms" }
	"io-capture" -> { "unix" }
	"io-choice" -> { "lifted-base", "monad-control", "template-haskell", "transformers", "transformers-base" }
	"io-manager" -> { "containers", "io-manager" }
	"io-memoize" -> { "spawn" }
	"io-reactive" -> {  }
	"io-storage" -> { "containers" }
	"io-streams" -> { "attoparsec", "blaze-builder", "bytestring", "network", "primitive", "process", "text", "time", "transformers", "vector", "zlib-bindings" }
	"ioctl" -> { "network", "unix" }
	"iotransaction" -> {  }
	"ip6addr" -> { "random" }
	"ipatch" -> { "bytestring", "darcs", "directory", "filepath", "hashed-storage", "process", "unix" }
	"ipc" -> { "binary", "bytestring", "dlist", "mtl", "network", "network-bytestring", "stm" }
	"ipcvar" -> { "binary", "bytestring", "directory", "unix" }
	"ipopt-hs" -> { "Rlang-QQ", "ad", "ansi-wl-pprint", "containers", "criterion", "ipopt-hs", "lens", "linear", "mtl", "optimization", "random-shuffle", "splines", "template-haskell", "uu-parsinglib", "vector", "vector-space" }
	"ipprint" -> { "Extra", "haskell-src" }
	"iproute" -> { "appar", "byteorder", "containers", "network" }
	"iptables-helpers" -> { "QuickCheck", "containers", "mtl", "parsec", "safe", "syb", "utf8-string" }
	"iptadmin" -> { "ConfigFile", "augeas", "blaze-html", "blaze-markup", "bytestring", "containers", "file-embed", "filepath", "happstack-server", "happstack-server-tls", "hdaemonize", "hsyslog", "iptables-helpers", "mtl", "network", "old-time", "pam", "parsec", "process", "random", "safe", "template-haskell", "time", "unix", "utf8-string" }
	"ipython-kernel" -> { "aeson", "bytestring", "cereal", "containers", "text", "unix", "uuid", "zeromq4-haskell" }
	"irc" -> { "attoparsec", "bytestring" }
	"irc-bytestring" -> { "attoparsec", "bytestring" }
	"ircbot" -> { "SafeSemaphore", "bytestring", "containers", "directory", "filepath", "irc", "mtl", "network", "old-locale", "parsec", "random", "stm", "time", "unix" }
	"ircbouncer" -> { "haskell98", "mtl", "network", "regex-compat", "unix" }
	"ironforge" -> { "antisplice", "chatty", "mtl", "transformers" }
	"isevaluated" -> { "vacuum" }
	"ismtp" -> { "bytestring", "containers", "contstuff", "dnscache", "enumerator", "lifted-base", "monad-control", "netlines", "network", "vector" }
	"iso3166-country-codes" -> {  }
	"iso639" -> {  }
	"iso8601-time" -> { "old-locale", "time" }
	"isohunt" -> { "aeson", "bytestring", "data-default", "ghc-prim", "http-conduit", "text", "unordered-containers", "uri", "vector" }
	"itanium-abi" -> { "boomerang", "text", "transformers", "unordered-containers" }
	"iter-stats" -> { "ListLike", "heap", "iteratee", "mtl" }
	"iterIO" -> { "HsOpenSSL", "ListLike", "array", "attoparsec", "bytestring", "containers", "filepath", "mtl", "network", "old-locale", "process", "stringsearch", "time", "unix" }
	"iterable" -> { "mtl", "template-haskell", "vector" }
	"iteratee" -> { "ListLike", "MonadCatchIO-transformers", "bytestring", "containers", "monad-control", "parallel", "transformers", "transformers-base", "unix" }
	"iteratee-compress" -> { "bytestring", "iteratee", "mtl" }
	"iteratee-mtl" -> { "ListLike", "MonadCatchIO-mtl", "bytestring", "containers", "mtl", "unix" }
	"iteratee-parsec" -> { "ListLike", "iteratee", "parsec", "reference", "transformers" }
	"iteratee-stm" -> { "iteratee", "stm", "stm-chans", "transformers" }
	"iterio-server" -> { "ListLike", "bytestring", "filepath", "iterIO", "monadIO", "mtl", "network", "split", "transformers", "unix" }
	"ivar-simple" -> {  }
	"ivor" -> { "binary", "containers", "directory", "haskell98", "mtl", "parsec" }
	"ivory" -> { "containers", "monadLib", "parsec", "pretty", "template-haskell", "th-lift" }
	"ivory-backend-c" -> { "bytestring", "cmdlib", "containers", "directory", "filepath", "ivory", "ivory-opts", "language-c-quote", "mainland-pretty", "monadLib", "process", "srcloc", "template-haskell" }
	"ivory-bitdata" -> { "ivory", "ivory-backend-c", "ivory-bitdata", "monadLib", "parsec", "template-haskell" }
	"ivory-examples" -> { "QuickCheck", "ivory", "ivory-backend-c", "ivory-opts", "ivory-quickcheck", "ivory-stdlib", "mainland-pretty", "monadLib", "pretty", "template-haskell", "wl-pprint" }
	"ivory-hw" -> { "filepath", "ivory", "ivory-backend-c", "ivory-bitdata" }
	"ivory-opts" -> { "containers", "dlist", "fgl", "filepath", "ivory", "monadLib" }
	"ivory-quickcheck" -> { "QuickCheck", "ivory", "monadLib", "random" }
	"ivory-stdlib" -> { "filepath", "ivory" }
	"ivy-web" -> { "invertible-syntax", "partial-isomorphisms", "snap", "snap-core" }
	"ix-shapable" -> { "array" }
	"ixdopp" -> { "preprocessor-tools", "syb" }
	"ixmonad" -> { "HList", "ghc-prim" }
	"ixset" -> { "containers", "safecopy", "syb", "syb-with-class", "template-haskell" }
	"ixset-typed" -> { "containers", "safecopy", "syb", "template-haskell" }
	"iyql" -> { "binary", "bytestring", "containers", "directory", "filepath", "haskeline", "haskell98", "hoauth", "mtl", "old-locale", "parsec", "time", "utf8-string", "xml" }
	"j2hs" -> { "bimap", "containers", "directory", "filepath", "hx", "java-bridge", "java-bridge-extras", "java-reflect", "mtl", "named-records", "split", "strict", "strings", "syb", "transformers" }
	"jack" -> { "array", "bytestring", "enumset", "event-list", "explicit-exception", "midi", "non-negative", "transformers", "unix" }
	"jack-bindings" -> { "mtl" }
	"jackminimix" -> { "hosc" }
	"jacobi-roots" -> { "binary", "bytestring", "vector" }
	"jail" -> { "containers", "directory", "monads-fd", "transformers" }
	"jailbreak-cabal" -> { "Cabal" }
	"jalla" -> { "QuickCheck", "convertible", "mtl", "random" }
	"jarfind" -> { "array", "binary", "bytestring", "regex-tdfa", "zip-archive" }
	"java-bridge" -> { "bimap", "containers", "cpphs", "directory", "filepath", "hinduce-missingh", "hint", "java-bridge", "mtl", "multimap", "named-records", "names", "split", "strings", "syb", "transformers", "unix" }
	"java-bridge-extras" -> { "java-bridge", "transformers" }
	"java-character" -> { "diet" }
	"java-reflect" -> { "containers", "hx", "java-bridge" }
	"jdi" -> { "binary", "bytestring", "containers", "jdi", "mtl", "network", "transformers" }
	"jespresso" -> { "HTTP", "arrows", "bytestring", "cmdargs", "data-default-class", "http-encodings", "hxt", "hxt-tagsoup", "jespresso", "language-ecmascript", "network", "random" }
	"jmacro" -> { "aeson", "bytestring", "containers", "haskell-src-exts", "haskell-src-meta", "mtl", "parseargs", "parsec", "regex-posix", "safe", "syb", "template-haskell", "text", "unordered-containers", "vector", "wl-pprint-text" }
	"jmacro-rpc" -> { "aeson", "attoparsec", "blaze-html", "bytestring", "containers", "contravariant", "jmacro", "mtl", "split", "text", "unordered-containers", "vector" }
	"jmacro-rpc-happstack" -> { "aeson", "blaze-html", "bytestring", "containers", "happstack-server", "jmacro", "jmacro-rpc", "mtl" }
	"jmacro-rpc-snap" -> { "aeson", "bytestring", "containers", "jmacro", "jmacro-rpc", "mtl", "snap-core" }
	"join" -> { "haskell98", "multisetrewrite", "stm" }
	"joinlist" -> {  }
	"jonathanscard" -> { "HTTP", "bytestring", "containers", "json", "mtl", "network", "old-locale", "time" }
	"jort" -> { "array", "gtk" }
	"jpeg" -> { "mtl" }
	"js-good-parts" -> { "wl-pprint" }
	"jsaddle" -> { "ghcjs-base", "jmacro", "lens", "template-haskell", "text", "transformers" }
	"jsc" -> { "jmacro", "lens", "template-haskell", "text", "transformers", "webkitgtk3", "webkitgtk3-javascriptcore" }
	"jsmw" -> { "DOM", "WebBits", "mtl" }
	"json" -> { "array", "bytestring", "containers", "mtl", "parsec", "pretty", "syb", "text" }
	"json-assertions" -> { "aeson", "indexed", "indexed-free", "lens", "text" }
	"json-b" -> { "bytestring", "bytestring-nums", "bytestring-trie", "bytestringparser-temporary", "containers", "utf8-string" }
	"json-builder" -> { "blaze-builder", "blaze-textual", "bytestring", "containers", "text", "unordered-containers", "utf8-string", "vector" }
	"json-enumerator" -> { "blaze-builder", "blaze-builder-enumerator", "bytestring", "containers", "enumerator", "json-types", "text", "transformers" }
	"json-fu" -> { "aeson", "attoparsec", "bytestring", "containers", "hashable", "mtl", "syb", "text", "time", "unordered-containers", "vector" }
	"json-qq" -> { "haskell-src-meta", "parsec", "template-haskell" }
	"json-rpc-server" -> { "aeson", "bytestring", "mtl", "text", "unordered-containers", "vector" }
	"json-schema" -> { "aeson", "containers", "generic-aeson", "generic-deriving", "tagged", "text" }
	"json-tools" -> { "aeson", "attoparsec", "bytestring", "containers", "process", "tar", "text", "unordered-containers", "vector" }
	"json-types" -> { "containers", "text" }
	"json2" -> { "blaze-builder", "bytestring", "containers", "json2-types", "mtl", "old-locale", "parsec", "pretty", "time", "utf8-string" }
	"json2-hdbc" -> { "HDBC", "containers", "json2", "json2-types", "time", "utf8-string" }
	"json2-types" -> { "containers" }
	"json2yaml" -> { "aeson", "bytestring", "yaml" }
	"jsonrpc-conduit" -> { "aeson", "attoparsec", "bytestring", "conduit", "conduit-extra", "mtl", "text", "transformers", "unordered-containers" }
	"jspath" -> { "JSONb", "bytestring", "bytestring-trie", "utf8-string" }
	"judy" -> { "bytestring", "ghc-prim" }
	"jwt" -> { "aeson", "base64-bytestring", "bytestring", "containers", "cryptohash", "data-default", "http-types", "network", "scientific", "text", "time", "unordered-containers" }
	"kan-extensions" -> { "adjunctions", "array", "comonad", "containers", "contravariant", "distributive", "free", "mtl", "pointed", "semigroupoids", "speculation", "transformers" }
	"kangaroo" -> { "array" }
	"kansas-comet" -> { "aeson", "containers", "data-default", "scotty", "stm", "text", "time", "transformers", "unordered-containers" }
	"kansas-lava" -> { "bytestring", "cmdargs", "containers", "data-default", "data-reify", "directory", "dotgen", "filepath", "netlist", "netlist-to-vhdl", "process", "random", "sized-types", "strict", "template-haskell" }
	"kansas-lava-cores" -> { "ansi-terminal", "bytestring", "data-default", "directory", "kansas-lava", "network", "sized-types" }
	"karakuri" -> { "comonad", "containers", "minioperational", "mtl", "transformers" }
	"karver" -> { "aeson", "attoparsec", "bytestring", "text", "unordered-containers", "vector" }
	"katt" -> { "ConfigFile", "HsOpenSSL", "blaze-builder", "bytestring", "containers", "directory", "errors", "filepath", "http-streams", "io-streams", "katt", "mtl", "parsec", "unix", "url", "zip-archive" }
	"kbq-gu" -> {  }
	"keter" -> { "aeson", "array", "async", "attoparsec", "blaze-builder", "bytestring", "case-insensitive", "conduit", "conduit-extra", "containers", "data-default", "directory", "filepath", "fsnotify", "http-conduit", "http-reverse-proxy", "http-types", "keter", "lifted-base", "mtl", "network", "network-conduit-tls", "process", "random", "regex-tdfa", "stm", "system-fileio", "system-filepath", "tar", "template-haskell", "text", "time", "transformers", "unix", "unix-compat", "unordered-containers", "vector", "wai", "wai-app-static", "wai-extra", "warp", "warp-tls", "yaml", "zlib" }
	"kevin" -> { "HTTP", "MonadCatchIO-transformers", "attoparsec", "bytestring", "containers", "cprng-aes", "damnpacket", "data-default", "lens", "mtl", "network", "regex-pcre-builtin", "stm", "text", "time", "tls", "tls-extra" }
	"keyring" -> { "keyring", "udbus" }
	"keys" -> { "array", "comonad", "containers", "free", "semigroupoids", "semigroups", "transformers" }
	"keystore" -> { "Cabal", "QuickCheck", "aeson", "aeson-pretty", "api-tools", "array", "asn1-encoding", "asn1-types", "attoparsec", "base64-bytestring", "byteable", "bytestring", "case-insensitive", "cipher-aes", "containers", "crypto-pubkey", "crypto-random", "directory", "filepath", "keystore", "lens", "mtl", "old-locale", "optparse-applicative", "pbkdf", "regex-compat-tdfa", "safe", "safecopy", "template-haskell", "text", "time", "unordered-containers", "vector" }
	"keyvaluehash" -> { "array", "binary", "bytestring", "derive", "directory", "filepath", "hashable", "mmap", "storable-record" }
	"kibro" -> { "ConfigFile", "cgi", "containers", "data-default", "directory", "fastcgi", "filepath", "haskell98", "mtl", "process", "random", "regex-compat", "regexpr", "safe", "strict", "unix", "xhtml" }
	"kickass-torrents-dump-parser" -> { "bytestring", "cassava", "text", "vector" }
	"kickchan" -> { "containers", "primitive", "vector" }
	"kif-parser" -> { "bytestring", "cmdargs", "hostname", "old-time", "parsec", "twine" }
	"kinds" -> {  }
	"kit" -> { "Glob", "ansi-terminal", "attoparsec", "cabal-file-th", "cmdargs", "containers", "directory", "errors", "filepath", "mtl", "process", "text", "unix", "unordered-containers", "yaml" }
	"kmeans" -> {  }
	"kmeans-vector" -> { "vector" }
	"knob" -> { "bytestring", "transformers" }
	"knots" -> { "array", "containers", "data-default", "deepseq", "knots", "mtl", "parallel", "vector", "yap" }
	"koellner-phonetic" -> { "HUnit" }
	"kontrakcja-templates" -> { "HStringTemplate", "MissingH", "bytestring", "containers", "directory", "html", "mtl", "old-time", "parsec", "transformers", "utf8-string" }
	"korfu" -> { "bio", "bytestring", "haskell98", "simpleargs" }
	"kqueue" -> { "directory", "filepath", "mtl", "time", "unix" }
	"krpc" -> { "bencoding", "bytestring", "containers", "data-default-class", "ghc-prim", "lifted-base", "monad-control", "monad-logger", "mtl", "network", "text", "transformers" }
	"ks-test" -> { "gamma", "random-fu", "roots", "vector" }
	"kure" -> { "dlist", "ghc", "transformers" }
	"kure-your-boilerplate" -> { "kure", "template-haskell" }
	"kyotocabinet" -> { "bytestring", "cereal" }
	"l-bfgs-b" -> { "vector" }
	"labeled-graph" -> { "labeled-tree" }
	"labeled-tree" -> {  }
	"laborantin-hs" -> { "aeson", "async", "bytestring", "cmdlib", "containers", "directory", "hslogger", "laborantin-hs", "mtl", "old-locale", "parsec", "random", "split", "text", "time", "transformers", "uuid" }
	"labyrinth" -> { "MonadRandom", "containers", "derive", "lens", "monad-loops", "mtl", "parsec", "random", "safecopy", "template-haskell", "transformers" }
	"labyrinth-server" -> { "acid-state", "aeson", "bytestring", "containers", "derive", "filepath", "hamlet", "labyrinth", "lens", "mtl", "parsec", "random", "safecopy", "shakespeare-css", "shakespeare-js", "template-haskell", "text", "transformers", "unordered-containers", "utf8-string", "vector", "wai-websockets", "warp", "websockets", "yesod", "yesod-static" }
	"lagrangian" -> { "ad", "hmatrix", "nonlinear-optimization", "vector" }
	"lambda-ast" -> {  }
	"lambda-bridge" -> {  }
	"lambda-canvas" -> { "GLUT", "OpenGL", "mtl", "time" }
	"lambda-devs" -> { "binary", "containers", "dimensional", "distributed-process", "lambda-devs", "numtype" }
	"lambda-toolbox" -> {  }
	"lambda2js" -> { "haskell2010", "parsec" }
	"lambdaFeed" -> { "haskell98", "html" }
	"lambdabot" -> { "HTTP", "IOSpec", "MonadRandom", "QuickCheck", "SafeSemaphore", "array", "arrows", "binary", "brainfuck", "bytestring", "containers", "data-memocombinators", "dependent-map", "dependent-sum", "dependent-sum-template", "dice", "directory", "edit-distance", "filepath", "haskeline", "haskell-src-exts", "hoogle", "hslogger", "hstatsd", "lambdabot", "lifted-base", "logict", "misfortune", "monad-control", "mtl", "mueval", "network", "numbers", "oeis", "parsec", "pretty", "process", "random", "random-fu", "random-source", "regex-tdfa", "show", "split", "syb", "tagsoup", "template-haskell", "time", "transformers", "transformers-base", "unix", "unlambda", "utf8-string", "vector-space", "zlib" }
	"lambdabot-utils" -> { "binary", "bytestring", "containers", "haskell-src", "mtl", "network", "old-time", "process", "random", "regex-compat", "regex-posix", "syb", "tagsoup", "unix", "utf8-string", "zlib" }
	"lambdacat" -> { "cmdargs", "containers", "dyre", "glade", "gtk", "mtl", "network", "webkit" }
	"lambdacube" -> { "editline", "mtl", "pretty" }
	"lambdacube-bullet" -> { "bullet", "lambdacube-engine", "mtl", "vector" }
	"lambdacube-core" -> { "OpenGLRaw", "binary", "bitmap", "bytestring", "bytestring-trie", "containers", "language-glsl", "mtl", "prettyclass", "vector" }
	"lambdacube-engine" -> { "OpenGLRaw", "array", "binary", "bitmap", "bytestring", "bytestring-trie", "containers", "directory", "filepath", "mtl", "stb-image", "uulib", "vect", "vector", "vector-algorithms", "xml", "zip-archive" }
	"lambdacube-examples" -> { "GLFW-b", "elerea", "lambdacube-engine", "mtl" }
	"lambdacube-samples" -> { "GLFW-b", "OpenGLRaw", "bytestring", "bytestring-trie", "elerea", "lambdacube-core", "mtl", "stb-image", "time", "vect", "vector" }
	"lambdiff" -> { "attoparsec", "attoparsec-enumerator", "bytestring", "enumerator", "gtk", "mtl" }
	"language-asn1" -> { "parsec", "syb" }
	"language-bash" -> { "parsec", "pretty", "transformers" }
	"language-boogie" -> { "HUnit", "ansi-terminal", "cmdargs", "containers", "filepath", "language-boogie", "lens", "mtl", "parsec", "pretty", "random", "stream-monad", "time", "transformers" }
	"language-c" -> { "array", "bytestring", "containers", "directory", "filepath", "pretty", "process", "syb" }
	"language-c-comments" -> { "array", "language-c" }
	"language-c-inline" -> { "array", "filepath", "language-c-quote", "mainland-pretty", "template-haskell" }
	"language-c-quote" -> { "array", "bytestring", "containers", "exception-mtl", "exception-transformers", "filepath", "haskell-src-meta", "mainland-pretty", "mtl", "srcloc", "syb", "symbol", "template-haskell" }
	"language-cil" -> { "bool-extras" }
	"language-css" -> { "pretty" }
	"language-dot" -> { "mtl", "parsec", "pretty" }
	"language-ecmascript" -> { "Diff", "QuickCheck", "containers", "data-default-class", "mtl", "parsec", "template-haskell", "testing-feat", "uniplate", "wl-pprint" }
	"language-ecmascript-analysis" -> { "containers", "language-ecmascript", "parsec", "uniplate" }
	"language-eiffel" -> { "array", "binary", "bytestring", "containers", "deepseq", "derive", "ghc-prim", "hashable", "lens", "mtl", "parsec", "pretty", "text", "unordered-containers" }
	"language-glsl" -> { "HUnit", "language-glsl", "parsec", "pretty", "prettyclass" }
	"language-go" -> { "array", "parsec", "utf8-string" }
	"language-guess" -> { "bytestring", "cereal", "containers", "utility-ht" }
	"language-haskell-extract" -> { "regex-posix", "template-haskell" }
	"language-java" -> { "array", "cpphs", "parsec", "pretty", "syb" }
	"language-java-classfile" -> { "LibZip", "array", "binary", "bytestring", "containers", "data-binary-ieee754", "data-flags", "deepseq", "language-java", "mtl", "parsec", "utf8-string" }
	"language-javascript" -> { "array", "blaze-builder", "bytestring", "containers", "mtl", "utf8-light", "utf8-string" }
	"language-lua" -> { "array", "mtl", "parsec" }
	"language-mixal" -> { "language-mixal", "mtl", "parsec", "pretty" }
	"language-objc" -> { "array", "bytestring", "containers", "directory", "filepath", "newtype", "pretty", "process", "syb" }
	"language-openscad" -> { "attoparsec", "bytestring", "language-openscad" }
	"language-pig" -> { "Cabal", "containers", "parsec", "pretty-tree" }
	"language-puppet" -> { "Diff", "Glob", "aeson", "ansi-wl-pprint", "attoparsec", "base16-bytestring", "bytestring", "case-insensitive", "containers", "cryptohash", "filecache", "hashable", "hruby", "hslogger", "hslua", "hspec", "http-conduit", "http-types", "iconv", "language-puppet", "lens", "luautils", "mtl", "operational", "optparse-applicative", "parallel-io", "parsec", "parsers", "pcre-utils", "process", "regex-pcre-builtin", "scientific", "split", "stateWriter", "stm", "strict-base-types", "text", "time", "transformers", "unix", "unordered-containers", "vector", "yaml" }
	"language-python" -> { "array", "containers", "monads-tf", "pretty", "transformers" }
	"language-python-colour" -> { "haskell98", "language-python", "xhtml" }
	"language-sh" -> { "directory", "filepath", "mtl", "parsec", "pcre-light" }
	"language-slice" -> { "bytestring", "parsec", "transformers" }
	"language-spelling" -> { "ListLike", "array", "bk-tree", "bytestring", "containers", "listlike-instances", "text", "tst", "vector" }
	"language-sqlite" -> { "array", "bytestring", "containers", "mtl", "template-haskell", "utf8-string" }
	"language-typescript" -> { "containers", "parsec", "pretty" }
	"largeword" -> { "binary" }
	"lat" -> { "HDBC", "HDBC-sqlite3", "HTTP", "ansi-wl-pprint", "cmdargs", "directory", "filepath", "haskell98", "haxr", "hsini", "mtl", "old-locale", "regex-compat", "tagsoup", "time" }
	"latex" -> { "containers", "utility-ht" }
	"lattices" -> { "containers" }
	"launchpad-control" -> { "array", "containers", "hmidi", "launchpad-control", "mtl", "transformers" }
	"lax" -> {  }
	"layers" -> { "transformers" }
	"layout" -> { "convertible", "hinduce-missingh" }
	"layout-bootstrap" -> { "blaze-html", "containers", "text" }
	"lazy-csv" -> { "bytestring" }
	"lazy-io" -> {  }
	"lazyarray" -> { "array" }
	"lazyio" -> { "transformers", "unsafe" }
	"lazysmallcheck" -> {  }
	"lazysplines" -> {  }
	"lbfgs" -> { "array" }
	"lca" -> {  }
	"lcs" -> { "array" }
	"lda" -> { "containers", "ghc-prim", "mtl", "random-fu", "random-source", "rvar", "vector" }
	"ldif" -> { "bytestring", "cmdargs", "containers", "directory", "filepath", "ldif", "parsec", "rosezipper" }
	"leaf" -> { "blaze-html", "directory", "filepath", "pandoc", "split" }
	"leankit-api" -> { "aeson", "bytestring", "colour", "curl", "split" }
	"leapseconds-announced" -> { "time" }
	"learn" -> { "containers" }
	"learn-physics" -> { "vector-space" }
	"leksah" -> { "Cabal", "QuickCheck", "array", "binary", "binary-shared", "blaze-html", "bytestring", "conduit", "containers", "deepseq", "directory", "executable-path", "filepath", "ghc", "ghcjs-codemirror", "ghcjs-dom", "gio", "glib", "gtk3", "gtksourceview3", "hamlet", "haskell-src-exts", "hlint", "hslogger", "jsaddle", "leksah", "leksah-server", "lens", "ltk", "mtl", "network", "old-time", "parsec", "pretty", "pretty-show", "regex-base", "regex-tdfa", "shakespeare", "strict", "text", "time", "transformers", "unix", "utf8-string", "vado", "vcsgui", "vcswrapper", "webkitgtk3", "webkitgtk3-javascriptcore" }
	"leksah-server" -> { "Cabal", "attoparsec", "attoparsec-conduit", "binary", "binary-shared", "bytestring", "conduit", "containers", "deepseq", "directory", "executable-path", "filepath", "ghc", "haddock-leksah", "hslogger", "ltk", "network", "parsec", "pretty", "process-leksah", "strict", "text", "time", "transformers", "unix" }
	"lens" -> { "aeson", "array", "bifunctors", "bytestring", "comonad", "containers", "contravariant", "distributive", "exceptions", "filepath", "free", "ghc-prim", "hashable", "mtl", "parallel", "primitive", "profunctors", "reflection", "scientific", "semigroupoids", "semigroups", "split", "tagged", "template-haskell", "text", "transformers", "transformers-compat", "unordered-containers", "utf8-string", "vector", "void", "zlib" }
	"lens-aeson" -> { "aeson", "attoparsec", "bytestring", "lens", "text", "unordered-containers", "utf8-string", "vector" }
	"lens-datetime" -> { "lens", "time" }
	"lens-family" -> { "containers", "lens-family-core", "mtl", "transformers" }
	"lens-family-core" -> { "containers", "transformers" }
	"lens-family-th" -> { "template-haskell" }
	"lens-properties" -> { "QuickCheck", "lens", "transformers" }
	"lens-time" -> { "lens", "time" }
	"lenses" -> { "mtl", "template-haskell" }
	"level-monad" -> { "fmlist" }
	"leveldb-haskell" -> { "async", "bytestring", "data-default", "filepath", "leveldb-haskell", "resourcet", "transformers" }
	"levmar" -> { "base-unicode-symbols", "bindings-levmar", "hmatrix", "vector" }
	"levmar-chart" -> { "Chart", "colour", "data-accessor", "levmar", "random" }
	"lgtk" -> { "SVGFonts", "containers", "diagrams-cairo", "diagrams-lib", "directory", "fsnotify", "groups", "gtk", "lens", "mtl", "operational", "system-filepath", "transformers" }
	"lha" -> { "haskell2010" }
	"lhae" -> { "array", "containers", "directory", "filepath", "hgettext", "mtl", "parsec", "process", "setlocale", "utf8-string", "wx", "wxcore" }
	"lhc" -> { "Cabal", "HUnit", "QuickCheck", "ansi-wl-pprint", "binary", "bytestring", "bytestring-trie", "containers", "core", "derive", "digest", "directory", "extensible-exceptions", "filepath", "haskell98", "mtl", "parallel", "pretty", "process", "test-framework", "test-framework-hunit", "test-framework-quickcheck", "time", "unix", "xhtml" }
	"lhe" -> { "HaXml", "bytestring", "haskell2010", "lha" }
	"lhs2TeX-hl" -> { "cmdargs", "filepath", "haskell-src-exts", "syb", "uu-parsinglib" }
	"lhs2tex" -> { "directory", "filepath", "mtl", "process", "regex-compat" }
	"libGenI" -> { "HUnit", "QuickCheck", "binary", "containers", "mtl", "parsec", "process" }
	"libcspm" -> { "array", "bytestring", "containers", "deepseq", "directory", "filepath", "graph-wrapper", "hashable", "hashtables", "mtl", "pretty", "text", "value-supply" }
	"libexpect" -> { "unix" }
	"libffi" -> { "bytestring" }
	"libgit" -> { "mtl", "process" }
	"libjenkins" -> { "async", "bytestring", "conduit", "free", "http-client", "http-conduit", "http-types", "lens", "monad-control", "network", "text", "transformers", "xml-conduit" }
	"liblastfm" -> { "aeson", "bytestring", "cereal", "containers", "contravariant", "crypto-api", "http-conduit", "http-types", "network", "pureMD5", "semigroups", "tagged", "text", "void" }
	"liblinear-enumerator" -> { "bindings-DSL", "enumerator", "mtl", "vector" }
	"libltdl" -> { "libltdl" }
	"libmpd" -> { "bytestring", "containers", "filepath", "mtl", "network", "old-locale", "text", "time", "utf8-string" }
	"libnotify" -> { "bytestring", "glib", "gtk" }
	"libnvvm" -> { "bytestring", "cuda" }
	"liboleg" -> { "CC-delcont", "containers", "mtl", "template-haskell", "unix" }
	"libpq" -> { "bytestring", "unix" }
	"librandomorg" -> { "bytestring", "curl" }
	"libssh2" -> { "bytestring", "network", "syb", "time" }
	"libssh2-conduit" -> { "conduit", "libssh2", "monad-control", "stm", "transformers" }
	"libstackexchange" -> { "aeson", "attoparsec", "bytestring", "containers", "data-default", "http-conduit", "profunctors", "text" }
	"libsystemd-daemon" -> { "bytestring", "network", "utf8-string" }
	"libsystemd-journal" -> { "bytestring", "hashable", "hsyslog", "pipes", "pipes-safe", "text", "transformers", "uniplate", "unix-bytestring", "unordered-containers", "uuid", "vector" }
	"libtagc" -> { "bytestring", "glib" }
	"libvirt-hs" -> { "syb" }
	"libvorbis" -> { "bytestring", "cpu" }
	"libxml" -> { "bytestring", "mtl" }
	"libxml-enumerator" -> { "bytestring", "enumerator", "libxml-sax", "text", "transformers", "xml-types" }
	"libxml-sax" -> { "bytestring", "text", "xml-types" }
	"libxslt" -> { "bytestring", "libxml" }
	"life" -> { "GLUT", "OpenGL", "array", "random" }
	"lifted-async" -> { "async", "lifted-base", "monad-control", "transformers-base" }
	"lifted-base" -> { "base-unicode-symbols", "monad-control", "transformers-base" }
	"lifter" -> { "array", "bitmap", "bytestring", "directory", "filepath", "gloss", "mtl", "stb-image" }
	"ligature" -> { "text" }
	"ligd" -> {  }
	"lighttpd-conf" -> { "array", "bytestring", "packedstring", "pretty", "template-haskell" }
	"lighttpd-conf-qq" -> { "array", "bytestring", "haskell-src-exts", "lighttpd-conf", "template-haskell" }
	"lilypond" -> { "data-default", "music-dynamics-literal", "music-pitch-literal", "prettify", "process", "semigroups", "vector-space" }
	"lin-alg" -> { "NumInstances", "vector" }
	"linda" -> { "HUnit", "hmatrix" }
	"line2pdf" -> { "bytestring", "containers" }
	"linear" -> { "adjunctions", "binary", "containers", "distributive", "ghc-prim", "hashable", "lens", "reflection", "semigroupoids", "semigroups", "tagged", "template-haskell", "transformers", "unordered-containers", "vector", "void" }
	"linear-accelerate" -> { "accelerate", "lens", "linear" }
	"linear-algebra-cblas" -> { "QuickCheck", "ieee754", "storable-complex", "test-framework", "test-framework-quickcheck2", "vector" }
	"linear-maps" -> { "HUnit", "containers" }
	"linearEqSolver" -> { "sbv" }
	"linebreak" -> { "hyphenation" }
	"linkchk" -> { "gtk", "haskell98", "popenhs", "regex-compat", "unix" }
	"linkcore" -> { "containers", "extcore", "filepath", "process" }
	"linux-blkid" -> { "monad-control", "transformers", "transformers-base" }
	"linux-cgroup" -> { "filepath" }
	"linux-evdev" -> { "bytestring", "time" }
	"linux-file-extents" -> { "unix" }
	"linux-inotify" -> { "bytestring", "hashable", "unix" }
	"linux-kmod" -> { "unix" }
	"linux-mount" -> { "bytestring" }
	"linux-perf" -> { "binary", "bytestring", "containers", "directory", "filepath", "ghc-events", "linux-perf", "mtl", "pretty", "process", "unix" }
	"linux-ptrace" -> { "bytestring", "mmap", "posix-waitpid", "process", "template-haskell", "unix" }
	"linux-xattr" -> { "bytestring" }
	"lio" -> { "bytestring", "containers", "hashable" }
	"lio-eci11" -> { "SHA", "array", "bytestring", "containers", "dclabel-eci11", "directory", "filepath", "mtl", "old-time", "time", "unix" }
	"lio-fs" -> { "SHA", "bytestring", "containers", "directory", "filepath", "lio", "unix", "xattr" }
	"lio-simple" -> { "aeson", "attoparsec", "base64-bytestring", "bytestring", "cmdargs", "conduit", "directory", "filepath", "http-types", "lio", "simple", "simple-templates", "text", "unordered-containers", "wai", "wai-extra", "warp" }
	"liquid-fixpoint" -> { "ansi-terminal", "array", "bifunctors", "bytestring", "cmdargs", "containers", "deepseq", "directory", "filemanip", "filepath", "ghc", "ghc-prim", "hashable", "liquid-fixpoint", "mtl", "parsec", "pretty", "process", "syb", "text", "unordered-containers" }
	"liquidhaskell" -> { "Diff", "aeson", "ansi-terminal", "bifunctors", "bytestring", "cmdargs", "containers", "cpphs", "deepseq", "directory", "filemanip", "filepath", "ghc", "ghc-paths", "hashable", "hscolour", "liquid-fixpoint", "mtl", "parsec", "pretty", "process", "syb", "text", "unordered-containers", "vector" }
	"lispparser" -> { "parsec" }
	"list-extras" -> {  }
	"list-grouping" -> {  }
	"list-mux" -> {  }
	"list-tries" -> { "binary", "containers", "dlist" }
	"listlike-instances" -> { "ListLike", "bytestring", "text", "vector" }
	"lists" -> { "list-extras", "split" }
	"literals" -> {  }
	"live-sequencer" -> { "alsa-core", "alsa-seq", "bytestring", "cgi", "concurrent-split", "containers", "data-accessor", "data-accessor-transformers", "directory", "event-list", "explicit-exception", "filepath", "html", "httpd-shed", "midi", "midi-alsa", "network", "non-empty", "non-negative", "parsec", "pretty", "process", "stm", "stm-split", "strict", "transformers", "unix", "utility-ht", "wx", "wxcore" }
	"llrbtree" -> {  }
	"llsd" -> { "binary", "bytestring", "cereal", "containers", "dataenc", "ghc-prim", "hexpat", "mtl", "network", "old-locale", "parsec", "pretty", "random", "template-haskell", "text", "time", "utf8-string", "uuid" }
	"llvm" -> { "bytestring", "containers", "directory", "llvm-base", "mtl", "process", "type-level" }
	"llvm-analysis" -> { "GenericPretty", "HUnit", "array", "boomerang", "bytestring", "containers", "deepseq", "directory", "failure", "fgl", "filemanip", "filepath", "graphviz", "hashable", "hoopl", "ifscs", "itanium-abi", "lens", "llvm-base-types", "monad-par", "process", "temporary", "test-framework", "test-framework-hunit", "text", "transformers", "uniplate", "unordered-containers", "vector" }
	"llvm-base" -> { "mtl" }
	"llvm-base-types" -> { "GenericPretty", "containers", "deepseq", "dwarf", "failure", "graphviz", "hashable", "pretty", "regex-tdfa", "text", "transformers", "unordered-containers", "vector" }
	"llvm-base-util" -> { "llvm-base" }
	"llvm-data-interop" -> { "array", "bytestring", "containers", "data-default", "deepseq", "dwarf", "hashable", "hashtables", "llvm-base-types", "loch-th", "mtl", "text", "transformers", "unification-fd", "unordered-containers", "vector" }
	"llvm-extra" -> { "containers", "cpuid", "llvm-tf", "tfp", "transformers", "unsafe", "utility-ht" }
	"llvm-general" -> { "array", "bytestring", "containers", "llvm-general-pure", "mtl", "parsec", "setenv", "template-haskell", "transformers", "utf8-string" }
	"llvm-general-pure" -> { "containers", "mtl", "parsec", "setenv", "template-haskell", "transformers" }
	"llvm-general-quote" -> { "array", "bytestring", "containers", "exception-transformers", "haskell-src-meta", "llvm-general-pure", "mainland-pretty", "mtl", "split", "srcloc", "syb", "symbol", "template-haskell", "th-lift" }
	"llvm-ht" -> { "bytestring", "directory", "mtl", "process", "type-level" }
	"llvm-pkg-config" -> { "Cabal", "explicit-exception", "process", "transformers", "utility-ht" }
	"llvm-tf" -> { "containers", "llvm-base", "process", "tfp", "transformers" }
	"llvm-tools" -> { "attoparsec", "attoparsec-conduit", "blaze-html", "blaze-markup", "bytestring", "conduit", "containers", "directory", "filemanip", "filepath", "graphviz", "llvm-analysis", "llvm-data-interop", "llvm-tools", "optparse-applicative", "parallel-io", "process-conduit", "unordered-containers", "xml" }
	"loadavg" -> {  }
	"local-address" -> { "network" }
	"local-search" -> { "combinatorial-problems", "containers", "erf", "random" }
	"locators" -> { "bytestring", "cereal", "containers", "cryptohash", "text" }
	"loch" -> {  }
	"loch-th" -> { "pretty", "template-haskell" }
	"lockfree-queue" -> { "abstract-deque", "atomic-primops", "bytestring", "ghc-prim" }
	"log-domain" -> { "binary", "bytes", "cereal", "comonad", "deepseq", "distributive", "generic-deriving", "hashable", "hashable-extras", "safecopy", "semigroupoids", "semigroups", "vector" }
	"log-effect" -> { "bytestring", "extensible-effects", "fast-logger", "time" }
	"log2json" -> { "containers", "json", "parsec" }
	"logfloat" -> {  }
	"logging" -> { "binary", "bytestring", "fast-logger", "lifted-base", "monad-control", "monad-logger", "old-locale", "pcre-light", "text", "thyme", "transformers", "vector-space" }
	"logic-TPTP" -> { "QuickCheck", "ansi-wl-pprint", "array", "containers", "mtl", "pointed", "syb" }
	"logic-classes" -> { "HUnit", "PropLogic", "applicative-extras", "containers", "fgl", "mtl", "pretty", "safecopy", "set-extra", "syb", "syb-with-class", "template-haskell", "text" }
	"logicst" -> { "logict", "transformers" }
	"logict" -> { "mtl" }
	"lojban" -> { "HTTP", "containers", "curl", "directory", "haskell98", "markov-chain", "mtl", "parsec", "process", "random", "regex-compat", "strict", "tagsoup", "xml" }
	"lojbanParser" -> { "lojbanParser" }
	"lojbanXiragan" -> { "lojbanXiragan" }
	"lojysamban" -> { "lojbanParser", "yjtools" }
	"loli" -> { "bytestring", "containers", "data-default", "hack", "hack-contrib", "mps", "mtl", "template", "utf8-string" }
	"loop-while" -> { "mtl" }
	"loopy" -> { "GoogleChart", "cmdargs", "containers", "directory", "filepath", "hmatrix", "process", "random" }
	"lord" -> { "aeson", "ansi-terminal", "attoparsec-conduit", "bytestring", "case-insensitive", "conduit", "daemons", "data-default", "directory", "fast-logger", "html-conduit", "http-conduit", "http-types", "libmpd", "optparse-applicative", "process", "text", "transformers", "unix", "unordered-containers", "utf8-string", "wai-logger", "xml-conduit", "yaml" }
	"loris" -> { "vector" }
	"lostcities" -> { "array", "containers", "haskell98", "mtl", "wx", "wxcore" }
	"lrucache" -> { "containers" }
	"ls-usb" -> { "ansi-wl-pprint", "base-unicode-symbols", "cmdtheline", "text", "usb", "usb-id-database", "vector" }
	"lscabal" -> { "Cabal", "bytestring", "containers", "directory", "filepath", "pretty", "process" }
	"lsystem" -> { "haskell98", "uu-parsinglib", "wx", "wxcore" }
	"ltk" -> { "Cabal", "containers", "filepath", "ghc", "glib", "gtk3", "mtl", "parsec", "pretty", "transformers" }
	"ltl" -> { "vcd" }
	"lua-bytecode" -> { "array", "bytestring", "cereal", "containers", "hashable", "numeric-extras", "vector" }
	"luachunk" -> { "attoparsec", "binary", "bytestring", "custom-prelude", "ghc-prim", "pretty", "text" }
	"luautils" -> { "containers", "custom-prelude", "hslua", "monad-loops", "text" }
	"lub" -> { "unamb" }
	"lucienne" -> { "HTTP", "SHA", "base64-bytestring", "blaze-html", "bson", "bytestring", "compact-string-fix", "feed", "happstack", "happstack-server", "mongoDB", "mtl", "network", "text", "time" }
	"luhn" -> { "QuickCheck", "digits" }
	"lui" -> { "MaybeT", "SDL", "containers", "haskell98", "haskgame", "mtl" }
	"luka" -> { "air", "bytestring", "libffi" }
	"lushtags" -> { "haskell-src-exts", "text", "vector" }
	"lvish" -> { "async", "atomic-primops", "bits-atomic", "containers", "deepseq", "ghc-prim", "lattices", "missing-foreign", "par-classes", "par-collections", "random", "transformers", "vector" }
	"lvmlib" -> { "array", "containers", "directory", "parsec", "wl-pprint" }
	"lye" -> { "HCodecs", "containers", "free", "lens", "parsers", "transformers", "trifecta" }
	"lz4" -> { "bytestring", "cereal" }
	"lzma-conduit" -> { "bindings-DSL", "bytestring", "conduit", "resourcet", "transformers" }
	"lzma-enumerator" -> { "bindings-DSL", "bytestring", "enumerator", "mtl" }
	"maccatcher" -> { "binary", "parsec", "process" }
	"machines" -> { "comonad", "containers", "free", "mtl", "pointed", "profunctors", "semigroups", "transformers", "void" }
	"macho" -> { "binary", "bytestring" }
	"macosx-make-standalone" -> { "containers", "data-lens", "data-lens-template", "deepseq", "directory", "filepath", "graph-visit", "mtl", "process", "transformers", "unix" }
	"mage" -> { "array", "containers", "mtl", "random" }
	"magic" -> {  }
	"magma" -> { "deepseq", "profunctors", "semigroups" }
	"mahoro" -> { "ConfigFile", "MissingH", "XMPP", "containers", "curl", "directory", "happstack-state", "mtl", "network", "old-time", "regex-posix", "tagsoup", "utf8-string" }
	"maid" -> { "air", "bytestring", "containers", "data-default", "directory", "filepath", "hack2", "hack2-contrib", "hack2-handler-snap-server", "moe", "process", "text" }
	"mailgun" -> { "bytestring", "conduit", "failure", "http-client", "http-client-multipart", "http-conduit", "mailgun", "monad-control", "network", "text", "transformers" }
	"mainland-pretty" -> { "containers", "srcloc", "text" }
	"majordomo" -> { "bytestring", "cmdargs", "majordomo", "monad-loops", "old-locale", "threads", "time", "unix", "zeromq-haskell" }
	"majority" -> { "haskell2010" }
	"make-hard-links" -> { "bytestring", "containers", "directory", "filepath", "unix" }
	"make-package" -> { "async", "bytestring", "configurator", "containers", "directory", "filepath", "github", "haskeline", "lens", "lens-datetime", "mtl", "process", "text", "time" }
	"makedo" -> { "HSH", "directory", "filepath", "process" }
	"manatee" -> { "binary", "cairo", "containers", "dbus-client", "dbus-core", "derive", "directory", "filepath", "gtk", "gtk-serialized-event", "manatee-core", "mtl", "stm", "template-haskell", "text", "unix", "utf8-string" }
	"manatee-all" -> { "manatee", "manatee-browser", "manatee-core", "manatee-curl", "manatee-editor", "manatee-filemanager", "manatee-imageviewer", "manatee-ircclient", "manatee-mplayer", "manatee-pdfviewer", "manatee-processmanager", "manatee-reader", "manatee-terminal", "manatee-welcome" }
	"manatee-anything" -> { "GoogleSuggest", "bytestring", "containers", "dataenc", "dbus-client", "dbus-core", "filepath", "gio", "gtk", "manatee-core", "mtl", "network", "proc", "regex-tdfa", "split", "stm", "text", "unix", "utf8-string" }
	"manatee-browser" -> { "binary", "containers", "dbus-client", "derive", "filepath", "gtk", "manatee-core", "mtl", "stm", "text", "utf8-string", "webkit" }
	"manatee-core" -> { "Cabal", "array", "binary", "bytestring", "cairo", "containers", "dataenc", "dbus-client", "dbus-core", "derive", "directory", "filepath", "gconf", "ghc", "ghc-paths", "gio", "glib", "gtk", "gtk-serialized-event", "gtksourceview2", "haskell-src-exts", "mtl", "network", "old-locale", "old-time", "process", "regex-tdfa", "split", "stm", "template-haskell", "text", "time", "unix", "utf8-string" }
	"manatee-curl" -> { "binary", "bytestring", "containers", "curl", "dbus-client", "dbus-core", "derive", "directory", "filepath", "gio", "glib", "gtk", "manatee-core", "mtl", "network", "old-locale", "old-time", "regex-tdfa", "stm", "template-haskell", "text", "utf8-string" }
	"manatee-editor" -> { "binary", "bytestring", "containers", "dbus-client", "dbus-core", "derive", "filepath", "gtk", "gtksourceview2", "manatee-core", "regex-tdfa", "stm", "text" }
	"manatee-filemanager" -> { "binary", "containers", "dbus-client", "derive", "filepath", "gio", "glib", "gtk", "manatee-core", "mtl", "old-locale", "old-time", "stm", "text", "utf8-string" }
	"manatee-imageviewer" -> { "binary", "containers", "dbus-client", "derive", "filepath", "gio", "glib", "gtk", "gtkimageview", "manatee-core", "regex-tdfa", "stm", "text", "utf8-string" }
	"manatee-ircclient" -> { "Cabal", "GoogleTranslate", "MorseCode", "array", "binary", "bytestring", "containers", "curl", "dbus-client", "dbus-core", "derive", "fastirc", "filepath", "ghc", "groom", "gtk", "gtksourceview2", "manatee-core", "mtl", "nano-md5", "network", "regex-posix", "split", "stm", "template-haskell", "text", "unix", "utf8-string" }
	"manatee-mplayer" -> { "binary", "bytestring", "containers", "dbus-client", "dbus-core", "derive", "filepath", "gio", "gtk", "libtagc", "manatee-core", "process", "random", "regex-tdfa", "stm", "text", "time", "unix", "utf8-string" }
	"manatee-pdfviewer" -> { "binary", "cairo", "containers", "dbus-client", "derive", "filepath", "gtk", "manatee-core", "mtl", "poppler", "stm", "text", "utf8-string" }
	"manatee-processmanager" -> { "binary", "containers", "dbus-client", "derive", "filepath", "gtk", "manatee-core", "proc", "stm", "text" }
	"manatee-reader" -> { "binary", "containers", "curl", "dbus-client", "derive", "download-curl", "feed", "filepath", "gtk", "manatee-core", "stm", "text", "utf8-string", "webkit" }
	"manatee-template" -> { "binary", "bytestring", "containers", "dbus-client", "dbus-core", "derive", "filepath", "gtk", "gtksourceview2", "manatee-core", "regex-tdfa", "stm", "text" }
	"manatee-terminal" -> { "binary", "containers", "dbus-client", "derive", "filepath", "gtk", "manatee-core", "stm", "text", "unix", "vte" }
	"manatee-welcome" -> { "binary", "bytestring", "containers", "dbus-client", "dbus-core", "derive", "filepath", "gtk", "manatee-core", "regex-tdfa", "stm", "text" }
	"mancala" -> {  }
	"mandulia" -> { "GLUT", "array", "bytestring", "containers", "directory", "filepath", "hslua", "time" }
	"mangopay" -> { "aeson", "attoparsec", "attoparsec-conduit", "base16-bytestring", "base64-bytestring", "bytestring", "case-insensitive", "conduit", "data-default", "http-conduit", "http-types", "lifted-base", "mangopay", "monad-control", "resourcet", "text", "time", "transformers", "transformers-base", "unordered-containers", "utf8-string" }
	"marionetta" -> { "containers", "gloss", "mtl", "splines", "vector", "vector-space" }
	"markdown" -> { "attoparsec", "attoparsec-conduit", "blaze-html", "conduit", "conduit-extra", "containers", "data-default", "text", "transformers", "xss-sanitize" }
	"markdown-kate" -> { "attoparsec", "attoparsec-conduit", "blaze-html", "conduit", "containers", "data-default", "highlighting-kate", "text", "transformers", "xss-sanitize" }
	"markdown-pap" -> { "monads-tf", "papillon" }
	"markdown-unlit" -> { "markdown-unlit" }
	"markdown2svg" -> { "Cabal", "binary-file", "directory", "filepath", "markdown-pap", "monads-tf", "papillon", "png-file", "yjsvg" }
	"marked-pretty" -> {  }
	"markov" -> {  }
	"markov-chain" -> { "containers", "random", "transformers" }
	"markup-preview" -> { "MissingH", "cmdargs", "directory", "glib", "gtk", "mtl", "pandoc", "temporary", "transformers", "webkit" }
	"marmalade-upload" -> { "aeson", "bytestring", "cmdargs", "directory", "failure", "http-client", "http-client-multipart", "http-types", "keyring", "mtl", "network", "process", "transformers", "utf8-string" }
	"marxup" -> { "filepath", "labeled-tree", "mtl", "parsec", "pretty" }
	"mastermind" -> { "random" }
	"matchers" -> { "bytestring", "parsec", "prednote", "text", "time" }
	"math-functions" -> { "deepseq", "erf", "vector", "vector-th-unbox" }
	"mathblog" -> { "ConfigFile", "HStringTemplate", "HUnit", "SHA", "bytestring", "directory", "filepath", "old-locale", "pandoc", "pandoc-types", "process", "test-framework", "test-framework-hunit", "time", "unix" }
	"mathgenealogy" -> { "HTTP", "binary", "bytestring", "cmdargs", "containers", "directory", "fgl", "filepath", "graphviz", "process", "safe", "tagsoup", "text" }
	"mathlink" -> { "array", "containers", "haskell98", "ix-shapable", "mtl" }
	"matlab" -> { "Cabal", "array", "filepath", "unix" }
	"matrix" -> { "deepseq", "primitive", "vector" }
	"matrix-market" -> { "bytestring" }
	"matrix-market-pure" -> { "array", "containers" }
	"matsuri" -> { "ConfigFile", "MissingH", "XMPP", "containers", "directory", "mtl", "network", "old-locale", "split", "time", "vty", "vty-ui" }
	"maude" -> { "directory", "filepath", "process", "process-extras", "temporary", "text", "xml" }
	"maxent" -> { "ad", "lagrangian", "nonlinear-optimization", "vector" }
	"maximal-cliques" -> { "containers", "vector" }
	"maxsharing" -> { "HaLeX", "IndentParser", "base-unicode-symbols", "boxes", "containers", "containers-unicode-symbols", "mtl", "parsec", "process", "uuagc", "uuagc-cabal" }
	"maybench" -> { "Cabal", "benchpress", "directory", "filepath", "mtl", "old-time", "process", "time" }
	"mbox" -> { "old-locale", "safe", "text", "time" }
	"mbox-tools" -> { "bytestring", "codec-mbox", "containers", "fclabels", "hsemail", "mtl", "parsec", "process", "pureMD5", "random" }
	"mcmc-synthesis" -> { "MonadRandom" }
	"mcpi" -> { "mcpi", "network", "pipes", "split", "transformers" }
	"mdo" -> { "process" }
	"mecab" -> { "bytestring", "text" }
	"mecha" -> {  }
	"mediawiki" -> { "HTTP", "mediawiki", "mime", "network", "pretty", "utf8-string", "xml" }
	"mega-sdist" -> { "bytestring", "conduit", "containers", "directory", "http-conduit", "http-types", "network", "shelly", "system-fileio", "system-filepath", "tar", "text", "transformers", "zlib-conduit" }
	"meldable-heap" -> {  }
	"melody" -> { "ParsecTools", "containers", "either", "lens", "melody", "mtl", "parsec" }
	"memcache" -> { "binary", "blaze-builder", "bytestring", "network" }
	"memcached" -> { "bytestring", "network", "utf8-light" }
	"memexml" -> { "hxt" }
	"memo-sqlite" -> { "direct-sqlite" }
	"memoize" -> { "template-haskell" }
	"memscript" -> { "readline" }
	"mersenne-random" -> { "old-time" }
	"mersenne-random-pure64" -> { "old-time", "random" }
	"meta-par" -> { "abstract-deque", "abstract-par", "bytestring", "containers", "deepseq", "mtl", "mwc-random", "transformers", "vector" }
	"meta-par-accelerate" -> { "QuickCheck", "abstract-deque", "abstract-par", "abstract-par-accelerate", "accelerate", "array", "meta-par", "transformers", "vector" }
	"metadata" -> { "text", "time" }
	"metamorphic" -> {  }
	"metaplug" -> { "Cabal", "filepath", "ghc", "haskell98" }
	"metrics" -> { "ansi-terminal", "containers", "lens", "mtl", "mwc-random", "primitive", "text", "time", "unix", "unordered-containers", "vector", "vector-algorithms" }
	"metricsd-client" -> { "network" }
	"metronome" -> { "data-lens", "data-lens-template", "hosc", "stm" }
	"mi" -> { "haskell-src-meta", "parsec", "split", "template-haskell" }
	"microbench" -> { "time" }
	"microtimer" -> { "time" }
	"midi" -> { "QuickCheck", "binary", "bytestring", "event-list", "explicit-exception", "monoid-transformer", "non-negative", "random", "transformers", "utility-ht" }
	"midi-alsa" -> { "alsa-seq", "data-accessor", "midi", "utility-ht" }
	"midimory" -> { "alsa-core", "alsa-seq", "containers", "random", "transformers", "wx", "wxcore" }
	"midisurface" -> { "alsa-core", "alsa-seq", "containers", "gtk", "mtl", "stm" }
	"mighttpd" -> { "bytestring", "c10k", "directory", "filepath", "haskell98", "hdaemonize", "hslogger", "network", "parsec", "time", "unix", "webserver" }
	"mighttpd2" -> { "array", "blaze-builder", "byteorder", "bytestring", "case-insensitive", "conduit", "conduit-extra", "directory", "filepath", "http-client", "http-date", "http-types", "io-choice", "mighttpd2", "network", "old-locale", "parsec", "process-conduit", "resourcet", "time", "transformers", "unix", "unix-time", "unordered-containers", "wai", "wai-app-file-cgi", "wai-logger", "warp" }
	"miku" -> { "air", "bytestring", "containers", "data-default", "hack2", "hack2-contrib", "mtl", "utf8-string" }
	"mime" -> { "text" }
	"mime-directory" -> { "base64-string", "bytestring", "containers", "old-locale", "regex-pcre", "time" }
	"mime-mail" -> { "base64-bytestring", "blaze-builder", "bytestring", "filepath", "process", "random", "text" }
	"mime-mail-ses" -> { "base64-bytestring", "byteable", "bytestring", "conduit", "cryptohash", "http-client", "http-client-conduit", "http-conduit", "http-types", "mime-mail", "old-locale", "text", "time", "transformers", "xml-conduit", "xml-types" }
	"mime-string" -> { "base64-string", "bytestring", "iconv", "mtl", "network", "old-time" }
	"mime-types" -> { "bytestring", "containers", "text" }
	"mines" -> { "directory", "mtl", "random" }
	"minesweeper" -> { "binary", "binary-generic", "bytestring", "cairo", "containers", "directory", "filepath", "glade", "gtk", "random", "time" }
	"miniball" -> { "vector" }
	"minimal-configuration" -> { "containers", "directory", "filepath", "tconfig" }
	"minimorph" -> { "text" }
	"minimung" -> { "GLUT", "haskell98", "unix" }
	"minions" -> { "MissingH", "ansi-terminal", "process", "time" }
	"minioperational" -> { "containers", "template-haskell", "transformers" }
	"miniplex" -> { "colock", "directory", "mtl", "network", "stm", "unix" }
	"minirotate" -> { "data-accessor", "data-accessor-template", "directory", "filepath", "mtl", "old-locale", "old-time", "process", "safe", "split", "template-haskell" }
	"ministg" -> { "containers", "directory", "filepath", "monads-tf", "parsec", "pretty", "transformers", "xhtml" }
	"miniutter" -> { "binary", "containers", "ghc-prim", "minimorph", "text" }
	"misfortune" -> { "bytestring", "cereal", "directory", "filepath", "knob", "monad-loops", "random-fu", "regex-base", "regex-pcre", "semigroups", "text", "utf8-string", "vector" }
	"missing-foreign" -> {  }
	"missing-py2" -> { "MissingH", "anydbm" }
	"mix-arrows" -> {  }
	"mixed-strategies" -> { "array", "containers", "mixed-strategies", "simple-tabular" }
	"mkbndl" -> { "directory", "filepath", "haskell98" }
	"mkcabal" -> { "directory", "extensible-exceptions", "mtl", "old-locale", "old-time", "pcre-light", "pretty", "readline" }
	"ml-w" -> { "mtl", "parsec", "pretty" }
	"mlist" -> { "haskell98" }
	"mmap" -> { "bytestring" }
	"mmorph" -> { "transformers" }
	"mmtl" -> {  }
	"mmtl-base" -> { "mmtl" }
	"modbus-tcp" -> { "base-unicode-symbols", "bytestring", "cereal", "network" }
	"modelicaparser" -> { "containers", "parsec" }
	"modsplit" -> { "directory", "filepath", "haskell98", "mtl", "utf8-string" }
	"modular-arithmetic" -> {  }
	"modular-prelude" -> { "basic-prelude", "bytestring", "containers", "data-default", "hashable", "system-filepath", "text", "transformers", "unordered-containers", "vector" }
	"modular-prelude-classy" -> { "classy-prelude", "modular-prelude" }
	"module-management" -> { "Cabal", "Extra", "HUnit", "ansi-wl-pprint", "applicative-extras", "bytestring", "cmdargs", "containers", "data-default", "debian", "directory", "filepath", "haskeline", "haskell-src-exts", "lens", "lifted-base", "module-management", "monad-control", "mtl", "pretty", "process", "process-progress", "pureMD5", "regex-compat", "set-extra", "syb", "system-fileio", "temporary", "transformers-base" }
	"modulespection" -> { "exceptions", "filepath", "ghc", "ghc-paths", "template-haskell", "temporary", "transformers" }
	"modulo" -> { "atto-lisp", "data-default", "directory", "haskell-src", "language-c", "mtl", "nats", "pandoc-types", "parsec", "prettify", "process", "semigroups", "text" }
	"moe" -> { "air", "bytestring", "data-default", "dlist", "mtl", "utf8-string" }
	"mohws" -> { "HTTP", "bytestring", "containers", "data-accessor", "directory", "explicit-exception", "filepath", "html", "network", "old-locale", "old-time", "parsec", "process", "transformers", "unix", "utility-ht" }
	"monad-abort-fd" -> { "data-default", "monad-control", "mtl", "transformers", "transformers-abort", "transformers-base" }
	"monad-atom" -> { "containers", "ghc-prim", "mtl" }
	"monad-atom-simple" -> { "containers", "ghc-prim", "mtl" }
	"monad-bool" -> {  }
	"monad-codec" -> { "binary", "containers", "data-lens", "mtl" }
	"monad-control" -> { "base-unicode-symbols", "transformers", "transformers-base" }
	"monad-coroutine" -> { "monad-parallel", "transformers" }
	"monad-exception" -> { "monad-control", "mtl-evil-instances", "transformers", "transformers-base" }
	"monad-extras" -> { "mmorph", "monad-control", "stm", "transformers", "transformers-base" }
	"monad-fork" -> { "monad-control" }
	"monad-interleave" -> {  }
	"monad-journal" -> { "either", "mtl", "transformers" }
	"monad-logger" -> { "blaze-builder", "bytestring", "conduit", "fast-logger", "lifted-base", "monad-control", "monad-loops", "mtl", "resourcet", "stm", "stm-chans", "template-haskell", "text", "transformers", "transformers-base" }
	"monad-logger-syslog" -> { "bytestring", "fast-logger", "hsyslog", "monad-logger", "text", "transformers" }
	"monad-loops" -> {  }
	"monad-loops-stm" -> { "stm" }
	"monad-lrs" -> { "containers" }
	"monad-memo" -> { "array", "containers", "mtl", "primitive", "transformers", "vector" }
	"monad-mersenne-random" -> { "mersenne-random-pure64" }
	"monad-ox" -> { "containers", "mtl", "text", "vector" }
	"monad-par" -> { "abstract-deque", "abstract-par", "array", "containers", "deepseq", "monad-par-extras", "mtl", "mwc-random", "parallel" }
	"monad-par-extras" -> { "abstract-par", "cereal", "deepseq", "mtl", "random", "transformers" }
	"monad-parallel" -> { "parallel", "transformers" }
	"monad-param" -> { "mtl", "stm" }
	"monad-peel" -> { "extensible-exceptions", "transformers" }
	"monad-primitive" -> { "primitive", "transformers" }
	"monad-products" -> { "semigroupoids" }
	"monad-ran" -> { "ghc-prim", "mtl" }
	"monad-resumption" -> { "mtl", "transformers" }
	"monad-st" -> { "transformers" }
	"monad-state" -> { "AbortT-transformers", "fclabels", "monads-tf", "transformers" }
	"monad-statevar" -> { "transformers" }
	"monad-stlike-io" -> { "bytestring", "containers", "deepseq", "monads-tf" }
	"monad-stlike-stm" -> { "monad-stlike-io", "stm" }
	"monad-stm" -> { "stm", "transformers" }
	"monad-supply" -> { "mtl" }
	"monad-task" -> { "mtl", "transformers" }
	"monad-tx" -> {  }
	"monad-unify" -> { "mtl", "syb", "unordered-containers" }
	"monad-wrap" -> { "transformers" }
	"monadIO" -> { "mtl", "stm" }
	"monadLib" -> {  }
	"monadLib-compose" -> { "monadLib" }
	"monadacme" -> {  }
	"monadbi" -> { "mtl" }
	"monadcryptorandom" -> { "bytestring", "crypto-api", "mtl", "tagged", "transformers" }
	"monadfibre" -> { "monadbi" }
	"monadic-arrays" -> { "array", "stm", "transformers" }
	"monadiccp" -> { "containers", "mtl", "parsec", "pretty", "random" }
	"monadiccp-gecode" -> { "containers", "monadiccp", "mtl" }
	"monadio-unwrappable" -> { "monads-tf", "transformers" }
	"monadlist" -> {  }
	"monadloc" -> { "template-haskell", "transformers" }
	"monadloc-pp" -> { "filepath", "haskell-src-exts", "monadloc", "pretty", "syb" }
	"monadplus" -> {  }
	"monads-fd" -> { "mtl", "transformers" }
	"monads-tf" -> { "transformers" }
	"monadtransform" -> { "transformers" }
	"monarch" -> { "binary", "bytestring", "containers", "lifted-base", "monad-control", "mtl", "network", "pool-conduit", "stm", "transformers", "transformers-base" }
	"mongoDB" -> { "array", "binary", "bson", "bytestring", "containers", "cryptohash", "hashtables", "lifted-base", "monad-control", "mtl", "network", "parsec", "random", "random-shuffle", "text", "transformers-base" }
	"mongodb-queue" -> { "data-default", "lifted-base", "monad-control", "mongoDB", "network", "text", "transformers" }
	"mongrel2-handler" -> { "attoparsec", "blaze-builder", "blaze-textual", "bytestring", "case-insensitive", "containers", "http-types", "text", "zeromq-haskell" }
	"monitor" -> { "filepath", "hinotify", "process" }
	"mono-foldable" -> { "bytestring", "text", "vector" }
	"mono-traversable" -> { "bytestring", "comonad", "containers", "dlist", "dlist-instances", "hashable", "semigroupoids", "semigroups", "text", "transformers", "unordered-containers", "vector", "vector-algorithms", "vector-instances" }
	"monoid-extras" -> { "groups", "semigroupoids", "semigroups" }
	"monoid-owns" -> { "bytestring", "containers" }
	"monoid-record" -> {  }
	"monoid-statistics" -> {  }
	"monoid-subclasses" -> { "bytestring", "containers", "primes", "text", "vector" }
	"monoid-transformer" -> {  }
	"monoidplus" -> { "contravariant", "semigroups", "transformers" }
	"monoids" -> { "array", "bytestring", "containers", "fingertree", "parallel", "text" }
	"monomorphic" -> { "transformers" }
	"montage" -> { "ListLike", "aeson", "bytestring", "containers", "old-locale", "pool-conduit", "protocol-buffers", "protocol-buffers-descriptor", "riak-bump", "safe", "stats-web", "stm", "system-uuid", "text", "time", "unordered-containers", "zeromq-haskell" }
	"montage-client" -> { "ListLike", "aeson", "bytestring", "containers", "mtl", "old-locale", "pool-conduit", "protocol-buffers", "protocol-buffers-descriptor", "riak-bump", "safe", "stats-web", "stm", "system-uuid", "text", "text-format", "time", "unordered-containers", "zeromq-haskell" }
	"monte-carlo" -> { "gsl-random", "mtl", "vector" }
	"moo" -> { "array", "gray-code", "mersenne-random-pure64", "monad-mersenne-random", "mtl", "random", "random-shuffle", "time" }
	"morfette" -> { "QuickCheck", "array", "binary", "bytestring", "containers", "directory", "filepath", "mtl", "pretty", "text", "utf8-string", "vector" }
	"morfeusz" -> { "bytestring", "containers", "directory", "mtl", "text" }
	"mount" -> { "bytestring" }
	"mp3decoder" -> { "binary-strict", "bytestring", "haskell98", "mtl" }
	"mpdmate" -> { "directory", "network", "powermate", "unix" }
	"mpppc" -> { "ansi-terminal", "bytestring", "split", "text" }
	"mpretty" -> { "ansi-terminal", "containers", "data-lens-fd", "data-lens-template", "mtl", "orders", "text", "transformers" }
	"mprover" -> { "containers", "haskell98", "mtl", "parsec", "pretty", "transformers", "unbound" }
	"mps" -> { "array", "bytestring", "containers", "directory", "filepath", "monoid-owns", "old-locale", "old-time", "parallel", "parsec", "regexpr", "template-haskell", "time", "utf8-string" }
	"mpvguihs" -> { "directory", "filepath", "gtk", "mtl", "process", "template-haskell", "unix" }
	"msgpack" -> { "attoparsec", "blaze-builder", "bytestring", "containers", "deepseq", "ghc-prim", "hashable", "mtl", "template-haskell", "text", "unordered-containers", "vector" }
	"msgpack-idl" -> { "blaze-builder", "bytestring", "cmdargs", "containers", "directory", "filepath", "msgpack", "msgpack-idl", "peggy", "shakespeare-text", "template-haskell", "text" }
	"msgpack-rpc" -> { "attoparsec-conduit", "bytestring", "conduit", "monad-control", "msgpack", "mtl", "network", "network-conduit", "random", "text" }
	"mstate" -> { "monad-peel", "mtl", "stm" }
	"msu" -> { "directory", "filepath", "mtl", "parsec", "process", "xdg-basedir" }
	"mtgoxapi" -> { "HTTP", "SHA", "aeson", "attoparsec", "base16-bytestring", "base64-bytestring", "bytestring", "curl", "either", "errors", "hashable", "ixset", "network", "text", "time", "transformers", "unordered-containers", "vector", "watchdog" }
	"mtl" -> { "transformers" }
	"mtl-evil-instances" -> { "monad-control", "mtl", "transformers", "transformers-base" }
	"mtl-tf" -> {  }
	"mtlparse" -> { "mtl" }
	"mtlx" -> { "QuickCheck", "mtl" }
	"mtp" -> { "filepath", "unix" }
	"mtree" -> { "bifunctors" }
	"mucipher" -> {  }
	"mueval" -> { "Cabal", "containers", "directory", "extensible-exceptions", "filepath", "hint", "mtl", "process", "show", "simple-reflect", "unix", "utf8-string" }
	"multext-east-msd" -> {  }
	"multiarg" -> { "bifunctors", "containers" }
	"multifocal" -> { "HaXml", "array", "containers", "haskell-src-exts", "hxt", "hxt-xpath", "mtl", "parsec", "pointless-haskell", "pointless-lenses", "pointless-rewrite", "pretty", "process", "syb" }
	"multimap" -> { "containers" }
	"multipass" -> { "binary", "containers", "ghc-prim", "hashable", "keys", "math-functions", "newtype", "unordered-containers" }
	"multiplate" -> { "transformers" }
	"multiplate-simplified" -> { "multiplate", "transformers" }
	"multiplicity" -> { "containers", "fez-conf", "mtl", "process" }
	"multirec" -> { "template-haskell" }
	"multirec-alt-deriver" -> { "containers", "mtl", "multirec", "syb", "template-haskell", "th-expand-syns" }
	"multirec-binary" -> { "binary", "multirec" }
	"multiset" -> { "containers" }
	"multiset-comb" -> {  }
	"multisetrewrite" -> { "haskell98", "stm" }
	"murder" -> { "AspectAG", "HList", "ListLike", "TTTAS", "containers", "template-haskell", "uu-parsinglib", "uulib" }
	"murmur-hash" -> { "bytestring" }
	"murmurhash3" -> { "haskell2010" }
	"music-articulation" -> { "random", "semigroupoids", "semigroups", "time" }
	"music-diatonic" -> {  }
	"music-dynamics" -> { "music-dynamics-literal", "random", "semigroupoids", "semigroups", "time" }
	"music-dynamics-literal" -> {  }
	"music-graphics" -> { "blaze-svg", "bytestring", "diagrams-core", "diagrams-lib", "diagrams-svg", "lens", "music-pitch", "music-preludes", "music-score", "process" }
	"music-parts" -> { "data-default", "random", "roman-numerals", "semigroupoids", "semigroups", "time" }
	"music-pitch" -> { "containers", "music-pitch-literal", "random", "semigroupoids", "semigroups", "time", "vector-space" }
	"music-pitch-literal" -> { "semigroups" }
	"music-preludes" -> { "data-default", "lens", "lilypond", "monadplus", "music-dynamics", "music-dynamics-literal", "music-parts", "music-pitch", "music-pitch-literal", "music-score", "musicxml2", "process", "reverse-apply", "semigroups", "vector-space", "vector-space-points" }
	"music-score" -> { "HCodecs", "NumInstances", "QuickCheck", "comonad", "containers", "data-default", "lens", "lilypond", "monadplus", "monoid-extras", "music-dynamics-literal", "music-pitch-literal", "musicxml2", "nats", "parsec", "prettify", "process", "profunctors", "semigroupoids", "semigroups", "transformers", "vector-space", "vector-space-points", "void" }
	"music-sibelius" -> { "aeson", "bytestring", "monadplus", "music-pitch-literal", "music-preludes", "music-score", "semigroups", "unordered-containers" }
	"music-util" -> { "Cabal", "containers", "fgl", "process", "shelly", "text" }
	"musicbrainz-email" -> { "HTTP", "aeson", "amqp", "blaze-builder", "errors", "ghc-prim", "heist", "mime-mail", "mtl", "musicbrainz-email", "network", "network-metrics", "optparse-applicative", "postgresql-simple", "text", "time", "transformers", "xmlhtml" }
	"musicxml" -> { "HaXml", "containers", "directory", "old-time", "pretty" }
	"musicxml2" -> { "data-default", "music-dynamics-literal", "music-pitch-literal", "nats", "reverse-apply", "semigroups", "type-unary", "xml" }
	"mustache2hs" -> { "blaze-builder", "bytestring", "filepath", "haskell-src", "parsec", "text", "transformers", "utf8-string" }
	"mutable-iter" -> { "MonadCatchIO-transformers", "iteratee", "transformers", "vector" }
	"mute-unmute" -> { "directory", "filepath", "hslogger", "hslogger-template", "mtl", "network-dbus", "process" }
	"mvclient" -> { "Crypto", "base-unicode-symbols", "binary", "bytestring", "containers", "control-event", "data-binary-ieee754", "hexpat", "http-enumerator", "maccatcher", "mtl", "network", "parsec", "time", "uuid" }
	"mwc-random" -> { "primitive", "time", "vector" }
	"mwc-random-monad" -> { "monad-primitive", "mwc-random", "primitive", "transformers", "vector" }
	"mybitcoin-sci" -> { "cgi", "curl", "directory", "mtl", "process", "split" }
	"mysnapsession" -> { "bytestring", "cereal", "clientsession", "containers", "mtl", "random", "regex-posix", "snap", "snap-core", "time" }
	"mysnapsession-example" -> { "bytestring", "clientsession", "heist", "mtl", "mysnapsession", "snap", "snap-core", "snap-server", "text", "time" }
	"mysql" -> { "bytestring", "containers" }
	"mysql-effect" -> { "bytestring", "extensible-effects", "mysql-simple" }
	"mysql-simple" -> { "attoparsec", "base16-bytestring", "blaze-builder", "blaze-textual", "bytestring", "mysql", "old-locale", "pcre-light", "text", "time" }
	"mysql-simple-quasi" -> { "haskell-src-meta", "mysql-simple", "template-haskell" }
	"n-m" -> { "HSH", "mtl", "process" }
	"named-formlet" -> { "blaze-html", "bytestring", "containers", "mtl", "text", "transformers" }
	"named-lock" -> { "containers" }
	"named-records" -> { "binary", "names", "template-haskell" }
	"names" -> { "template-haskell" }
	"nano-cryptr" -> { "bytestring" }
	"nano-hmac" -> { "bytestring" }
	"nano-md5" -> { "bytestring" }
	"nanoAgda" -> { "BNFC-meta", "cmdargs", "containers", "mtl", "parsec", "pretty", "transformers" }
	"nanocurses" -> { "bytestring", "unix" }
	"nanomsg" -> { "bytestring" }
	"nanomsg-haskell" -> { "bytestring" }
	"nanoparsec" -> { "ListLike", "bytestring" }
	"nanospec" -> {  }
	"narc" -> { "HDBC", "HUnit", "QuickCheck", "mtl", "random" }
	"nat" -> {  }
	"nats" -> {  }
	"natural-number" -> { "type-equality", "type-level-natural-number", "type-level-natural-number-induction" }
	"natural-numbers" -> {  }
	"natural-sort" -> { "bytestring", "parsec", "text" }
	"naturalcomp" -> { "text", "utf8-string" }
	"naturals" -> {  }
	"nbt" -> { "array", "bytestring", "cereal", "text" }
	"nc-indicators" -> { "array", "attoparsec", "bytestring", "containers", "gtk", "hflags", "lens", "pipes", "stm", "unix" }
	"ncurses" -> { "containers", "text", "transformers" }
	"neat" -> { "filepath", "neat", "parsec" }
	"neat-interpolation" -> { "parsec", "template-haskell" }
	"nehe-tuts" -> { "GLFW-b", "GLURaw", "OpenGLRaw", "array", "bytestring", "cereal", "directory", "random" }
	"neither" -> { "failure", "transformers" }
	"nemesis" -> { "Glob", "air", "containers", "directory", "dlist", "mtl", "process", "time" }
	"nemesis-titan" -> { "HStringTemplate", "air", "bytestring", "directory", "filepath", "hspec", "nemesis", "random", "uuid" }
	"nerf" -> { "IntervalMap", "binary", "bytestring", "cmdargs", "containers", "crf-chain1", "data-named", "dawg", "directory", "filepath", "monad-ox", "mtl", "network", "polimorf", "polysoup", "sgd", "tagsoup", "temporary", "text", "text-binary", "tokenize", "vector" }
	"net-concurrent" -> { "bytestring", "containers", "ghc-binary", "hslogger", "monad-loops", "network" }
	"netclock" -> { "bytestring", "hosc", "network" }
	"netcore" -> { "HList", "ansi-wl-pprint", "bimap", "binary", "binary-strict", "bytestring", "containers", "fgl", "hslogger", "mtl", "multiset", "network", "parsec", "process", "random", "syb" }
	"netlines" -> { "HTF", "bytestring", "contstuff", "enumerator", "random", "text", "time" }
	"netlink" -> { "bytestring", "cereal", "containers", "monad-loops", "unix" }
	"netlist" -> { "binary", "containers", "syb" }
	"netlist-to-vhdl" -> { "netlist", "pretty" }
	"netpbm" -> { "attoparsec", "attoparsec-binary", "bytestring", "storable-record", "unordered-containers", "vector", "vector-th-unbox" }
	"netspec" -> { "aeson", "binary", "bytestring", "mtl", "network", "template-haskell", "text", "transformers" }
	"netstring-enumerator" -> { "bytestring", "enumerator", "transformers" }
	"nettle" -> { "byteable", "bytestring", "crypto-cipher-types", "securemem", "tagged" }
	"nettle-frp" -> { "bimap", "binary", "bytestring", "containers", "mtl", "nettle-openflow", "network", "network-data", "random", "time" }
	"nettle-netkit" -> { "containers", "directory", "filepath", "mtl", "nettle-openflow", "unix" }
	"nettle-openflow" -> { "HList", "array", "bimap", "binary", "binary-strict", "bytestring", "containers", "mtl", "network", "parsec", "syb" }
	"netwire" -> { "containers", "deepseq", "netwire", "parallel", "random", "semigroups", "time", "transformers" }
	"network" -> { "bytestring", "parsec", "unix" }
	"network-address" -> { "Cabal", "criterion" }
	"network-api-support" -> { "aeson", "attoparsec", "bytestring", "case-insensitive", "http-client", "http-client-tls", "http-types", "text", "time", "tls" }
	"network-bitcoin" -> { "HTTP", "QuickCheck", "aeson", "attoparsec", "bytestring", "network", "network-bitcoin", "text", "unordered-containers", "vector" }
	"network-bytestring" -> { "bytestring", "network", "unix" }
	"network-conduit" -> { "conduit" }
	"network-conduit-tls" -> { "bytestring", "conduit", "conduit-extra", "connection", "cprng-aes", "data-default", "monad-control", "network", "streaming-commons", "system-fileio", "system-filepath", "tls", "transformers" }
	"network-connection" -> { "bytestring", "containers", "network", "network-bytestring", "stm" }
	"network-data" -> { "bytestring", "cereal", "pretty", "prettyclass" }
	"network-dbus" -> { "binary", "bytestring", "containers", "mtl", "network", "parsec", "unix", "utf8-string" }
	"network-dns" -> { "binary", "bytestring", "cereal", "containers", "data-textual", "hashable", "network-ip", "parsers", "tagged", "text-latin1", "text-printer" }
	"network-enumerator" -> { "bytestring", "enumerator", "network", "transformers" }
	"network-fancy" -> { "bytestring" }
	"network-house" -> { "array", "containers", "mtl" }
	"network-info" -> {  }
	"network-interfacerequest" -> { "bytestring", "ioctl", "network" }
	"network-ip" -> { "binary", "cereal", "data-default-class", "data-dword", "data-endian", "data-textual", "hashable", "parsers", "tagged", "text-printer" }
	"network-metrics" -> { "binary", "bytestring", "data-default", "network", "random", "time" }
	"network-minihttp" -> { "HsOpenSSL", "binary", "binary-strict", "bytestring", "containers", "filepath", "mtl", "network", "network-bytestring", "network-connection", "network-dns", "old-locale", "stm", "tagsoup", "time", "unix" }
	"network-multicast" -> { "network" }
	"network-netpacket" -> { "bytestring", "foreign-storable-asymmetric", "ioctl", "network", "network-interfacerequest" }
	"network-pgi" -> { "attoparsec", "attoparsec-enumerator", "bytestring", "enumerator", "tnet" }
	"network-protocol-xmpp" -> { "bytestring", "gnuidn", "gnutls", "gsasl", "libxml-sax", "monads-tf", "network", "text", "transformers", "xml-types" }
	"network-rpca" -> { "array", "binary", "binary-strict", "bytestring", "codec-libevent", "containers", "control-timeout", "network", "network-bytestring", "stm" }
	"network-server" -> { "network", "unix" }
	"network-simple" -> { "bytestring", "exceptions", "network", "transformers" }
	"network-simple-sockaddr" -> { "bytestring", "directory", "exceptions", "network", "transformers" }
	"network-simple-tls" -> { "bytestring", "certificate", "cprng-aes", "exceptions", "network", "network-simple", "tls", "tls-extra", "transformers" }
	"network-socket-options" -> { "network" }
	"network-stream" -> { "binary", "bytestring", "cereal", "enumerator", "network", "stm", "text", "transformers" }
	"network-topic-models" -> { "bayes-stack", "bimap", "bytestring", "cereal", "containers", "deepseq", "directory", "filepath", "logfloat", "mwc-random", "optparse-applicative", "random-fu", "statistics", "stm", "text", "transformers", "vector" }
	"network-transport" -> { "binary", "bytestring", "transformers" }
	"network-transport-tcp" -> { "bytestring", "containers", "data-accessor", "network", "network-transport" }
	"network-transport-tests" -> { "ansi-terminal", "bytestring", "containers", "mtl", "network-transport", "random" }
	"network-transport-zeromq" -> { "async", "binary", "bytestring", "containers", "distributed-process", "exceptions", "network-transport", "network-transport-zeromq", "random", "semigroups", "stm", "stm-chans", "transformers", "void", "zeromq4-haskell" }
	"network-websocket" -> { "haskell98", "network", "webserver" }
	"networked-game" -> { "binary", "bytestring", "containers", "network", "time", "transformers" }
	"newports" -> { "directory", "old-time" }
	"newsynth" -> { "containers", "fixedprec", "newsynth", "random", "superdoc", "time" }
	"newt" -> { "HUnit", "QuickCheck", "Unixutils", "array", "bytestring", "cmdargs", "containers", "directory", "filemanip", "filepath", "mtl", "newt", "process", "safe", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "text", "uuid" }
	"newtype" -> {  }
	"newtype-generics" -> {  }
	"newtype-th" -> { "haskell-src-meta", "newtype", "syb", "template-haskell" }
	"newtyper" -> { "Kleislify", "newtype" }
	"nextstep-plist" -> { "QuickCheck", "parsec", "pretty" }
	"ngrams-loader" -> { "attoparsec", "machines", "mtl", "ngrams-loader", "parseargs", "resourcet", "sqlite-simple", "text" }
	"nicify" -> { "nicify", "parsec", "transformers" }
	"nikepub" -> { "GoogleChart", "HStringTemplate", "HTTP", "containers", "filepath", "haskell98", "haxr", "hs-twitter", "hxt", "json", "network", "old-locale", "old-time", "regex-compat", "regex-posix", "syb", "time" }
	"nimber" -> { "arithmoi" }
	"nitro" -> { "bytestring" }
	"nixos-types" -> {  }
	"nkjp" -> { "bytestring", "containers", "data-named", "filepath", "polysoup", "tar", "text", "zlib" }
	"nlp-scores" -> { "containers" }
	"nlp-scores-scripts" -> { "containers", "nlp-scores", "split", "text" }
	"nm" -> { "nm", "vector" }
	"nme" -> { "bytestring", "utf8-string" }
	"nntp" -> { "bytestring", "monad-loops", "mtl", "network", "old-locale", "parsec", "time" }
	"no-role-annots" -> { "template-haskell" }
	"noise" -> { "blaze-markup", "blaze-svg", "bytestring", "containers", "cryptohash", "network", "noise", "parsec" }
	"non-empty" -> { "QuickCheck", "containers", "utility-ht" }
	"non-negative" -> { "QuickCheck", "utility-ht" }
	"nondeterminism" -> { "containers", "mtl" }
	"nonlinear-optimization" -> { "primitive", "vector" }
	"nonlinear-optimization-ad" -> { "ad", "nonlinear-optimization", "vector" }
	"noodle" -> { "directory", "filepath", "noodle" }
	"normaldistribution" -> { "random" }
	"not-gloss" -> { "GLUT", "OpenGLRaw", "spatial-math", "time" }
	"not-gloss-examples" -> { "GLUT", "X11", "containers", "linear", "not-gloss", "spatial-math" }
	"not-in-base" -> {  }
	"notcpp" -> { "template-haskell" }
	"notmuch-haskell" -> { "containers", "filepath", "haskell98", "old-locale", "parseargs", "time" }
	"notmuch-web" -> { "aeson", "attoparsec", "attoparsec-conduit", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "case-insensitive", "conduit", "containers", "data-default", "directory", "email-validate", "filepath", "hamlet", "hashable", "hjsmin", "http-conduit", "http-types", "lifted-base", "markdown", "mime-mail", "network", "notmuch-web", "old-locale", "process", "process-conduit", "pwstore-fast", "random", "tagsoup", "template-haskell", "text", "text-icu", "time", "transformers", "unordered-containers", "vector", "wai", "wai-extra", "warp", "xss-sanitize", "yaml", "yesod", "yesod-auth", "yesod-static" }
	"np-extras" -> { "containers", "numeric-prelude", "primes" }
	"nptools" -> { "HSH", "ansi-terminal", "array", "bytestring", "colour", "containers", "old-locale", "process", "split", "time", "unix" }
	"nsis" -> { "transformers", "uniplate" }
	"nthable" -> { "type-level" }
	"ntp-control" -> { "bytestring", "bytestring-lexing", "cereal", "network", "old-locale", "time" }
	"null-canvas" -> { "aeson", "containers", "filepath", "scotty", "split", "stm", "text", "transformers", "wai-extra", "warp" }
	"numbering" -> { "containers", "vector" }
	"numbers" -> {  }
	"numerals" -> { "base-unicode-symbols", "containers", "containers-unicode-symbols", "fingertree", "text" }
	"numerals-base" -> { "base-unicode-symbols", "containers", "containers-unicode-symbols", "fingertree" }
	"numeric-extras" -> {  }
	"numeric-limits" -> {  }
	"numeric-prelude" -> { "QuickCheck", "array", "containers", "deepseq", "non-negative", "parsec", "random", "storable-record", "utility-ht" }
	"numeric-quest" -> { "array" }
	"numeric-tools" -> { "ieee754", "primitive", "vector" }
	"nums" -> {  }
	"numtype" -> {  }
	"numtype-tf" -> {  }
	"nyan" -> { "bytestring", "mtl", "ncurses", "text" }
	"nymphaea" -> { "cairo", "containers", "glade", "glib", "gtk", "mtl", "parsec", "random" }
	"oauthenticated" -> { "aeson", "base64-bytestring", "blaze-builder", "bytestring", "case-insensitive", "crypto-random", "cryptohash", "either", "exceptions", "http-client", "http-types", "mtl", "network", "text", "time", "transformers" }
	"obdd" -> { "array", "containers", "mtl", "random" }
	"oberon0" -> { "AspectAG", "HList", "array", "containers", "ghc-prim", "language-c", "mtl", "murder", "oberon0", "template-haskell", "transformers", "uu-parsinglib", "uulib" }
	"obj" -> { "Codec-Image-DevIL", "InfixApplicative", "OpenGL", "OpenGLCheck", "QuickCheck", "array", "binary", "bytestring", "checkers", "containers", "directory", "filepath", "graphicsFormats", "haskell98" }
	"octopus" -> { "array", "bytestring", "containers", "hexpr", "mtl", "parsec", "symbol", "text" }
	"oculus" -> { "either", "monads-tf", "transformers", "vect-floating" }
	"oeis" -> { "HTTP", "network" }
	"off-simple" -> { "parsec3", "vector" }
	"ofx" -> { "parsec", "pretty", "time" }
	"ohloh-hs" -> { "cmdargs", "data-lens", "hxt", "hxt-curl", "pretty-show", "text-format-simple" }
	"oi" -> { "SafeSemaphore", "comonad", "directory", "filepath", "parallel" }
	"ois-input-manager" -> { "hogre" }
	"old-locale" -> {  }
	"old-time" -> { "old-locale" }
	"omaketex" -> { "optparse-applicative", "shakespeare-text", "shelly", "text" }
	"omega" -> { "array", "containers", "directory", "filepath", "pretty", "time" }
	"omnicodec" -> { "bytestring", "cmdargs", "conduit", "sandi", "transformers" }
	"on-a-horse" -> { "arrows", "bytestring", "case-insensitive", "containers", "cookie", "http-types", "mtl", "random", "safe", "split", "text", "time", "transformers", "utf8-string", "wai", "wai-extra", "warp" }
	"one-liner" -> { "ghc-prim", "transformers" }
	"oneOfN" -> {  }
	"only" -> { "parsec", "regex-compat" }
	"onu-course" -> { "smallcheck" }
	"open-pandoc" -> { "HTTP", "bytestring", "containers", "directory", "extensible-exceptions", "filepath", "mtl", "network", "old-time", "parsec", "pretty", "process", "texmath", "utf8-string", "xhtml", "xml", "zip-archive" }
	"open-witness" -> { "mtl", "witness" }
	"opencv-raw" -> { "Cabal", "bindings-DSL", "vector" }
	"openexchangerates" -> { "HTTP", "aeson", "containers", "currency", "errors", "network", "text" }
	"openid" -> { "HTTP", "HsOpenSSL", "bytestring", "containers", "monadLib", "network", "time", "xml" }
	"openpgp" -> { "binary", "bytestring", "bzlib", "utf8-string", "zlib" }
	"openpgp-Crypto" -> { "Crypto", "binary", "bytestring", "openpgp", "utf8-string" }
	"openpgp-asciiarmor" -> { "attoparsec", "base64-bytestring", "bytestring", "cereal" }
	"openpgp-crypto-api" -> { "binary", "bytestring", "cereal", "crypto-api", "cryptocipher", "cryptohash", "openpgp", "tagged", "transformers" }
	"opensoundcontrol-ht" -> { "binary", "bytestring", "hosc", "process", "random", "transformers", "utility-ht" }
	"openssl-createkey" -> { "HsOpenSSL", "directory", "time", "unix" }
	"openssl-streams" -> { "HsOpenSSL", "bytestring", "io-streams", "network" }
	"opentheory" -> { "QuickCheck", "opentheory-primitive", "random" }
	"opentheory-char" -> { "QuickCheck", "opentheory", "opentheory-parser", "opentheory-primitive", "random" }
	"opentheory-parser" -> { "QuickCheck", "opentheory", "opentheory-primitive", "random" }
	"opentheory-prime" -> { "QuickCheck", "opentheory", "opentheory-primitive", "random" }
	"opentheory-primitive" -> { "QuickCheck", "random" }
	"operational" -> { "mtl", "random" }
	"opml" -> { "directory", "xml" }
	"optimization" -> { "ad", "distributive", "linear", "semigroupoids", "vector" }
	"optimusprime" -> { "cmdargs", "containers", "fgl", "flite", "graphviz", "haskell98", "mtl", "parsec", "uniplate", "wl-pprint" }
	"optional" -> {  }
	"options" -> { "bytestring", "containers", "monads-tf", "transformers" }
	"optparse-applicative" -> { "ansi-wl-pprint", "process", "transformers" }
	"orc" -> { "deepseq", "monadIO", "mtl", "process", "random", "stm" }
	"orchid" -> { "QuickCheck", "bytestring", "containers", "encoding", "extensible-exceptions", "fclabels", "filestore", "hscolour", "mtl", "nano-md5", "parsec", "process", "salvia", "salvia-extras", "stm", "time", "unix", "xml" }
	"orchid-demo" -> { "Pipe", "extensible-exceptions", "mtl", "network", "orchid", "salvia", "salvia-extras", "stm" }
	"ord-adhoc" -> { "void" }
	"order-statistics" -> { "containers", "math-functions", "statistics", "vector", "vector-space" }
	"ordered" -> {  }
	"orders" -> { "containers" }
	"ordrea" -> { "containers", "transformers", "vector" }
	"osm-download" -> { "bytestring", "conduit", "containers", "data-default", "directory", "gps", "http-conduit", "http-types", "monad-control", "monadIO", "mtl", "persistent", "persistent-sqlite", "persistent-template", "pool-conduit", "stm", "stm-chans", "text", "time", "transformers", "transformers-base" }
	"osx-ar" -> { "binary", "bytestring", "containers" }
	"ot" -> { "QuickCheck", "aeson", "attoparsec", "binary", "text" }
	"ottparse-pretty" -> { "containers", "parsec", "split", "uniplate" }
	"package-o-tron" -> { "Cabal", "filemanip", "filepath", "groom", "packdeps", "process" }
	"package-vt" -> { "Cabal", "Diff", "filepath", "haskell-src-exts" }
	"packdeps" -> { "Cabal", "bytestring", "containers", "directory", "filepath", "packdeps", "split", "tar", "text", "time" }
	"packed-dawg" -> { "binary", "deepseq", "mtl", "unordered-containers", "vector", "vector-binary-instances" }
	"packedstring" -> { "array" }
	"packer" -> { "array", "bytestring", "mtl" }
	"packunused" -> { "Cabal", "cmdargs", "directory", "filepath", "haskell-src-exts" }
	"pacman-memcache" -> { "deepseq", "directory-tree" }
	"padKONTROL" -> { "containers", "hmidi", "minioperational", "transformers" }
	"palette" -> { "array", "colour", "containers" }
	"palindromes" -> { "array", "bytestring", "containers" }
	"pam" -> {  }
	"panda" -> { "MissingH", "cgi", "containers", "data-default", "directory", "filepath", "gravatar", "haskell98", "hcheat", "kibro", "mps", "network", "old-locale", "old-time", "pandoc", "parsec", "parsedate", "process", "rss", "utf8-string", "xhtml" }
	"pandoc" -> { "HTTP", "aeson", "array", "attoparsec", "base64-bytestring", "binary", "blaze-html", "blaze-markup", "bytestring", "containers", "data-default", "directory", "extensible-exceptions", "filepath", "highlighting-kate", "hslua", "http-conduit", "http-types", "mtl", "network", "old-locale", "old-time", "pandoc", "pandoc-types", "parsec", "process", "random", "syb", "tagsoup", "temporary", "texmath", "text", "time", "unordered-containers", "vector", "xml", "yaml", "zip-archive", "zlib" }
	"pandoc-citeproc" -> { "HTTP", "aeson", "aeson-pretty", "attoparsec", "bytestring", "containers", "directory", "filepath", "ghc-prim", "hexpat", "hs-bibutils", "mtl", "network", "pandoc", "pandoc-citeproc", "pandoc-types", "process", "rfc5051", "split", "syb", "tagsoup", "temporary", "texmath", "text", "vector", "yaml" }
	"pandoc-types" -> { "aeson", "bytestring", "containers", "ghc-prim", "syb" }
	"pandoc-unlit" -> { "pandoc" }
	"pango" -> { "array", "cairo", "containers", "directory", "glib", "mtl", "pretty", "process" }
	"papillon" -> { "directory", "filepath", "monads-tf", "papillon", "template-haskell", "transformers" }
	"pappy" -> {  }
	"para" -> {  }
	"paragon" -> { "array", "bytestring", "containers", "cpphs", "directory", "filepath", "haskell-src-meta", "parsec", "pretty", "syb", "template-haskell", "th-lift", "uniplate" }
	"parallel" -> { "array", "containers", "deepseq" }
	"parallel-io" -> { "containers", "extensible-exceptions", "random" }
	"parallel-tasks" -> { "bytestring", "cereal", "deepseq", "here", "old-locale", "stm", "time", "transformers", "vector", "vector-algorithms" }
	"parallel-tree-search" -> { "parallel", "tree-monad" }
	"parameterized-data" -> { "template-haskell", "type-level" }
	"parco" -> { "mtl" }
	"parco-attoparsec" -> { "attoparsec", "mtl", "parco" }
	"parco-parsec" -> { "mtl", "parco", "parsec" }
	"parcom-lib" -> { "bytestring", "containers", "mtl", "text", "transformers", "utf8-string", "word8" }
	"parconc-examples" -> { "HTTP", "abstract-par", "accelerate", "accelerate-io", "array", "async", "binary", "bytestring", "containers", "deepseq", "directory", "distributed-process", "distributed-process-simplelocalnet", "distributed-static", "fclabels", "filepath", "ghc-prim", "monad-par", "network", "normaldistribution", "parallel", "random", "repa", "stm", "template-haskell", "time", "transformers", "utf8-string", "vector", "xml" }
	"parport" -> { "array" }
	"parse-dimacs" -> { "array", "bytestring", "parsec" }
	"parse-help" -> { "attoparsec", "containers", "data-default", "file-location", "template-haskell", "text", "th-lift" }
	"parseargs" -> { "containers" }
	"parsec" -> { "bytestring", "mtl", "text" }
	"parsec-extra" -> { "monads-tf", "parsec", "transformers" }
	"parsec-numbers" -> { "parsec" }
	"parsec-parsers" -> { "parsec", "parsers" }
	"parsec-permutation" -> { "parsec" }
	"parsec-tagsoup" -> { "parsec", "tagsoup" }
	"parsec-utils" -> { "parsec" }
	"parsec1" -> {  }
	"parsec2" -> {  }
	"parsec3" -> { "bytestring", "mtl", "text" }
	"parsec3-numbers" -> { "parsec" }
	"parsedate" -> { "old-locale", "old-time", "parsec" }
	"parsek" -> {  }
	"parsely" -> { "mtl", "parsec" }
	"parsergen" -> { "bytestring", "directory", "filepath", "parsec", "template-haskell" }
	"parsers" -> { "attoparsec", "charset", "containers", "parsec", "text", "transformers", "unordered-containers" }
	"parsestar" -> { "array", "binary", "bytestring", "bytestring-mmap", "bytestring-nums", "bytestring-show", "containers", "deepseq", "derive", "mtl", "parsestar", "zlib" }
	"parsimony" -> { "bytestring", "text" }
	"partial-isomorphisms" -> { "template-haskell" }
	"partial-lens" -> { "comonad-transformers", "data-lens", "transformers" }
	"partial-uri" -> { "network" }
	"partly" -> { "aeson", "aeson-pretty", "base64-bytestring", "binary", "bytestring", "optparse-applicative", "vector" }
	"passage" -> { "GraphSCC", "array", "containers", "directory", "filepath", "monadLib", "mwc-random", "pretty", "primitive", "process", "random" }
	"pastis" -> { "HTTP", "network" }
	"pasty" -> { "bytestring", "mtl" }
	"patch-combinators" -> {  }
	"path-pieces" -> { "text", "time" }
	"pathtype" -> { "QuickCheck", "directory", "old-time", "time" }
	"patience" -> { "containers" }
	"pattern-arrows" -> { "mtl" }
	"patterns" -> { "bytestring", "conduit", "containers", "mtl", "time", "utf8-string", "zeromq-haskell" }
	"paypal-api" -> { "bytestring", "conduit", "containers", "failure", "http-conduit", "http-types", "mtl", "old-locale", "text", "time", "wai" }
	"pb" -> { "HTTP", "containers", "network", "process" }
	"pbc4hs" -> { "hslua", "string-qq" }
	"pbkdf" -> { "binary", "byteable", "bytedump", "bytestring", "cryptohash", "utf8-string" }
	"pcap" -> { "bytestring", "network", "time" }
	"pcap-conduit" -> { "bytestring", "conduit", "pcap", "transformers" }
	"pcap-enumerator" -> { "bytestring", "enumerator", "pcap", "transformers" }
	"pcd-loader" -> { "attoparsec", "binary", "bytestring", "deepseq", "lens", "linear", "mtl", "pcd-loader", "text", "vector" }
	"pcre-less" -> { "array", "regex-pcre" }
	"pcre-light" -> {  }
	"pcre-light-extra" -> { "bytestring", "pcre-light" }
	"pcre-utils" -> { "array", "attoparsec", "bytestring", "mtl", "regex-pcre-builtin", "vector" }
	"pdf-toolbox-content" -> { "attoparsec", "base16-bytestring", "bytestring", "containers", "encoding", "io-streams", "pdf-toolbox-core", "text" }
	"pdf-toolbox-core" -> { "attoparsec", "bytestring", "containers", "errors", "io-streams", "transformers", "zlib-bindings" }
	"pdf-toolbox-document" -> { "bytestring", "cipher-rc4", "containers", "cryptohash", "io-streams", "pdf-toolbox-content", "pdf-toolbox-core", "text", "transformers" }
	"pdf2line" -> { "FindBin", "binary", "bytestring", "containers", "filepath", "process" }
	"pdfinfo" -> { "mtl", "old-locale", "process-extras", "text", "time" }
	"pdfsplit" -> { "directory", "pdfinfo", "process", "temporary" }
	"pdynload" -> { "directory", "filepath", "ghc", "ghc-paths", "old-time", "process" }
	"peakachu" -> { "GLUT", "List", "TypeCompose", "derive", "template-haskell", "time" }
	"peano-inf" -> { "containers", "lazysmallcheck" }
	"pec" -> { "Cabal", "array", "cmdargs", "containers", "deepseq", "derive", "directory", "filepath", "grm", "mtl", "old-time", "pec", "process", "shake", "syb", "uniplate", "wl-pprint" }
	"pecoff" -> { "binary", "bytestring", "containers" }
	"peg" -> { "containers", "filepath", "haskeline", "logict", "mtl", "parsec" }
	"peggy" -> { "ListLike", "hashtables", "haskell-src-meta", "monad-control", "mtl", "peggy", "template-haskell" }
	"pem" -> { "base64-bytestring", "bytestring", "mtl" }
	"penn-treebank" -> { "containers", "parsec" }
	"penny" -> { "action-permutations", "anonymous-sums", "bytestring", "cereal", "containers", "either", "matchers", "multiarg", "ofx", "old-locale", "parsec", "penny", "prednote", "pretty-show", "rainbow", "semigroups", "split", "text", "time", "transformers" }
	"penny-bin" -> { "containers", "explicit-exception", "multiarg", "parsec", "penny-lib", "pretty-show", "semigroups", "text", "transformers" }
	"penny-lib" -> { "action-permutations", "binary", "bytestring", "cereal", "containers", "explicit-exception", "matchers", "multiarg", "ofx", "old-locale", "parsec", "prednote", "pretty-show", "rainbow", "semigroups", "split", "text", "time", "transformers" }
	"peparser" -> { "binary", "bytestring", "haskell98" }
	"perceptron" -> {  }
	"perdure" -> { "MonadRandom", "QuickCheck", "array", "binary", "bytestring", "cognimeta-utils", "collections-api", "comonad-transformers", "containers", "cryptohash", "data-binary-ieee754", "data-lens", "data-lens-fd", "data-lens-template", "filepath", "ghc-prim", "mtl", "perdure", "primitive", "stm", "strict", "tagged", "template-haskell", "time", "transformers", "unix" }
	"perm" -> { "catch-fd", "mtl", "transformers" }
	"permutation" -> {  }
	"permute" -> { "mtl" }
	"persistent" -> { "aeson", "attoparsec", "base64-bytestring", "blaze-html", "blaze-markup", "bytestring", "conduit", "containers", "lifted-base", "monad-control", "monad-logger", "path-pieces", "resource-pool", "resourcet", "scientific", "silently", "template-haskell", "text", "time", "transformers", "transformers-base", "unordered-containers", "vector" }
	"persistent-cereal" -> { "cereal", "persistent", "text" }
	"persistent-equivalence" -> { "array", "diffarray" }
	"persistent-hssqlppp" -> { "bytestring", "hssqlppp", "monad-control", "mtl", "persistent", "persistent-template", "template-haskell", "text", "th-lift" }
	"persistent-map" -> { "EdisonAPI", "EdisonCore", "LRU", "binary", "containers", "directory", "filepath", "mtl", "stm-io-hooks" }
	"persistent-mongoDB" -> { "aeson", "attoparsec", "bson", "bytestring", "cereal", "conduit", "containers", "monad-control", "mongoDB", "network", "path-pieces", "persistent", "pool-conduit", "resourcet", "text", "time", "transformers" }
	"persistent-mysql" -> { "aeson", "blaze-builder", "bytestring", "conduit", "containers", "monad-control", "mysql", "mysql-simple", "persistent", "resourcet", "text", "transformers" }
	"persistent-postgresql" -> { "aeson", "blaze-builder", "bytestring", "conduit", "containers", "monad-control", "persistent", "postgresql-libpq", "postgresql-simple", "resourcet", "text", "time", "transformers" }
	"persistent-protobuf" -> { "bytestring", "persistent", "protocol-buffers", "protocol-buffers-descriptor", "template-haskell", "text" }
	"persistent-redis" -> { "aeson", "attoparsec", "binary", "bytestring", "hedis", "monad-control", "mtl", "persistent", "scientific", "text", "time", "transformers", "utf8-string" }
	"persistent-refs" -> { "containers", "mtl", "ref-fd", "transformers" }
	"persistent-sqlite" -> { "aeson", "bytestring", "conduit", "containers", "monad-control", "monad-logger", "persistent", "persistent-sqlite", "resourcet", "text", "transformers" }
	"persistent-template" -> { "aeson", "containers", "monad-control", "monad-logger", "persistent", "template-haskell", "text", "transformers", "unordered-containers" }
	"persistent-vector" -> { "deepseq" }
	"pesca" -> { "process" }
	"pez" -> { "failure", "fclabels", "thrist" }
	"pgm" -> { "array", "bytestring", "parsec" }
	"pgsql-simple" -> { "MonadCatchIO-transformers", "attoparsec", "base16-bytestring", "binary", "blaze-builder", "blaze-textual", "bytestring", "containers", "mtl", "network", "old-locale", "pcre-light", "text", "time", "utf8-string" }
	"phasechange" -> { "array", "ghc-prim", "monad-st", "primitive", "vector" }
	"phash" -> {  }
	"phone-push" -> { "HsOpenSSL", "base16-bytestring", "binary", "bytestring", "conduit", "convertible", "http-conduit", "network", "time", "transformers" }
	"phonetic-code" -> { "array", "containers" }
	"phooey" -> { "TypeCompose", "array", "mtl", "reactive", "wx", "wxcore" }
	"photoname" -> { "directory", "exif", "filepath", "mtl", "old-locale", "parsec", "time", "unix" }
	"phraskell" -> { "SDL", "mtl", "transformers" }
	"phybin" -> { "HUnit", "async", "bytestring", "containers", "directory", "fgl", "filepath", "graphviz", "hierarchical-clustering", "parsec", "phybin", "prettyclass", "process", "split", "text", "time", "vector" }
	"pianola" -> { "attoparsec", "attoparsec-iteratee", "bytestring", "comonad", "comonad-transformers", "containers", "either", "errors", "filepath", "free", "iteratee", "logict", "msgpack", "mtl", "network", "pipes", "streams", "text", "transformers" }
	"picosat" -> {  }
	"piet" -> { "Imlib", "array", "containers", "mtl" }
	"piki" -> { "mtl", "parsec", "text" }
	"pipes" -> { "mmorph", "mtl", "transformers" }
	"pipes-aeson" -> { "aeson", "attoparsec", "bytestring", "pipes", "pipes-attoparsec", "pipes-bytestring", "pipes-parse", "transformers" }
	"pipes-attoparsec" -> { "attoparsec", "bytestring", "pipes", "pipes-parse", "text", "transformers" }
	"pipes-attoparsec-streaming" -> { "attoparsec", "bytestring", "pipes-attoparsec-streaming", "pipes-core", "transformers" }
	"pipes-binary" -> { "binary", "bytestring", "ghc-prim", "pipes", "pipes-bytestring", "pipes-parse", "transformers" }
	"pipes-bytestring" -> { "bytestring", "pipes", "pipes-group", "pipes-parse", "profunctors", "transformers" }
	"pipes-cereal-plus" -> { "bytestring", "cereal-plus", "errors", "mtl", "pipes", "pipes-bytestring", "text" }
	"pipes-concurrency" -> { "pipes", "stm" }
	"pipes-conduit" -> { "conduit", "mtl", "pipes-core" }
	"pipes-core" -> { "categories", "lifted-base", "monad-control", "transformers", "void" }
	"pipes-courier" -> { "courier", "pipes" }
	"pipes-csv" -> { "blaze-builder", "bytestring", "cassava", "pipes", "unordered-containers", "vector" }
	"pipes-errors" -> { "errors", "pipes" }
	"pipes-extra" -> { "bytestring", "pipes-core", "transformers" }
	"pipes-group" -> { "free", "pipes", "pipes-parse", "transformers" }
	"pipes-http" -> { "bytestring", "http-client", "http-client-tls", "pipes" }
	"pipes-interleave" -> { "containers", "pipes" }
	"pipes-network" -> { "bytestring", "network", "network-simple", "pipes", "pipes-safe", "transformers" }
	"pipes-network-tls" -> { "bytestring", "network", "network-simple", "network-simple-tls", "pipes", "pipes-network", "pipes-safe", "tls", "transformers" }
	"pipes-p2p" -> { "async", "binary", "bytestring", "errors", "exceptions", "mtl", "network", "network-simple-sockaddr", "pipes", "pipes-concurrency", "pipes-network" }
	"pipes-p2p-examples" -> { "binary", "bytestring", "containers", "errors", "mtl", "network", "network-simple-sockaddr", "pipes", "pipes-network", "pipes-p2p" }
	"pipes-parse" -> { "pipes", "transformers" }
	"pipes-postgresql-simple" -> { "async", "bytestring", "exceptions", "mtl", "pipes", "pipes-concurrency", "pipes-safe", "postgresql-simple", "stm", "text", "transformers" }
	"pipes-rt" -> { "mwc-random", "pipes", "pipes-rt", "time" }
	"pipes-safe" -> { "containers", "exceptions", "pipes", "transformers" }
	"pipes-shell" -> { "async", "bytestring", "pipes", "pipes-bytestring", "pipes-safe", "process", "stm", "stm-chans", "text" }
	"pipes-text" -> { "bytestring", "pipes", "pipes-bytestring", "pipes-group", "pipes-parse", "pipes-safe", "profunctors", "text", "text-stream-decode", "transformers" }
	"pipes-vector" -> { "monad-primitive", "pipes", "primitive", "transformers", "vector" }
	"pipes-websockets" -> {  }
	"pipes-zlib" -> { "bytestring", "pipes", "transformers", "zlib", "zlib-bindings" }
	"pisigma" -> { "array", "bytestring", "containers", "haskeline", "haskeline-class", "mpppc", "mtl", "parsec", "text", "utf8-string" }
	"pkcs1" -> { "bytestring", "random" }
	"pkggraph" -> { "Cabal", "split" }
	"pktree" -> { "containers" }
	"placeholders" -> { "template-haskell" }
	"planar-graph" -> { "attoparsec", "blaze-builder", "bytestring", "containers", "data-clist", "deepseq" }
	"plat" -> { "bytestring", "containers", "mtl", "utf8-string" }
	"playlists" -> { "attoparsec", "bytestring", "optparse-applicative", "playlists", "text", "word8" }
	"plist" -> { "dataenc", "hxt" }
	"plivo" -> { "aeson", "blaze-builder", "bytestring", "errors", "http-streams", "http-types", "io-streams", "network", "old-locale", "time", "unexceptionalio" }
	"plot" -> { "MaybeT", "array", "cairo", "colour", "hmatrix", "mtl", "pango" }
	"plot-gtk" -> { "glib", "gtk", "hmatrix", "mtl", "plot", "process" }
	"plotserver-api" -> { "curl", "split" }
	"plugins" -> { "Cabal", "array", "containers", "directory", "filepath", "ghc", "ghc-prim", "haskell-src", "process", "random" }
	"plugins-auto" -> { "containers", "filepath", "hinotify", "mtl", "plugins", "template-haskell" }
	"plugins-multistage" -> { "plugins", "storable-record", "storable-tuple", "template-haskell", "th-expand-syns" }
	"plumbers" -> { "template-haskell" }
	"ply-loader" -> { "attoparsec", "bytestring", "cereal", "directory", "filepath", "lens", "linear", "parallel-io", "ply-loader", "transformers", "vector" }
	"png-file" -> { "array", "binary-file", "bytestring", "monads-tf", "template-haskell", "zlib" }
	"pngload" -> { "array", "bytestring", "haskell98", "mtl", "parsec", "zlib" }
	"pnm" -> { "bytestring" }
	"pointed" -> { "comonad", "containers", "data-default-class", "semigroupoids", "semigroups", "stm", "tagged", "transformers" }
	"pointedlist" -> { "binary", "derive" }
	"pointfree" -> { "array", "containers", "haskell-src-exts", "transformers" }
	"pointful" -> { "containers", "haskell-src", "mtl", "syb" }
	"pointless-fun" -> {  }
	"pointless-haskell" -> { "GHood", "process", "syb" }
	"pointless-lenses" -> { "QuickCheck", "containers", "derive", "pointless-haskell", "process" }
	"pointless-rewrite" -> { "containers", "mtl", "pointless-haskell", "pointless-lenses", "process" }
	"poker-eval" -> { "array", "mtl", "random", "vector" }
	"polar" -> {  }
	"polh-lexicon" -> { "binary", "containers", "dawg", "directory", "filepath", "mtl", "polysoup", "text", "text-binary", "transformers" }
	"polimorf" -> { "binary", "containers", "text", "text-binary" }
	"poll" -> { "enumset", "utility-ht" }
	"polyToMonoid" -> {  }
	"polynomial" -> { "deepseq", "pretty", "prettyclass", "vector", "vector-space" }
	"polynomials-bernstein" -> { "vector" }
	"polyparse" -> { "bytestring", "text" }
	"polyseq" -> { "array", "bytestring", "cgi", "containers", "free-theorems", "haskell-src", "mtl", "network", "old-locale", "old-time", "parsec", "pretty", "utf8-string", "xhtml" }
	"polysoup" -> { "containers", "polyparse", "tagsoup" }
	"polytypeable" -> {  }
	"polytypeable-utils" -> { "haskell98", "polytypeable" }
	"ponder" -> { "mtl" }
	"pontarius-mediaserver" -> { "HDBC", "HDBC-sqlite3", "hlogger", "pontarius-xmpp", "pontarius-xpmn", "xml-types" }
	"pontarius-xmpp" -> { "attoparsec", "base64-bytestring", "binary", "bytestring", "conduit", "containers", "crypto-api", "crypto-random", "cryptohash", "cryptohash-cryptoapi", "data-default", "dns", "hslogger", "iproute", "lifted-base", "mtl", "network", "pureMD5", "random", "resourcet", "split", "stm", "stringprep", "text", "tls", "tls-extra", "transformers", "unbounded-delays", "void", "xml-conduit", "xml-picklers", "xml-types" }
	"pontarius-xpmn" -> { "containers", "pontarius-xmpp", "random", "text", "xml-types" }
	"pony" -> {  }
	"pool" -> { "monad-control", "transformers" }
	"pool-conduit" -> { "monad-control", "resource-pool", "resourcet", "transformers" }
	"pooled-io" -> { "deepseq", "transformers", "unsafe", "utility-ht" }
	"pop3-client" -> { "mtl", "network" }
	"popenhs" -> { "directory", "haskell98", "unix" }
	"poppler" -> { "array", "bytestring", "cairo", "containers", "glib", "gtk", "mtl" }
	"portable-lines" -> { "bytestring" }
	"portaudio" -> { "containers" }
	"porte" -> { "bytestring", "containers", "extensible-exceptions", "stringsearch" }
	"porter" -> { "haskell2010" }
	"ports" -> { "haskell98", "unix" }
	"posix-acl" -> { "containers" }
	"posix-escape" -> {  }
	"posix-filelock" -> { "transformers", "unix" }
	"posix-paths" -> { "bytestring", "unix" }
	"posix-pty" -> { "bytestring", "unix" }
	"posix-realtime" -> { "unix" }
	"posix-timer" -> { "transformers-base", "unix" }
	"posix-waitpid" -> { "unix" }
	"postcodes" -> { "HTTP", "aeson", "bytestring" }
	"postgresql-copy-escape" -> { "bytestring" }
	"postgresql-libpq" -> { "bytestring" }
	"postgresql-orm" -> { "aeson", "blaze-builder", "bytestring", "directory", "filepath", "ghc-prim", "mtl", "old-locale", "postgresql-simple", "process", "text", "time", "transformers", "unix", "unordered-containers", "vector" }
	"postgresql-simple" -> { "aeson", "attoparsec", "blaze-builder", "blaze-textual", "bytestring", "containers", "hashable", "postgresql-libpq", "scientific", "template-haskell", "text", "time", "transformers", "uuid", "vector" }
	"postie" -> { "attoparsec", "bytestring", "cprng-aes", "data-default-class", "mtl", "network", "pipes", "pipes-bytestring", "pipes-parse", "postie", "tls", "transformers", "uuid" }
	"postmark" -> { "aeson", "attoparsec", "bytestring", "containers", "http-client-tls", "http-types", "network-api-support", "postmark", "text" }
	"postmaster" -> { "bytestring", "containers", "directory", "hopenssl", "hsdns", "hsemail", "hsyslog", "mtl", "network", "old-time", "parsec", "unix" }
	"powermate" -> { "directory", "network", "unix" }
	"powerpc" -> {  }
	"ppm" -> { "mtl" }
	"pqc" -> { "QuickCheck", "random", "stm" }
	"pqueue" -> { "deepseq" }
	"pqueue-mtl" -> { "MaybeT", "containers", "ghc-prim", "mtl", "stateful-mtl", "uvector" }
	"practice-room" -> { "bytestring", "data-default", "directory", "json", "mps" }
	"precis" -> { "Cabal", "containers", "cpphs", "directory", "filepath", "haskell-src-exts", "xhtml" }
	"predicates" -> {  }
	"prednote" -> { "contravariant", "rainbow", "split", "text" }
	"prefix-units" -> {  }
	"prelude-extras" -> {  }
	"prelude-generalize" -> { "comonad", "logict", "transformers" }
	"prelude-plus" -> { "utf8-string" }
	"prelude-prime" -> {  }
	"prelude-safeenum" -> {  }
	"preprocessor-tools" -> { "mtl", "parsec", "syb" }
	"presburger" -> { "containers", "pretty" }
	"press" -> { "containers", "json", "mtl", "parsec" }
	"prettify" -> { "containers", "semigroups" }
	"pretty" -> {  }
	"pretty-class" -> { "pretty" }
	"pretty-hex" -> { "bytestring" }
	"pretty-ncols" -> { "pretty" }
	"pretty-show" -> { "array", "filepath", "ghc-prim", "haskell-lexer", "pretty", "pretty-show" }
	"pretty-tree" -> { "boxes", "containers" }
	"prettyclass" -> { "pretty" }
	"prim-uniq" -> { "dependent-sum", "primitive" }
	"primes" -> {  }
	"primitive" -> { "ghc-prim" }
	"primula-board" -> { "ConfigFile", "MissingH", "containers", "directory", "happstack", "happstack-helpers", "happstack-server", "happstack-state", "hsp", "mtl", "old-locale", "old-time", "random", "regex-posix", "split", "time" }
	"primula-bot" -> { "ConfigFile", "HTTP", "XMPP", "directory", "mtl", "network", "parsec", "utf8-string" }
	"printf-mauke" -> { "bytestring", "containers", "data-default", "template-haskell", "utf8-string" }
	"printxosd" -> { "xosd" }
	"priority-queue" -> { "containers", "queue", "reord", "stateref" }
	"priority-sync" -> { "PSQueue", "containers", "parallel", "random", "stm" }
	"privileged-concurrency" -> { "stm" }
	"prizm" -> { "text" }
	"probability" -> { "containers", "random", "transformers", "utility-ht" }
	"proc" -> { "containers", "directory", "filepath", "process", "regex-tdfa", "split", "strict", "xformat" }
	"process" -> { "deepseq", "directory", "filepath", "unix" }
	"process-conduit" -> { "bytestring", "conduit", "control-monad-loop", "mtl", "process", "resourcet", "shakespeare", "shakespeare-text", "template-haskell", "text" }
	"process-extras" -> { "bytestring", "deepseq", "process", "text" }
	"process-iterio" -> { "bytestring", "cpphs", "iterIO", "process", "transformers" }
	"process-leksah" -> { "directory", "filepath", "unix" }
	"process-listlike" -> { "HUnit", "ListLike", "bytestring", "process", "process-listlike", "text", "unix", "utf8-string" }
	"process-progress" -> { "HUnit", "ListLike", "bytestring", "deepseq", "mtl", "process", "process-listlike", "text", "time", "unix", "utf8-string" }
	"process-qq" -> { "bytestring", "enumerator", "mtl", "process", "shakespeare-text", "template-haskell", "text" }
	"process-streaming" -> { "async", "either", "exceptions", "free", "mmorph", "mtl", "pipes", "pipes-bytestring", "pipes-concurrency", "pipes-safe", "pipes-text", "process", "text", "transformers" }
	"processing" -> { "QuickCheck", "blaze-html", "containers", "directory", "filepath", "ghc-prim", "mainland-pretty", "multiset", "quickcheck-instances", "template-haskell", "text", "transformers" }
	"procrastinating-structure" -> { "procrastinating-variable" }
	"procrastinating-variable" -> {  }
	"procstat" -> { "attoparsec", "bytestring" }
	"proctest" -> { "HUnit", "QuickCheck", "bytestring", "hspec", "process", "text" }
	"prof2dot" -> { "containers", "filepath", "haskell98", "parsec" }
	"prof2pretty" -> { "containers", "filepath", "haskell-src-exts", "semigroups", "uniplate", "zenc" }
	"profiteur" -> { "aeson", "attoparsec", "bytestring", "filepath", "text", "unordered-containers", "vector" }
	"profunctor-extras" -> { "profunctors" }
	"profunctors" -> { "comonad", "semigroupoids", "tagged", "transformers" }
	"progress" -> { "time" }
	"progressbar" -> { "io-reactive" }
	"progression" -> { "containers", "criterion", "directory", "filepath", "haskeline", "process", "txt-sushi" }
	"progressive" -> { "binary", "bytestring", "containers", "directory", "filepath", "ghc-prim", "process", "text" }
	"proj4-hs-bindings" -> { "ghc-prim" }
	"project-template" -> { "base64-bytestring", "bytestring", "conduit", "conduit-extra", "containers", "mtl", "resourcet", "system-fileio", "system-filepath", "text", "transformers" }
	"prolog" -> { "containers", "mtl", "parsec", "syb", "template-haskell", "th-lift", "transformers" }
	"prolog-graph" -> { "cmdargs", "fgl", "graphviz", "mtl", "prolog", "prolog-graph-lib", "text" }
	"prolog-graph-lib" -> { "fgl", "graphviz", "mtl", "prolog", "text" }
	"propane" -> { "colour", "containers", "directory", "filepath", "repa", "repa-devil", "spawn" }
	"propellor" -> { "IfElse", "MissingH", "ansi-terminal", "async", "bytestring", "containers", "directory", "filepath", "hslogger", "network", "process", "unix", "unix-compat" }
	"properties" -> {  }
	"property-list" -> { "base64-bytestring", "bytestring", "cereal", "containers", "free", "old-locale", "oneOfN", "recursion-schemes", "syb", "template-haskell", "text", "time", "transformers", "vector", "xml" }
	"proplang" -> { "glade", "glib", "gtk" }
	"protobuf" -> { "bytestring", "cereal", "data-binary-ieee754", "deepseq", "ghc-prim", "mtl", "text", "type-level", "unordered-containers" }
	"protocol-buffers" -> { "array", "binary", "bytestring", "containers", "directory", "filepath", "mtl", "syb", "utf8-string" }
	"protocol-buffers-descriptor" -> { "bytestring", "containers", "protocol-buffers" }
	"prototype" -> { "monads-tf" }
	"proxy-kindness" -> { "tagged" }
	"pseudomacros" -> { "old-locale", "template-haskell", "time" }
	"publicsuffixlist" -> { "bytestring", "cereal", "containers", "data-default", "text", "utf8-string" }
	"publicsuffixlistcreate" -> { "bytestring", "conduit", "containers", "data-default", "idna", "publicsuffixlist", "text" }
	"pubsub" -> { "HTTP", "fastcgi", "feed", "json", "mime", "network", "random", "utf8-string", "xml" }
	"pugs-DrIFT" -> { "HsSyck", "bytestring", "containers", "mtl", "old-time", "pretty", "random", "stm", "utf8-string" }
	"pugs-HsSyck" -> { "bytestring" }
	"pugs-compat" -> { "array", "bytestring", "containers", "directory", "mtl", "network", "process", "random", "regex-base", "regex-pcre-builtin", "stm", "stringtable-atom", "syb", "time", "unix", "utf8-string" }
	"pugs-hsregex" -> { "array", "haskell98" }
	"pulse-simple" -> { "bytestring" }
	"punycode" -> { "bytestring", "cereal", "mtl", "text" }
	"puppetresources" -> { "Diff", "bytestring", "containers", "hsfacter", "hslogger", "language-puppet", "mtl", "text" }
	"pure-cdb" -> { "binary", "bytestring", "containers", "directory", "mtl", "vector" }
	"pure-fft" -> {  }
	"pure-io" -> { "containers", "mtl", "safe" }
	"pure-priority-queue" -> { "containers" }
	"pure-priority-queue-tests" -> { "QuickCheck", "containers", "pure-priority-queue", "test-framework", "test-framework-quickcheck2" }
	"pureMD5" -> { "binary", "bytestring", "cereal", "crypto-api", "tagged" }
	"purescript" -> { "cmdtheline", "containers", "directory", "filepath", "haskeline", "monad-unify", "mtl", "parsec", "pattern-arrows", "process", "purescript", "syb", "time", "transformers", "unix", "utf8-string", "xdg-basedir" }
	"push-notify" -> { "aeson", "async", "attoparsec-conduit", "base16-bytestring", "bytestring", "cereal", "certificate", "conduit", "connection", "containers", "convertible", "cprng-aes", "data-default", "http-client", "http-conduit", "http-types", "monad-control", "mtl", "network", "resourcet", "retry", "stm", "text", "time", "tls", "tls-extra", "transformers", "unordered-containers", "xml-conduit" }
	"push-notify-ccs" -> { "aeson", "async", "attoparsec", "bytestring", "cprng-aes", "crypto-random", "data-default", "hslogger", "mtl", "network", "pontarius-xmpp", "push-notify", "retry", "stm", "text", "tls", "tls-extra", "unordered-containers", "xml-types" }
	"push-notify-general" -> { "aeson", "bytestring", "containers", "data-default", "hashable", "http-client", "http-conduit", "http-types", "push-notify", "push-notify-ccs", "text", "unordered-containers", "xml-conduit", "yesod" }
	"pushme" -> { "aeson", "bytestring", "containers", "deepseq", "hslogger", "io-storage", "lens", "old-locale", "optparse-applicative", "parallel-io", "pointless-fun", "regex-posix", "shelly", "system-fileio", "system-filepath", "text", "text-format", "time", "unix", "unordered-containers", "yaml" }
	"putlenses" -> { "QuickCheck", "containers", "ghc-prim", "lens", "mtl", "safe", "split", "template-haskell", "transformers" }
	"pvd" -> { "Codec-Image-DevIL", "X11", "array", "containers", "haskell98", "mtl", "network", "stm" }
	"pwstore-cli" -> { "bytestring", "cmdargs", "pwstore-fast", "text" }
	"pwstore-fast" -> { "SHA", "base64-bytestring", "binary", "bytestring", "cryptohash", "random" }
	"pwstore-purehaskell" -> { "SHA", "base64-bytestring", "bytestring", "random" }
	"pxsl-tools" -> { "containers", "mtl", "parsec" }
	"python-pickle" -> { "attoparsec", "bytestring", "cereal", "cmdargs", "containers", "mtl", "python-pickle" }
	"qd" -> { "floatshow" }
	"qd-vec" -> { "Vec", "qd" }
	"qhull-simple" -> { "vector" }
	"qrcode" -> { "array", "containers", "mtl", "vector" }
	"quadratic-irrational" -> { "arithmoi", "containers", "mtl", "transformers" }
	"quantities" -> { "containers", "mtl", "parsec" }
	"quantum-arrow" -> { "MonadRandom", "QuickCheck", "mtl", "random" }
	"qudb" -> { "array", "bytestring", "directory", "mtl", "snappy" }
	"querystring-pickle" -> { "bytestring", "text" }
	"queue" -> { "stm" }
	"queuelike" -> { "array", "containers", "mtl", "stateful-mtl" }
	"quick-generator" -> { "QuickCheck" }
	"quickcheck-assertions" -> { "QuickCheck", "ieee754" }
	"quickcheck-instances" -> { "QuickCheck", "array", "bytestring", "containers", "hashable", "old-time", "text", "time", "unordered-containers" }
	"quickcheck-io" -> { "HUnit", "QuickCheck" }
	"quickcheck-poly" -> { "MonadCatchIO-mtl", "QuickCheck", "haskell98", "hint", "regex-compat", "regex-tdfa" }
	"quickcheck-properties" -> {  }
	"quickcheck-property-comb" -> { "QuickCheck", "mtl" }
	"quickcheck-property-monad" -> { "QuickCheck", "either", "transformers" }
	"quickcheck-rematch" -> { "QuickCheck", "rematch" }
	"quickcheck-script" -> { "QuickCheck", "directory", "process" }
	"quicklz" -> { "bytestring" }
	"quickset" -> { "vector", "vector-algorithms" }
	"quickspec" -> { "QuickCheck", "array", "containers", "ghc-prim", "mtl", "random", "spoon", "transformers" }
	"quicktest" -> { "directory", "haskell98", "mtl", "process" }
	"rabocsv2qif" -> { "old-locale", "split", "time" }
	"rad" -> { "array", "containers", "data-reify" }
	"rados-haskell" -> { "async", "bytestring", "containers", "hspec", "mtl", "uuid" }
	"rainbow" -> { "terminfo", "text" }
	"rainbox" -> { "QuickCheck", "array", "rainbow", "random", "tasty", "tasty-quickcheck", "text", "transformers" }
	"ralist" -> {  }
	"rallod" -> { "haskell98" }
	"rand-vars" -> { "IntervalMap", "array", "mtl", "random" }
	"randfile" -> { "crypto-api", "directory", "filepath", "monadcryptorandom", "transformers", "unix" }
	"random" -> { "time" }
	"random-access-list" -> { "array", "containers" }
	"random-eff" -> { "extensible-effects", "random" }
	"random-extras" -> { "array", "containers", "random-fu", "random-source" }
	"random-fu" -> { "erf", "gamma", "monad-loops", "mtl", "random-shuffle", "random-source", "rvar", "syb", "template-haskell", "transformers", "vector" }
	"random-shuffle" -> { "MonadRandom", "random" }
	"random-source" -> { "flexible-defaults", "mersenne-random-pure64", "mtl", "random", "stateref", "syb", "template-haskell", "th-extras" }
	"random-stream" -> { "binary", "bytestring", "random" }
	"randomgen" -> { "binary", "bytestring", "mersenne-random-pure64" }
	"randproc" -> {  }
	"randsolid" -> { "X11", "random" }
	"range" -> { "parsec" }
	"range-set-list" -> {  }
	"range-space" -> { "semigroups", "vector-space", "vector-space-points" }
	"rangemin" -> { "containers", "primitive", "vector" }
	"ranges" -> { "containers" }
	"rank1dynamic" -> { "binary", "ghc-prim" }
	"rascal" -> { "aeson", "ansi-terminal", "containers", "curl", "curl-aeson", "directory", "filepath", "mtl", "process", "vector" }
	"rate-limit" -> { "time-units" }
	"ratio-int" -> {  }
	"raven-haskell" -> { "aeson", "bytestring", "http-conduit", "network", "old-locale", "random", "text", "time", "unordered-containers", "uuid" }
	"raven-haskell-scotty" -> { "bytestring", "case-insensitive", "mtl", "raven-haskell", "scotty", "text", "wai" }
	"raw-strings-qq" -> { "template-haskell" }
	"rbr" -> { "bio", "bytestring", "containers" }
	"rclient" -> { "QuickCheck", "binary", "bytestring", "data-binary-ieee754", "network", "split" }
	"rdf4h" -> { "HTTP", "containers", "hashable", "hxt", "network", "parsec", "text", "unordered-containers" }
	"rdioh" -> { "MissingH", "aeson", "bytestring", "containers", "hoauth", "hspec", "json", "mtl", "rdioh", "transformers", "urlencoded" }
	"rdtsc" -> {  }
	"rdtsc-enolan" -> {  }
	"reaction-logic" -> { "QuickCheck", "mtl" }
	"reactive" -> { "QuickCheck", "Stream", "TypeCompose", "category-extras", "checkers", "old-time", "random", "unamb", "vector-space" }
	"reactive-bacon" -> { "old-time", "stm" }
	"reactive-balsa" -> { "alsa-core", "alsa-seq", "containers", "data-accessor", "data-accessor-transformers", "event-list", "extensible-exceptions", "midi", "midi-alsa", "non-negative", "random", "reactive-banana", "transformers", "utility-ht" }
	"reactive-banana" -> { "containers", "hashable", "pqueue", "transformers", "unordered-containers", "vault" }
	"reactive-banana-sdl" -> { "SDL", "SDL-image", "SDL-ttf", "data-lens", "data-lens-template", "reactive-banana" }
	"reactive-banana-threepenny" -> { "reactive-banana", "threepenny-gui" }
	"reactive-banana-wx" -> { "cabal-macosx", "reactive-banana", "wx", "wxcore" }
	"reactive-fieldtrip" -> { "FieldTrip", "InfixApplicative", "reactive", "reactive-glut", "unamb", "vector-space" }
	"reactive-glut" -> { "GLUT", "OpenGL", "old-time", "reactive", "vector-space" }
	"reactive-io" -> { "transformers" }
	"reactive-thread" -> { "SDL", "monad-parallel", "reactive-thread", "stm", "transformers" }
	"reactor" -> { "array", "bits-atomic", "comonad", "contravariant", "mtl", "semigroupoids", "transformers" }
	"read-bounded" -> {  }
	"readable" -> { "bytestring", "text" }
	"readline" -> { "process" }
	"readline-statevar" -> { "StateVar", "readline" }
	"readpyc" -> { "bliplib", "parseargs" }
	"really-simple-xml-parser" -> { "parsec" }
	"recaptcha" -> { "HTTP", "network", "xhtml" }
	"records" -> { "kinds", "type-functions" }
	"records-th" -> { "aeson", "data-default", "kinds", "records", "template-haskell", "text", "type-functions", "unordered-containers" }
	"recursion-schemes" -> { "comonad", "free", "transformers" }
	"recursive-line-count" -> { "bytestring", "containers", "filepath", "gtk", "mtl", "process" }
	"redHandlers" -> { "MaybeT", "array", "bytestring", "cgi", "containers", "haskell98", "mtl", "network", "old-time", "parsec", "stm", "unix", "xhtml" }
	"redis" -> { "MonadCatchIO-mtl", "bytestring", "concurrent-extra", "containers", "mtl", "network", "old-time", "utf8-string" }
	"redis-hs" -> { "bytestring", "network", "utf8-string" }
	"redis-simple" -> { "binary", "bytestring", "redis" }
	"redo" -> { "bytestring", "containers", "directory", "filepath", "process", "pureMD5" }
	"reducers" -> { "array", "bytestring", "comonad", "containers", "fingertree", "hashable", "keys", "pointed", "semigroupoids", "semigroups", "text", "transformers", "unordered-containers" }
	"reenact" -> { "HCodecs", "hamid", "stm", "time", "vector-space" }
	"ref" -> { "ghc-prim" }
	"ref-fd" -> { "stm", "transformers" }
	"ref-mtl" -> { "mtl", "stm", "transformers" }
	"ref-tf" -> { "stm", "transformers" }
	"reference" -> { "stm" }
	"refh" -> { "clippard", "cmdargs", "directory", "filepath", "haskheap", "network" }
	"reflection" -> { "tagged", "template-haskell" }
	"reflection-extras" -> { "aeson", "constraints", "lens", "reflection", "tagged" }
	"reform" -> { "containers", "mtl", "text" }
	"reform-blaze" -> { "blaze-html", "blaze-markup", "reform", "text" }
	"reform-hamlet" -> { "blaze-markup", "hamlet", "reform", "text" }
	"reform-happstack" -> { "bytestring", "happstack-server", "mtl", "random", "reform", "text", "utf8-string" }
	"reform-hsp" -> { "hsp", "reform", "text" }
	"regex-applicative" -> { "containers", "transformers" }
	"regex-base" -> { "array", "bytestring", "containers", "mtl" }
	"regex-compat" -> { "array", "regex-base", "regex-posix" }
	"regex-compat-tdfa" -> { "array", "regex-base", "regex-tdfa" }
	"regex-deriv" -> { "bitset", "bytestring", "containers", "deepseq", "dequeue", "ghc-prim", "hashable", "hashtables", "mtl", "parallel", "parsec", "regex-base" }
	"regex-dfa" -> { "mtl", "parsec", "regex-base" }
	"regex-easy" -> { "array", "bytestring", "regex-pcre", "string-conversions" }
	"regex-genex" -> { "containers", "logict", "mtl", "regex-tdfa", "sbv", "stream-monad", "text" }
	"regex-parsec" -> { "parsec", "regex-base" }
	"regex-pcre" -> { "array", "bytestring", "containers", "regex-base" }
	"regex-pcre-builtin" -> { "array", "bytestring", "containers", "regex-base" }
	"regex-pderiv" -> { "bitset", "bytestring", "containers", "deepseq", "ghc-prim", "mtl", "parallel", "parsec", "regex-base" }
	"regex-posix" -> { "array", "bytestring", "containers", "regex-base" }
	"regex-posix-unittest" -> { "array", "bytestring", "containers", "mtl", "regex-base", "regex-posix" }
	"regex-tdfa" -> { "array", "bytestring", "containers", "ghc-prim", "mtl", "parsec", "regex-base" }
	"regex-tdfa-rc" -> { "array", "bytestring", "containers", "ghc-prim", "mtl", "parsec", "regex-base" }
	"regex-tdfa-text" -> { "array", "regex-base", "regex-tdfa", "text" }
	"regex-tdfa-unittest" -> { "array", "bytestring", "containers", "mtl", "regex-base", "regex-tdfa" }
	"regex-tdfa-utf8" -> { "array", "bytestring", "regex-base", "regex-tdfa", "utf8-string" }
	"regex-tre" -> { "regex-base" }
	"regex-xmlschema" -> { "haskell98", "parsec" }
	"regexchar" -> { "Cabal", "QuickCheck", "array", "containers", "parallel", "parsec", "regex-base", "regex-posix", "regexdot", "toolshed" }
	"regexdot" -> { "deepseq", "parallel", "parsec", "toolshed" }
	"regexp-tries" -> { "containers", "derive-trie", "template-haskell", "weighted-regexp" }
	"regexpr" -> { "HUnit", "mtl", "mtlparse" }
	"regexpr-symbolic" -> {  }
	"regexqq" -> { "bytestring", "pcre-light", "template-haskell" }
	"regional-pointers" -> { "base-unicode-symbols", "regions", "transformers" }
	"regions" -> { "base-unicode-symbols", "monad-control", "transformers" }
	"regions-monadsfd" -> { "base-unicode-symbols", "monads-fd", "regions", "transformers" }
	"regions-monadstf" -> { "base-unicode-symbols", "monads-tf", "regions", "transformers" }
	"regions-mtl" -> { "base-unicode-symbols", "mtl", "regions" }
	"regular" -> { "template-haskell" }
	"regular-extras" -> { "QuickCheck", "binary", "deepseq", "regular" }
	"regular-web" -> { "applicative-extras", "fclabels", "formlets", "json", "mtl", "regular", "xhtml" }
	"regular-xmlpickler" -> { "hxt", "regular", "text" }
	"rehoo" -> { "cmdargs", "parallel-io", "shelly", "split", "system-filepath", "text" }
	"reified-records" -> { "containers", "mtl" }
	"reify" -> { "ghc" }
	"relacion" -> { "array", "containers" }
	"relation" -> { "array", "containers", "groom" }
	"relative-date" -> { "concatenative", "datetime", "mtl", "parsec", "time" }
	"relit" -> { "regex-base", "template-haskell" }
	"rematch" -> {  }
	"rematch-text" -> { "rematch", "text" }
	"remote" -> { "binary", "bytestring", "containers", "directory", "filepath", "mtl", "network", "pureMD5", "stm", "syb", "template-haskell", "time", "utf8-string" }
	"reord" -> {  }
	"reorderable" -> { "constraints", "haskell-src-exts", "haskell-src-meta", "template-haskell" }
	"repa" -> { "QuickCheck", "bytestring", "ghc-prim", "template-haskell", "vector" }
	"repa-algorithms" -> { "repa", "vector" }
	"repa-bytestring" -> { "repa" }
	"repa-devil" -> { "repa", "transformers" }
	"repa-examples" -> { "QuickCheck", "random", "repa", "repa-algorithms", "repa-io", "template-haskell", "vector" }
	"repa-fftw" -> { "carray", "fft", "repa", "storable-complex" }
	"repa-io" -> { "binary", "bmp", "bytestring", "old-time", "repa", "vector" }
	"repa-plugin" -> { "containers", "ddc-base", "ddc-core", "ddc-core-flow", "ddc-core-simpl", "ghc", "mtl" }
	"repa-series" -> { "ghc", "ghc-prim", "vector" }
	"repa-sndfile" -> { "hsndfile", "hsndfile-vector", "repa", "repa-sndfile", "vector" }
	"repa-v4l2" -> { "bmp", "bytestring", "containers", "deepseq", "gloss", "mtl", "repa", "repa-v4l2", "transformers", "v4l2", "vector" }
	"repl" -> { "ghc", "ghc-paths", "haskell-src-exts", "parsec" }
	"repr" -> { "base-unicode-symbols", "dstring", "random", "string-combinators" }
	"repr-tree-syb" -> { "containers", "syb", "text" }
	"representable-functors" -> { "array", "comonad", "comonad-transformers", "comonads-fd", "containers", "contravariant", "distributive", "free", "keys", "mtl", "semigroupoids", "semigroups", "transformers" }
	"representable-profunctors" -> {  }
	"representable-tries" -> { "adjunctions", "bifunctors", "comonad", "comonad-transformers", "containers", "distributive", "keys", "mtl", "representable-functors", "semigroupoids", "semigroups", "transformers" }
	"resource-effect" -> { "containers", "extensible-effects" }
	"resource-pool" -> { "hashable", "monad-control", "stm", "time", "transformers", "transformers-base", "vector" }
	"resource-pool-catchio" -> { "MonadCatchIO-transformers", "hashable", "stm", "time", "transformers", "transformers-base", "vector" }
	"resource-simple" -> { "containers", "monad-control", "monad-fork", "mtl-evil-instances", "transformers", "transformers-base" }
	"resourcet" -> { "containers", "exceptions", "lifted-base", "mmorph", "monad-control", "mtl", "transformers", "transformers-base" }
	"restful-snap" -> { "blaze-builder", "bytestring", "containers", "data-default", "digestive-functors", "errors", "heist", "lens", "mtl", "old-locale", "readable", "snap", "snap-core", "snap-extras", "template-haskell", "text", "time", "xmlhtml" }
	"restricted-workers" -> { "async", "bytestring", "cereal", "data-default", "directory", "either", "filepath", "monad-control", "mtl", "network", "selinux", "stm", "text", "transformers", "transformers-base", "unix" }
	"restyle" -> { "directory", "filepath", "utf8-string" }
	"resumable-exceptions" -> { "mtl" }
	"rethinkdb" -> { "aeson", "attoparsec", "bytestring", "containers", "data-default", "ghc-prim", "mtl", "network", "protocol-buffers", "protocol-buffers-descriptor", "text", "time", "unordered-containers", "utf8-string", "vector" }
	"retry" -> { "data-default", "lifted-base", "monad-control", "transformers" }
	"rev-state" -> { "mtl" }
	"revdectime" -> { "old-time" }
	"reverse-apply" -> {  }
	"reversi" -> { "array", "process" }
	"rewrite" -> { "bytestring", "directory", "multiarg", "process" }
	"rewriting" -> { "containers", "regular" }
	"rex" -> { "bytestring", "containers", "haskell-src-exts", "haskell-src-meta", "pcre-light", "template-haskell" }
	"rezoom" -> { "HTTP", "bytestring", "containers", "datetime", "json", "mtl", "nano-md5", "xhtml" }
	"rfc3339" -> { "old-locale", "time" }
	"rfc5051" -> { "bytestring", "containers" }
	"riak" -> { "aeson", "attoparsec", "binary", "blaze-builder", "bytestring", "containers", "network", "protocol-buffers", "pureMD5", "random", "resource-pool", "riak-protobuf", "text", "time" }
	"riak-protobuf" -> { "array", "parsec", "protocol-buffers", "protocol-buffers-descriptor" }
	"richreports" -> { "MissingH", "ascetic" }
	"riot" -> { "containers", "directory", "haskell98", "mtl", "old-locale", "packedstring", "process", "unix" }
	"ripple" -> { "aeson", "attoparsec", "base58address", "binary", "bytestring", "cereal", "crypto-api", "crypto-pubkey-types", "cryptohash-cryptoapi", "ecdsa", "errors", "largeword", "text", "transformers", "utility-ht", "websockets" }
	"risc386" -> { "array", "containers", "mtl", "pretty" }
	"rivers" -> { "QuickCheck", "lazysmallcheck", "oeis" }
	"rmonad" -> { "containers", "suitable", "transformers" }
	"robot" -> { "containers", "transformers", "xhb" }
	"robots-txt" -> { "attoparsec", "bytestring" }
	"roguestar" -> { "bytestring", "directory", "filepath", "old-time", "process" }
	"roguestar-engine" -> { "MaybeT", "MonadRandom", "PSQueue", "array", "bytestring", "containers", "data-memocombinators", "hslogger", "mtl", "old-time", "parallel", "priority-sync", "random", "stm" }
	"roguestar-gl" -> { "GLUT", "MonadRandom", "OpenGL", "arrows", "bytestring", "containers", "filepath", "mtl", "priority-sync", "random", "rsagl", "rsagl-frp", "rsagl-math", "stm" }
	"roguestar-glut" -> { "GLUT", "roguestar-gl", "rsagl" }
	"rollbar" -> { "aeson", "basic-prelude", "http-conduit", "monad-control", "network", "text", "vector" }
	"rolling-queue" -> { "stm" }
	"roman-numerals" -> { "base-unicode-symbols", "bytestring", "text" }
	"roots" -> { "tagged" }
	"rope" -> { "bytestring", "fingertree", "mtl", "utf8-string" }
	"rosezipper" -> { "containers" }
	"rosso" -> { "containers", "deepseq" }
	"rotating-log" -> { "bytestring", "directory", "filepath", "old-locale", "time" }
	"rounding" -> { "array", "numeric-extras" }
	"roundtrip" -> { "containers", "pretty", "safe", "template-haskell", "text", "xml-types" }
	"roundtrip-string" -> { "mtl", "parsec", "roundtrip" }
	"roundtrip-xml" -> { "blaze-builder", "blaze-builder-enumerator", "bytestring", "containers", "enumerator", "mtl", "pretty", "reference", "roundtrip", "roundtrip-string", "safe", "text", "xml-enumerator", "xml-types" }
	"route-generator" -> { "attoparsec", "network", "text", "yesod-routes" }
	"rowrecord" -> { "containers", "template-haskell" }
	"rpc" -> { "bytestring", "cereal", "containers", "derive", "network-fancy", "template-haskell", "th-lift" }
	"rpc-framework" -> { "containers", "mtl", "network", "rpc-framework", "template-haskell", "transformers" }
	"rpf" -> { "appar", "blaze-builder", "bytestring", "c10k", "containers", "dns", "domain-auth", "hslogger", "iproute", "parsec", "unix" }
	"rpm" -> { "HaXml", "directory", "filepath", "process" }
	"rsagl" -> { "OpenGL", "OpenGLRaw", "Vec", "Vec-OpenGLRaw", "array", "arrows", "containers", "data-memocombinators", "deepseq", "mtl", "old-time", "parallel", "parsec", "random", "rsagl-frp", "rsagl-math", "stm" }
	"rsagl-frp" -> { "array", "arrows", "containers", "mtl", "old-time", "random", "rsagl-math", "stm" }
	"rsagl-math" -> { "OpenGL", "OpenGLRaw", "Vec", "Vec-OpenGLRaw", "array", "containers", "deepseq", "parallel", "parsec", "random" }
	"rss" -> { "HaXml", "network", "old-locale", "time" }
	"rss2irc" -> { "bytestring", "cabal-file-th", "cmdargs", "containers", "deepseq", "feed", "http-conduit", "http-types", "io-storage", "irc", "network", "old-locale", "parsec", "regexpr", "resourcet", "safe", "split", "text", "time", "transformers", "utf8-string" }
	"ruby-qq" -> { "bytestring", "haskell-src-exts", "haskell-src-meta", "pcre-light", "process", "template-haskell", "trifecta" }
	"ruff" -> { "Vec", "array", "mtl", "parsec" }
	"ruler" -> { "containers", "mtl", "shuffle", "uhc-util", "uuagc", "uuagc-cabal", "uulib" }
	"ruler-core" -> { "array", "containers", "directory", "fgl", "filepath", "haskell98", "mtl", "uuagc", "uulib" }
	"rungekutta" -> {  }
	"runghc" -> { "cmdargs", "directory", "filepath", "old-time", "process" }
	"runmemo" -> {  }
	"rvar" -> { "MonadPrompt", "mtl", "random-source", "transformers" }
	"rwlock" -> { "monad-loops-stm", "stm", "syb" }
	"rws" -> { "binary", "bytestring", "parsec" }
	"safe" -> {  }
	"safe-failure" -> { "failure" }
	"safe-failure-cme" -> { "control-monad-exception", "safe-failure" }
	"safe-freeze" -> { "indexed", "mtl", "vector" }
	"safe-globals" -> { "stm", "template-haskell" }
	"safe-lazy-io" -> { "extensible-exceptions", "parallel", "strict-io" }
	"safe-plugins" -> { "Unixutils", "directory", "filepath", "haskell-src-exts", "plugins" }
	"safecopy" -> { "array", "bytestring", "cereal", "containers", "old-time", "template-haskell", "text", "time" }
	"safeint" -> { "ghc-prim" }
	"safer-file-handles" -> { "base-unicode-symbols", "explicit-iomodes", "pathtype", "regional-pointers", "regions", "transformers" }
	"safer-file-handles-bytestring" -> { "bytestring", "explicit-iomodes-bytestring", "regions", "safer-file-handles", "transformers" }
	"safer-file-handles-text" -> { "explicit-iomodes-text", "regions", "safer-file-handles", "text", "transformers" }
	"saltine" -> { "bytestring", "profunctors" }
	"salvia" -> { "MaybeT-transformers", "bytestring", "containers", "directory", "fclabels", "monads-fd", "network", "old-locale", "process", "pureMD5", "random", "safe", "salvia-protocol", "split", "stm", "text", "threadmanager", "time", "transformers", "unix", "utf8-string" }
	"salvia-demo" -> { "c10k", "fclabels", "filestore", "monads-fd", "network", "salvia", "salvia-extras", "salvia-protocol", "salvia-sessions", "salvia-websocket", "stm", "threadmanager", "transformers" }
	"salvia-extras" -> { "HStringTemplate", "bytestring", "c10k", "clevercss", "fclabels", "filestore", "hscolour", "monads-fd", "network", "old-locale", "pureMD5", "salvia", "salvia-protocol", "sendfile", "split", "stm", "text", "threadmanager", "time", "transformers", "utf8-string" }
	"salvia-protocol" -> { "bimap", "bytestring", "containers", "fclabels", "parsec", "safe", "split", "utf8-string" }
	"salvia-sessions" -> { "MaybeT-transformers", "containers", "fclabels", "monads-fd", "pureMD5", "random", "safe", "salvia", "salvia-protocol", "stm", "time", "utf8-string" }
	"salvia-websocket" -> { "bytestring", "fclabels", "monads-fd", "salvia", "salvia-protocol", "stm", "utf8-string" }
	"sample-frame" -> { "QuickCheck", "storable-record" }
	"sample-frame-np" -> { "numeric-prelude", "sample-frame" }
	"samtools" -> { "bytestring", "filepath", "process", "seqloc", "vector" }
	"samtools-enumerator" -> { "bytestring", "enumerator", "samtools", "transformers" }
	"samtools-iteratee" -> { "bytestring", "iteratee", "monads-tf", "samtools", "transformers" }
	"sandi" -> { "bytestring", "conduit" }
	"sandlib" -> {  }
	"sarasvati" -> { "deepseq", "portaudio" }
	"sat" -> {  }
	"sat-micro-hs" -> { "containers", "haskell98", "mtl", "parse-dimacs", "pretty" }
	"satchmo" -> { "array", "bytestring", "containers", "directory", "minisat", "mtl", "process" }
	"satchmo-backends" -> { "array", "bytestring", "containers", "process", "satchmo", "timeit" }
	"satchmo-examples" -> { "array", "containers", "process", "satchmo", "satchmo-backends" }
	"satchmo-funsat" -> { "array", "containers", "funsat", "parse-dimacs", "satchmo" }
	"satchmo-minisat" -> { "containers", "process", "satchmo" }
	"sbv" -> { "HUnit", "QuickCheck", "array", "containers", "deepseq", "directory", "filepath", "mtl", "old-time", "pretty", "process", "random", "sbv", "syb" }
	"sc3-rdu" -> { "hsc3", "hsc3-db" }
	"scalable-server" -> { "BoundedChan", "attoparsec", "attoparsec-enumerator", "blaze-builder", "bytestring", "enumerator", "mtl", "network", "network-enumerator" }
	"scaleimage" -> { "filepath", "gd" }
	"scan" -> { "parsec" }
	"scan-vector-machine" -> { "HUnit", "accelerate", "array", "dph-base" }
	"scat" -> { "ansi-terminal", "bytestring", "mtl", "optparse-applicative", "scrypt", "vector" }
	"scc" -> { "bytestring", "containers", "haskeline", "incremental-parser", "monad-coroutine", "monad-parallel", "monoid-subclasses", "parsec", "process", "text", "transformers" }
	"scenegraph" -> { "GLUT", "OpenGL", "array", "containers", "fgl", "haskell98", "hmatrix", "mtl", "old-time", "process" }
	"scgi" -> { "bytestring", "cgi", "extensible-exceptions", "network" }
	"schedyield" -> {  }
	"schonfinkeling" -> {  }
	"science-constants" -> {  }
	"scientific" -> { "deepseq", "hashable", "text" }
	"scion" -> { "Cabal", "bytestring", "containers", "directory", "filepath", "ghc", "ghc-paths", "ghc-syb", "hslogger", "json", "multiset", "network", "network-bytestring", "time", "uniplate", "utf8-string" }
	"scion-browser" -> { "Cabal", "HTTP", "aeson", "attoparsec", "bytestring", "conduit", "containers", "deepseq", "derive", "directory", "filepath", "ghc", "ghc-paths", "haskeline", "haskell-src-exts", "monad-logger", "mtl", "parallel-io", "parsec", "persistent", "persistent-sqlite", "persistent-template", "process", "tar", "text", "transformers", "unix", "unordered-containers", "utf8-string", "vector", "zlib" }
	"scons2dot" -> { "bytestring", "containers", "process" }
	"scope" -> { "MonadCatchIO-transformers", "bytestring", "containers", "iteratee", "mtl", "mwc-random", "time", "unix", "zoom-cache" }
	"scope-cairo" -> { "MonadCatchIO-transformers", "cairo", "gtk", "mtl", "old-locale", "scope", "time", "zoom-cache" }
	"scottish" -> { "data-default", "enclosed-exceptions", "http-types", "lens", "mtl", "persistent", "resource-pool", "scotty", "stm", "text", "transformers", "wai", "warp" }
	"scotty" -> { "aeson", "blaze-builder", "bytestring", "case-insensitive", "conduit", "data-default", "http-types", "mtl", "regex-compat", "text", "transformers", "wai", "wai-extra", "warp" }
	"scotty-blaze" -> { "blaze-builder", "blaze-html", "mtl", "scotty", "wai" }
	"scotty-fay" -> { "bytestring", "data-default", "directory", "fay", "fay-jquery", "filepath", "http-types", "scotty", "text", "transformers", "wai" }
	"scotty-hastache" -> { "containers", "filepath", "hastache", "http-types", "mtl", "scotty", "text", "wai", "warp" }
	"scotty-session" -> { "base64-bytestring", "blaze-builder", "bytestring", "crypto-api", "http-types", "old-locale", "scotty", "stm", "text", "time", "transformers", "unordered-containers", "wai" }
	"scotty-tls" -> { "scotty", "transformers", "wai", "warp", "warp-tls" }
	"scp-streams" -> { "SHA", "attoparsec", "bytestring", "cmdargs", "io-streams", "process", "scp-streams", "sha-streams", "unix" }
	"scrabble-bot" -> { "array", "binary", "containers", "deepseq", "directory", "mtl", "packed-dawg", "parallel", "split" }
	"scrobble" -> { "MissingH", "containers", "curl", "network", "old-locale", "pureMD5", "time", "url" }
	"scrypt" -> { "base64-bytestring", "bytestring", "entropy" }
	"scrz" -> { "MonadRandom", "aeson", "base16-bytestring", "bytestring", "conduit", "containers", "cryptohash", "directory", "filepath", "friendly-time", "hashable", "http-conduit", "http-types", "mtl", "network", "old-locale", "process", "random", "stm", "template-haskell", "text", "time", "unix" }
	"scyther-proof" -> { "array", "cmdargs", "containers", "directory", "filepath", "json", "mtl", "parsec", "pretty", "process", "safe", "tagsoup", "time", "uniplate" }
	"sde-solver" -> { "cereal", "cereal-vector", "ghc-prim", "haskell-mpi", "mersenne-random-pure64", "mtl", "mwc-random", "normaldistribution", "parallel", "vector" }
	"sdl2" -> {  }
	"sdl2-image" -> { "sdl2" }
	"seal-module" -> { "template-haskell" }
	"search" -> { "ghc-prim", "profunctors", "semigroupoids", "tagged", "transformers" }
	"sec" -> { "template-haskell" }
	"secdh" -> { "containers", "secdh" }
	"seclib" -> { "network" }
	"secret-santa" -> { "containers", "diagrams-cairo", "diagrams-lib", "haskell-qrencode", "random" }
	"secrm" -> { "haskell98" }
	"secure-sockets" -> { "HsOpenSSL", "bytestring", "directory", "network", "process", "transformers" }
	"securemem" -> { "byteable", "bytestring", "ghc-prim" }
	"sednaDBXML" -> { "bindings-DSL", "bytestring", "containers", "iteratee", "mtl", "text" }
	"select" -> {  }
	"selectors" -> { "array", "containers", "template-haskell", "text", "xml-conduit" }
	"selenium" -> { "HTTP", "HUnit", "mtl", "network", "pretty" }
	"selenium-server" -> { "conduit", "directory", "filepath", "http-conduit", "http-conduit-downloader", "network", "process", "random", "regex-tdfa", "utf8-string" }
	"selfrestart" -> { "directory", "executable-path", "unix" }
	"selinux" -> { "unix" }
	"semaphore-plus" -> {  }
	"semigroupoid-extras" -> { "semigroupoids" }
	"semigroupoids" -> { "comonad", "containers", "contravariant", "distributive", "semigroups", "transformers" }
	"semigroups" -> { "bytestring", "containers", "hashable", "nats", "text", "unordered-containers" }
	"semigroups-actions" -> { "containers", "semigroups" }
	"semiring" -> { "Boolean", "HUnit", "QuickCheck", "containers", "monoids", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"sendfile" -> { "bytestring", "network" }
	"sentry" -> { "ansi-terminal", "bytestring", "cereal", "cmdargs", "directory", "filepath", "old-locale", "old-time", "process", "safecopy", "sentry", "time", "unix" }
	"separated" -> { "lens", "semigroupoids", "semigroups" }
	"seqloc" -> { "attoparsec", "biocore", "bytestring" }
	"seqloc-datafiles" -> { "QuickCheck", "attoparsec", "biocore", "bytestring", "hashable", "iteratee", "monads-tf", "random", "seqloc", "transformers", "unordered-containers" }
	"sequential-index" -> { "bytestring" }
	"sequor" -> { "array", "binary", "bytestring", "containers", "mtl", "nlp-scores", "pretty", "split", "text", "vector" }
	"serf" -> { "attoparsec", "attoparsec-conduit", "conduit", "mtl", "operational", "process", "resourcet", "text" }
	"serial" -> { "unix" }
	"serialport" -> { "bytestring", "unix" }
	"servius" -> { "blaze-builder", "blaze-html", "bytestring", "cmdargs", "containers", "directory", "hamlet", "http-types", "mime-types", "shakespeare-css", "text", "transformers", "wai", "wai-app-static", "wai-extra", "warp" }
	"sessions" -> { "binary", "bytestring", "containers", "mtl", "network" }
	"set-cover" -> { "containers", "utility-ht" }
	"set-extra" -> { "containers", "mtl", "syb" }
	"set-monad" -> { "containers", "deepseq" }
	"setenv" -> { "unix" }
	"setlocale" -> {  }
	"setops" -> { "containers" }
	"setters" -> { "mtl", "template-haskell" }
	"sexp" -> { "attoparsec", "bytestring", "cmdargs", "containers", "dlist", "ghc-prim", "mtl", "sexp", "vector" }
	"sexp-show" -> { "pretty-show" }
	"sexpr" -> { "QuickCheck", "base64-string", "binary", "bytestring", "pretty", "random" }
	"sfml-audio" -> { "bytestring" }
	"sgd" -> { "binary", "bytestring", "containers", "deepseq", "filepath", "lazy-io", "logfloat", "monad-par", "mtl", "primitive", "random", "temporary", "vector" }
	"sgf" -> { "containers", "encoding", "extensible-exceptions", "mtl", "parsec", "split", "time" }
	"sgrep" -> { "bio", "regex-compat" }
	"sha-streams" -> { "SHA", "binary", "bytestring", "io-streams", "sha-streams" }
	"shady-gen" -> { "Boolean", "MemoTrie", "TypeCompose", "applicative-numbers", "containers", "data-treify", "mtl", "ty", "vector-space", "wl-pprint" }
	"shady-graphics" -> { "Boolean", "MemoTrie", "TypeCompose", "applicative-numbers", "containers", "data-treify", "mtl", "shady-gen", "ty", "vector-space", "wl-pprint" }
	"shake" -> { "binary", "bytestring", "deepseq", "directory", "filepath", "hashable", "old-time", "process", "random", "time", "transformers", "unix", "unordered-containers", "utf8-string" }
	"shake-extras" -> { "bytestring", "cmdargs", "directory", "filepath", "shake" }
	"shaker" -> { "Cabal", "HUnit", "QuickCheck", "bytestring", "containers", "directory", "filepath", "ghc", "ghc-paths", "haskeline", "haskell-src", "mtl", "old-time", "parsec3", "regex-posix", "template-haskell", "test-framework", "test-framework-hunit", "test-framework-quickcheck2" }
	"shakespeare" -> { "aeson", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "containers", "directory", "exceptions", "ghc-prim", "http-types", "parsec", "process", "shakespeare", "system-fileio", "system-filepath", "template-haskell", "text", "time", "transformers", "wai", "wai-app-static" }
	"shakespeare-css" -> { "shakespeare" }
	"shakespeare-i18n" -> { "shakespeare" }
	"shakespeare-js" -> { "shakespeare" }
	"shakespeare-text" -> { "shakespeare" }
	"shana" -> { "directory", "regex-posix" }
	"shapefile" -> { "binary", "bytestring", "data-binary-ieee754", "dbf", "filepath", "rwlock" }
	"shapely-data" -> { "proxy-kindness", "tagged", "template-haskell" }
	"shared-buffer" -> { "bytestring", "unix" }
	"sharedio" -> {  }
	"she" -> { "filepath", "mtl" }
	"shell-escape" -> { "binary", "bytestring", "containers", "vector" }
	"shell-pipe" -> {  }
	"shellish" -> { "bytestring", "directory", "filepath", "mtl", "process", "strict", "time", "unix-compat" }
	"shellmate" -> { "directory", "filepath", "process", "temporary", "time", "transformers" }
	"shelltestrunner" -> { "Diff", "HUnit", "cabal-file-th", "cmdargs", "directory", "filemanip", "filepath", "parsec", "process", "regex-tdfa", "test-framework", "test-framework-hunit", "utf8-string" }
	"shelly" -> { "async", "bytestring", "containers", "directory", "mtl", "process", "system-fileio", "system-filepath", "text", "time", "unix-compat" }
	"shelly-extra" -> { "SafeSemaphore", "async", "mtl", "shelly" }
	"shivers-cfg" -> { "HPDF", "containers", "directory", "language-dot", "mtl", "pretty", "process" }
	"shoap" -> { "curl" }
	"shortcircuit" -> {  }
	"shorten-strings" -> { "text" }
	"show" -> { "syb" }
	"showdown" -> { "glade", "gtk", "random" }
	"shpider" -> { "bytestring", "containers", "curl", "mtl", "regex-posix", "tagsoup", "tagsoup-parsec", "time", "url", "web-encodings" }
	"shplit" -> { "mtl" }
	"shqq" -> { "parsec", "posix-escape", "process", "template-haskell", "unix" }
	"shuffle" -> { "Cabal", "array", "containers", "directory", "filepath", "network", "process", "shuffle", "uhc-util", "uuagc", "uuagc-cabal", "uulib" }
	"sieve" -> {  }
	"sifflet" -> { "cairo", "containers", "directory", "fgl", "filepath", "glib", "gtk", "hxt", "mtl", "parsec", "process", "sifflet-lib", "unix" }
	"sifflet-lib" -> { "cairo", "containers", "directory", "fgl", "filepath", "glib", "gtk", "hxt", "mtl", "parsec", "process", "unix" }
	"sign" -> { "algebra", "containers", "deepseq", "hashable", "lattices" }
	"signed-multiset" -> { "containers" }
	"silently" -> { "deepseq", "directory" }
	"simgi" -> { "containers", "haskell98", "mersenne-random-pure64", "mtl", "parsec", "random" }
	"simple" -> { "aeson", "attoparsec", "base64-bytestring", "bytestring", "cmdargs", "conduit", "directory", "filepath", "http-types", "mime-types", "monad-peel", "process", "setenv", "simple-templates", "text", "transformers", "unordered-containers", "vector", "wai", "wai-extra" }
	"simple-actors" -> { "chan-split", "contravariant", "mtl", "transformers" }
	"simple-atom" -> { "containers", "deepseq" }
	"simple-bluetooth" -> { "bytestring", "network" }
	"simple-c-value" -> { "DebugTraceHelpers", "dlist", "ghc-prim", "tuple" }
	"simple-config" -> { "bytestring", "data-default", "network", "parsec", "template-haskell", "transformers" }
	"simple-css" -> { "blaze-html", "hashable", "language-css", "unordered-containers" }
	"simple-firewire" -> { "CV", "bindings-dc1394" }
	"simple-form" -> { "blaze-html", "digestive-functors", "email-validate", "network", "old-locale", "text", "time", "transformers" }
	"simple-genetic-algorithm" -> { "deepseq", "parallel", "random" }
	"simple-index" -> { "containers", "hashable", "safecopy", "unordered-containers" }
	"simple-log" -> { "MonadCatchIO-transformers", "SafeSemaphore", "containers", "deepseq", "directory", "filepath", "mtl", "old-locale", "text", "time", "transformers" }
	"simple-log-syslog" -> { "hsyslog", "simple-log", "text" }
	"simple-observer" -> {  }
	"simple-pascal" -> { "containers", "filepath", "mtl", "parsec", "simple-stacked-vm" }
	"simple-postgresql-orm" -> { "bytestring", "directory", "filepath", "postgresql-orm", "postgresql-simple", "resource-pool", "simple", "transformers" }
	"simple-reflect" -> {  }
	"simple-rope" -> { "QuickCheck", "bytestring" }
	"simple-sendfile" -> { "bytestring", "network", "unix" }
	"simple-server" -> { "bytestring", "concurrent-extra", "containers", "hashtables", "network", "time", "unbounded-delays" }
	"simple-session" -> { "base64-bytestring", "blaze-builder", "byteable", "bytestring", "containers", "cookie", "cryptohash", "http-types", "simple", "transformers", "wai" }
	"simple-sessions" -> { "indexed", "synchronous-channels" }
	"simple-sql-parser" -> { "haskell-src-exts", "mtl", "parsec", "pretty" }
	"simple-stacked-vm" -> { "array", "binary-state", "containers", "filepath", "mtl", "parsec" }
	"simple-tabular" -> {  }
	"simple-templates" -> { "aeson", "attoparsec", "text", "unordered-containers", "vector" }
	"simple-vec3" -> { "vector" }
	"simpleargs" -> {  }
	"simpleirc" -> { "bytestring", "containers", "network", "old-locale", "time" }
	"simplenote" -> { "HTTP", "bytestring", "curl", "dataenc", "download-curl", "json", "time", "utf8-string" }
	"simpleprelude" -> { "ghc-paths", "haskell-src-exts", "process", "uniplate" }
	"simplesmtpclient" -> { "array", "directory", "network", "old-time" }
	"simplessh" -> { "bytestring", "mtl" }
	"simplex" -> { "directory", "filepath", "mtl", "process", "random", "regex-compat", "split", "time" }
	"simseq" -> { "bio", "bytestring", "random" }
	"sindre" -> { "X11", "X11-rm", "X11-xshape", "array", "attoparsec", "bytestring", "containers", "mtl", "parsec", "permute", "process", "regex-pcre", "setlocale", "text", "unix", "utf8-string", "x11-xim" }
	"singletons" -> { "containers", "mtl", "template-haskell", "th-desugar" }
	"sink" -> {  }
	"siphash" -> { "bytestring", "cpu" }
	"sirkel" -> { "SHA", "binary", "bytestring", "containers", "hashtables", "haskell98", "random", "remote", "transformers" }
	"sized-types" -> { "array", "containers" }
	"sized-vector" -> { "constraints", "deepseq", "equational-reasoning", "hashable", "monomorphic", "singletons", "type-natural" }
	"sizes" -> { "bytestring", "cmdargs", "deepseq", "dlist", "lens", "parallel-io", "regex-posix", "system-fileio", "system-filepath", "text", "unix" }
	"skein" -> { "bytestring", "cereal", "crypto-api", "tagged" }
	"skype4hs" -> { "X11", "attoparsec", "bytestring", "lifted-base", "monad-control", "mtl", "stm", "text", "time", "transformers-base", "word8" }
	"skypelogexport" -> { "IfElse", "attoparsec", "bytestring", "containers", "directory", "filepath", "ghc-binary", "haskell98", "old-locale", "regex-pcre", "time", "utf8-string" }
	"slice-cpp-gen" -> { "MissingH", "bytestring", "cmdargs", "containers", "directory", "filepath", "language-slice" }
	"slidemews" -> { "MonadCatchIO-transformers", "aeson", "bytestring", "mtl", "pandoc", "snap-core", "snap-server", "utf8-string" }
	"sloane" -> { "HTTP", "ansi-terminal", "bytestring", "cmdargs", "terminal-size", "url" }
	"sloth" -> { "mtl", "process" }
	"smallarray" -> { "bytestring", "deepseq", "hashable" }
	"smallcaps" -> { "attoparsec", "containers", "data-default", "directory", "filepath", "parsec", "smallcaps", "text", "transformers" }
	"smallcheck" -> { "ghc-prim", "logict", "mtl", "pretty" }
	"smallpt-hs" -> { "vector" }
	"smallstring" -> { "bytestring", "deepseq", "hashable", "smallarray", "text", "utf8-string" }
	"smartGroup" -> { "bytestring", "containers", "template-haskell" }
	"smartcheck" -> { "QuickCheck", "containers", "generic-deriving", "ghc-prim", "mtl", "random", "smartcheck" }
	"smartword" -> { "haskell98", "pretty", "unix", "utf8-string" }
	"sme" -> {  }
	"smt-lib" -> { "array", "directory", "polyparse" }
	"smtLib" -> { "pretty" }
	"smtp-mail" -> { "array", "base16-bytestring", "base64-bytestring", "bytestring", "cryptohash", "filepath", "mime-mail", "network", "text" }
	"smtp2mta" -> { "haskell98", "network", "process" }
	"smtps-gmail" -> { "base64-bytestring", "bytestring", "cprng-aes", "data-default", "filepath", "mime-mail", "network", "stringsearch", "text", "tls" }
	"snake-game" -> { "GLUT", "OpenGL", "random" }
	"snap" -> { "MonadCatchIO-transformers", "aeson", "attoparsec", "bytestring", "cereal", "clientsession", "comonad", "configurator", "containers", "directory", "directory-tree", "dlist", "errors", "filepath", "hashable", "heist", "lens", "logict", "mtl", "mwc-random", "old-time", "pwstore-fast", "regex-posix", "snap-core", "snap-server", "stm", "syb", "template-haskell", "text", "time", "transformers", "unordered-containers", "vector", "vector-algorithms", "xmlhtml" }
	"snap-accept" -> { "http-media", "snap-core" }
	"snap-app" -> { "MonadCatchIO-transformers", "blaze-html", "blaze-markup", "bytestring", "cgi", "data-default", "directory", "feed", "filepath", "mtl", "network", "old-locale", "postgresql-simple", "safe", "snap-core", "text", "time", "utf8-string", "xml" }
	"snap-auth-cli" -> { "aeson", "aeson-pretty", "bytestring", "clientsession", "cmdargs", "snap", "text", "unordered-containers", "utf8-string" }
	"snap-blaze" -> { "blaze-html", "snap-core" }
	"snap-blaze-clay" -> { "blaze-html", "clay", "snap-core" }
	"snap-core" -> { "HUnit", "MonadCatchIO-transformers", "attoparsec", "attoparsec-enumerator", "blaze-builder", "blaze-builder-enumerator", "bytestring", "bytestring-mmap", "case-insensitive", "containers", "deepseq", "directory", "enumerator", "filepath", "hashable", "mtl", "random", "regex-posix", "text", "time", "unix", "unix-compat", "unordered-containers", "vector", "zlib-enum" }
	"snap-cors" -> { "attoparsec", "bytestring", "case-insensitive", "hashable", "network", "snap", "snap-core", "snap-cors", "snap-server", "text", "transformers", "unordered-containers" }
	"snap-elm" -> { "Elm", "bytestring", "directory", "filepath", "process", "snap-core", "text", "transformers" }
	"snap-extras" -> { "aeson", "blaze-builder", "blaze-html", "bytestring", "configurator", "containers", "data-default", "digestive-functors", "digestive-functors-heist", "digestive-functors-snap", "directory-tree", "errors", "filepath", "heist", "mtl", "readable", "safe", "snap", "snap-core", "text", "transformers", "xmlhtml" }
	"snap-loader-dynamic" -> { "directory", "directory-tree", "hint", "mtl", "old-time", "snap-core", "template-haskell", "time", "unix" }
	"snap-loader-static" -> { "template-haskell" }
	"snap-predicates" -> { "attoparsec", "bytestring", "case-insensitive", "containers", "monads-tf", "snap-core", "text", "transformers" }
	"snap-server" -> { "MonadCatchIO-transformers", "attoparsec", "attoparsec-enumerator", "blaze-builder", "blaze-builder-enumerator", "bytestring", "case-insensitive", "containers", "enumerator", "mtl", "network", "old-locale", "snap-core", "text", "time", "unix", "unix-compat" }
	"snap-testing" -> { "QuickCheck", "async", "bytestring", "containers", "digestive-functors", "io-streams", "mtl", "process", "snap", "snap-core", "text", "transformers" }
	"snap-utils" -> { "MonadCatchIO-transformers", "bytestring", "heist", "http-types", "mtl", "snap", "snap-core", "text", "xmlhtml" }
	"snaplet-acid-state" -> { "acid-state", "snap", "text" }
	"snaplet-actionlog" -> { "blaze-builder", "bytestring", "digestive-functors", "digestive-functors-heist", "digestive-functors-snap", "errors", "heist", "persistent", "persistent-postgresql", "persistent-template", "readable", "restful-snap", "snap", "snap-extras", "snaplet-persistent", "text", "time", "transformers", "unordered-containers", "xmlhtml" }
	"snaplet-auth-acid" -> { "MonadCatchIO-transformers", "acid-state", "aeson", "attoparsec", "cereal", "clientsession", "directory", "errors", "filepath", "hashable", "lens", "mtl", "safecopy", "snap", "snap-core", "text", "time", "unordered-containers", "vector" }
	"snaplet-coffee" -> { "bytestring", "configurator", "directory", "filepath", "haskell-coffee", "mtl", "snap", "snap-core" }
	"snaplet-css-min" -> { "bytestring", "css-text", "directory", "filepath", "lens", "snap", "text", "utf8-string" }
	"snaplet-environments" -> { "bson", "configurator", "mtl", "regex-tdfa", "snap", "snap-core", "text", "unordered-containers" }
	"snaplet-fay" -> { "aeson", "bytestring", "configurator", "data-default", "directory", "fay", "filepath", "mtl", "snap", "snap-core", "transformers" }
	"snaplet-hdbc" -> { "HDBC", "MonadCatchIO-transformers", "bytestring", "clientsession", "containers", "convertible", "data-lens", "data-lens-template", "mtl", "resource-pool-catchio", "snap", "text", "time", "transformers", "unordered-containers" }
	"snaplet-i18n" -> { "configurator", "filepath", "heist", "lens", "snap", "snap-loader-static", "text", "xmlhtml" }
	"snaplet-mongoDB" -> { "MonadCatchIO-transformers", "bson", "bytestring", "compact-string-fix", "containers", "haskell-src-exts", "mongoDB", "mtl", "parsec", "regular", "safe", "snap", "snap-core", "template-haskell", "text", "time" }
	"snaplet-mongodb-minimalistic" -> { "lens", "mongoDB", "mtl", "snap", "text", "transformers" }
	"snaplet-mysql-simple" -> { "MonadCatchIO-transformers", "bytestring", "clientsession", "configurator", "containers", "errors", "lens", "mtl", "mysql", "mysql-simple", "resource-pool-catchio", "snap", "text", "transformers", "unordered-containers" }
	"snaplet-oauth" -> { "MonadCatchIO-mtl", "aeson", "bytestring", "bytestring-show", "data-lens", "data-lens-template", "failure", "hashable", "heist", "hoauth2", "http-conduit", "http-types", "snap", "snap-core", "snap-loader-dynamic", "snap-loader-static", "text", "unordered-containers" }
	"snaplet-persistent" -> { "MonadCatchIO-transformers", "bytestring", "clientsession", "configurator", "errors", "heist", "lens", "monad-logger", "mtl", "persistent", "persistent-postgresql", "persistent-template", "readable", "resource-pool-catchio", "resourcet", "safe", "snap", "text", "time", "transformers", "unordered-containers" }
	"snaplet-postgresql-simple" -> { "MonadCatchIO-transformers", "bytestring", "clientsession", "configurator", "errors", "mtl", "postgresql-simple", "resource-pool-catchio", "snap", "text", "transformers", "unordered-containers" }
	"snaplet-postmark" -> { "configurator", "mtl", "postmark", "snap", "text", "transformers" }
	"snaplet-recaptcha" -> { "blaze-html", "bytestring", "conduit", "data-lens", "data-lens-template", "failure", "http-conduit", "http-types", "snap", "snap-core", "snap-server", "text" }
	"snaplet-redis" -> { "configurator", "hedis", "lens", "mtl", "network", "snap", "transformers" }
	"snaplet-redson" -> { "aeson", "bytestring", "configurator", "containers", "data-lens", "data-lens-template", "easy-file", "hedis", "mtl", "snap", "snap-core", "snaplet-redis", "text", "utf8-string", "websockets", "websockets-snap" }
	"snaplet-rest" -> { "aeson", "blaze-builder", "bytestring", "case-insensitive", "http-media", "lens", "mtl", "snap", "snap-accept", "snap-core", "text", "utf8-string", "xmlhtml" }
	"snaplet-riak" -> { "aeson", "containers", "data-lens", "data-lens-template", "mtl", "riak", "riak-protobuf", "snap", "snap-core", "time", "transformers" }
	"snaplet-sedna" -> { "bytestring", "containers", "monad-control", "mtl", "resource-pool", "sednaDBXML", "snap" }
	"snaplet-sqlite-simple" -> { "MonadCatchIO-transformers", "aeson", "bytestring", "clientsession", "configurator", "direct-sqlite", "mtl", "snap", "sqlite-simple", "text", "transformers", "unordered-containers" }
	"snaplet-stripe" -> { "bytestring", "configurator", "heist", "mtl", "snap", "stripe", "text", "text-format", "transformers", "xmlhtml" }
	"snaplet-tasks" -> { "MissingH", "bytestring", "containers", "curl", "data-hash", "haskell98", "mtl", "network", "snap", "snap-core" }
	"snaplet-typed-sessions" -> { "PSQueue", "bytestring", "cereal", "clientsession", "containers", "hashtables", "mtl", "random", "regex-posix", "snap", "snap-core", "time" }
	"snappy" -> { "bytestring" }
	"snappy-framing" -> { "array", "binary", "bytestring", "snappy" }
	"snappy-iteratee" -> { "bytestring", "iteratee", "snappy" }
	"sndfile-enumerators" -> { "MonadCatchIO-transformers", "binary", "bytestring", "containers", "filepath", "iteratee", "listlike-instances", "transformers", "vector", "word24" }
	"snippet-extractor" -> { "parsec" }
	"snm" -> { "HsSyck", "containers", "directory", "filepath", "parsec", "safe", "spoonutil", "xhtml" }
	"snow-white" -> { "binary", "bytestring", "mps" }
	"snowball" -> { "bytestring", "text", "text-icu" }
	"snowflake" -> { "time" }
	"snowglobe" -> { "GLUT", "OpenGLRaw", "bytestring", "containers", "gl-capture", "hmatrix", "random" }
	"soap" -> { "bytestring", "conduit", "configurator", "data-default", "http-client", "http-types", "iconv", "mtl", "text", "unordered-containers", "xml-conduit", "xml-conduit-writer", "xml-types" }
	"soap-openssl" -> { "HsOpenSSL", "configurator", "data-default", "http-client", "http-client-openssl", "soap", "text" }
	"soap-tls" -> { "configurator", "connection", "data-default", "http-client", "http-client-tls", "soap", "text", "tls", "x509", "x509-store", "x509-validation" }
	"sock2stream" -> { "binary", "bytestring", "containers", "directory", "haskell98", "network" }
	"sockaddr" -> { "byteorder", "bytestring", "network" }
	"socket-activation" -> { "network", "transformers", "unix" }
	"socketio" -> { "aeson", "ansi-terminal", "bytestring", "http-types", "lifted-base", "monad-control", "mtl", "parsec", "random", "text", "transformers-base", "unordered-containers", "vector", "wai", "warp" }
	"socks" -> { "bytestring", "cereal", "network" }
	"sodium" -> { "containers", "mtl" }
	"soegtk" -> { "cairo", "gtk", "old-time", "stm" }
	"som" -> { "MonadRandom", "grid" }
	"sonic-visualiser" -> { "array", "bytestring", "bzlib", "containers", "mtl", "pretty", "utf8-string", "xml" }
	"sophia" -> { "bindings-sophia", "bytestring" }
	"sort-by-pinyin" -> { "air", "air-extra", "bytestring", "containers", "text" }
	"sorted" -> {  }
	"sorty" -> { "bytestring" }
	"source-code-server" -> { "HDBC", "HDBC-sqlite3", "StateVar", "bytestring", "containers", "curl", "data-default", "directory", "filepath", "hack", "hack-contrib", "hack-handler-happstack", "haskell98", "json", "loli", "mps", "mtl", "process", "safe", "stm", "template-haskell", "time", "unix" }
	"sourcemap" -> { "aeson", "attoparsec", "bytestring", "process", "text", "unordered-containers", "utf8-string" }
	"sousit" -> { "bytestring", "cereal", "mtl", "resourcet", "stm", "transformers" }
	"sox" -> { "containers", "explicit-exception", "extensible-exceptions", "process", "sample-frame", "transformers", "unix", "utility-ht" }
	"soxlib" -> { "containers", "explicit-exception", "extensible-exceptions", "sample-frame", "storablevector", "transformers", "utility-ht" }
	"soyuz" -> { "QuickCheck", "bytestring", "cereal", "cmdargs", "containers", "pretty", "trifecta", "uniplate", "vector" }
	"spacepart" -> { "vector-space" }
	"sparse" -> { "contravariant", "deepseq", "hybrid-vectors", "lens", "primitive", "transformers", "vector", "vector-algorithms" }
	"sparse-lin-alg" -> { "containers" }
	"sparsebit" -> { "haskell98" }
	"sparsecheck" -> { "containers" }
	"sparser" -> { "containers", "data-default", "monadplus", "nats", "pointed", "semigroups" }
	"spata" -> { "dlist", "mps", "mtl" }
	"spatial-math" -> { "linear" }
	"spawn" -> {  }
	"special-functors" -> { "mtl" }
	"special-keys" -> { "aeson", "blaze-markup", "bytestring", "cereal", "deepseq", "hashable", "mwc-random", "path-pieces", "primitive", "safecopy", "text", "uuid" }
	"specialize-th" -> { "MissingH", "composition", "derive", "mtl", "newtype", "newtype-th", "template-haskell", "th-expand-syns", "tuple", "type-sub-th", "uniplate", "universe-th" }
	"species" -> { "containers", "multiset-comb", "np-extras", "numeric-prelude", "template-haskell" }
	"speculation" -> { "ghc-prim", "stm", "transformers" }
	"speculation-transformers" -> { "speculation" }
	"spelling-suggest" -> { "edit-distance", "parseargs", "phonetic-code", "sqlite" }
	"sphero" -> { "bytestring", "cereal", "containers", "mtl", "simple-bluetooth" }
	"sphinx" -> { "binary", "bytestring", "data-binary-ieee754", "network", "text", "text-icu", "xml" }
	"sphinx-cli" -> { "sphinx" }
	"spike" -> { "containers", "directory", "filepath", "glib", "global-variables", "gtk", "mtl", "process", "random", "rosezipper", "stm", "webkit" }
	"spine" -> {  }
	"splaytree" -> { "deepseq" }
	"splice" -> { "network" }
	"splines" -> { "containers", "polynomial", "vector", "vector-space" }
	"split" -> {  }
	"split-channel" -> {  }
	"split-record" -> { "numeric-prelude", "soxlib", "storablevector", "synthesizer-core", "transformers", "utility-ht" }
	"split-tchan" -> { "stm" }
	"splitter" -> { "directory", "filepath", "parsec", "range" }
	"splot" -> { "HUnit", "bytestring", "bytestring-lexing", "cairo", "colour", "containers", "mtl", "strptime", "template-haskell", "time", "vcs-revision" }
	"spool" -> { "bytestring", "vector" }
	"spoon" -> { "deepseq" }
	"spoonutil" -> { "directory", "extensible-exceptions", "filepath", "parsec" }
	"spreadsheet" -> { "explicit-exception", "transformers", "utility-ht" }
	"spsa" -> { "hmatrix", "mtl", "random" }
	"spy" -> { "cmdargs", "directory", "filemanip", "filepath", "fsnotify", "json", "process", "system-filepath", "time", "unix" }
	"sqlite" -> { "bytestring", "directory", "pretty", "time", "utf8-string" }
	"sqlite-simple" -> { "attoparsec", "blaze-builder", "blaze-textual", "bytestring", "containers", "direct-sqlite", "text", "time", "transformers" }
	"sqlvalue-list" -> { "HDBC", "convertible", "template-haskell" }
	"squeeze" -> { "Cabal", "QuickCheck", "directory", "factory", "filepath", "mtl", "random", "toolshed", "unix" }
	"srcinst" -> { "MissingH", "directory", "hslogger", "network", "parsec", "process", "regex-compat", "unix" }
	"srcloc" -> {  }
	"srec" -> { "bytestring" }
	"sscgi" -> { "Glob", "MonadCatchIO-mtl", "attoparsec", "bytestring", "case-insensitive", "containers", "mtl", "transformers", "utf8-string" }
	"ssh" -> { "HsOpenSSL", "RSA", "SHA", "SimpleAES", "asn1-data", "base64-string", "binary", "bytestring", "cereal", "containers", "crypto-api", "crypto-pubkey-types", "cryptohash-cryptoapi", "network", "process", "random", "split", "transformers" }
	"sshtun" -> { "containers", "curl", "directory", "hdaemonize", "hslogger", "mtl", "process", "regex-compat", "stm", "unix" }
	"sssp" -> { "attempt", "attoparsec", "aws", "base64-bytestring", "blaze-builder", "bytestring", "case-insensitive", "cereal", "conduit", "containers", "cryptohash", "data-default", "http-conduit", "http-types", "mtl", "network-conduit", "text", "wai", "wai-extra", "warp" }
	"sstable" -> { "array", "binary", "bytestring", "cmdargs", "containers", "deepseq", "directory", "iteratee" }
	"ssv" -> { "containers" }
	"stable-maps" -> { "containers", "ghc-prim" }
	"stable-memo" -> { "ghc-prim", "hashtables", "tagged" }
	"standalone-haddock" -> { "Cabal", "containers", "directory", "filepath", "optparse-applicative" }
	"star-to-star" -> {  }
	"star-to-star-contra" -> { "star-to-star" }
	"starling" -> { "binary", "bytestring", "failure", "transformers" }
	"starrover2" -> { "EdisonCore", "FTGL", "OpenGL", "SDL", "bytestring", "directory", "haskell98", "mtl", "random" }
	"state" -> { "arrows", "mtl" }
	"state-plus" -> { "mtl" }
	"state-record" -> { "mtl", "template-haskell" }
	"stateWriter" -> { "mtl", "transformers" }
	"statechart" -> { "polyparse" }
	"stateful-mtl" -> { "MaybeT", "mtl" }
	"stateref" -> { "mtl", "stm" }
	"statestack" -> { "mtl", "transformers" }
	"statethread" -> { "applicative", "transformers" }
	"statgrab" -> { "MonadCatchIO-transformers", "async", "bytestring", "time", "transformers" }
	"static-hash" -> { "array", "containers", "hashable", "primes" }
	"static-resources" -> { "MissingH", "directory", "filepath", "hslogger", "mtl", "old-time", "process", "syb", "time" }
	"staticanalysis" -> { "MissingH" }
	"statistics" -> { "binary", "deepseq", "erf", "ghc-prim", "math-functions", "monad-par", "mwc-random", "primitive", "vector", "vector-algorithms", "vector-binary-instances" }
	"statistics-dirichlet" -> { "deepseq", "hmatrix-special", "nonlinear-optimization", "vector" }
	"statistics-fusion" -> { "vector" }
	"statistics-linreg" -> { "MonadRandom", "random", "random-shuffle", "safe", "statistics", "vector" }
	"stats" -> { "statistics", "text", "vector" }
	"statvfs" -> {  }
	"stb-image" -> { "bitmap", "bytestring" }
	"stb-truetype" -> { "array", "bytestring", "containers" }
	"stdata" -> { "parsec", "syb", "template-haskell" }
	"steeloverseer" -> { "daemons", "fsnotify", "process", "regex-tdfa", "system-filepath", "text", "time", "unix" }
	"stemmer" -> {  }
	"stepwise" -> { "containers", "mtl" }
	"stickyKeysHotKey" -> {  }
	"stm" -> { "array" }
	"stm-channelize" -> { "stm" }
	"stm-chans" -> { "stm" }
	"stm-conduit" -> { "async", "cereal", "cereal-conduit", "conduit", "conduit-extra", "directory", "lifted-async", "lifted-base", "monad-control", "monad-loops", "resourcet", "stm", "stm-chans", "transformers" }
	"stm-delay" -> { "stm" }
	"stm-firehose" -> { "blaze-builder", "conduit", "http-types", "network-conduit", "stm", "stm-chans", "stm-conduit", "transformers", "wai", "warp" }
	"stm-io-hooks" -> { "array", "containers", "mtl", "stm" }
	"stm-lifted" -> { "stm", "transformers" }
	"stm-linkedlist" -> { "stm" }
	"stm-orelse-io" -> { "stm" }
	"stm-promise" -> { "mtl", "process", "stm" }
	"stm-sbchan" -> { "stm", "stm-tlist" }
	"stm-split" -> { "stm" }
	"stm-stats" -> { "containers", "stm", "template-haskell", "time" }
	"stm-tlist" -> { "stm" }
	"stmcontrol" -> { "haskell98", "mtl", "stm" }
	"stomp-conduit" -> { "conduit", "mime", "mtl", "stomp-queue", "stompl" }
	"stomp-patterns" -> { "bytestring", "containers", "mime", "mtl", "split", "stomp-queue", "stompl", "time" }
	"stomp-queue" -> { "attoparsec", "bytestring", "mime", "network", "split", "stompl", "time", "utf8-string" }
	"stompl" -> { "attoparsec", "bytestring", "mime", "split", "utf8-string" }
	"storable" -> { "mtl" }
	"storable-complex" -> {  }
	"storable-endian" -> { "byteorder" }
	"storable-record" -> { "transformers", "utility-ht" }
	"storable-static-array" -> { "array", "tagged", "vector" }
	"storable-tuple" -> { "storable-record", "utility-ht" }
	"storablevector" -> { "QuickCheck", "non-negative", "syb", "transformers", "unsafe", "utility-ht" }
	"storablevector-carray" -> { "carray", "storablevector", "utility-ht" }
	"storablevector-streamfusion" -> { "binary", "bytestring", "old-time", "storablevector", "stream-fusion", "utility-ht" }
	"stream-fusion" -> {  }
	"stream-monad" -> { "logict" }
	"streamed" -> { "alsa-core", "alsa-seq", "containers", "data-accessor", "data-accessor-transformers", "event-list", "midi", "midi-alsa", "non-negative", "random", "transformers", "utility-ht" }
	"streaming-commons" -> { "bytestring", "directory", "network", "text", "transformers", "unix", "zlib" }
	"streamproc" -> {  }
	"streams" -> { "adjunctions", "comonad", "distributive", "semigroupoids", "semigroups" }
	"strict" -> { "array" }
	"strict-base-types" -> { "QuickCheck", "aeson", "bifunctors", "binary", "deepseq", "ghc-prim", "lens", "strict" }
	"strict-concurrency" -> { "deepseq" }
	"strict-ghc-plugin" -> { "ghc", "syb" }
	"strict-identity" -> {  }
	"strict-io" -> { "deepseq", "extensible-exceptions" }
	"strictify" -> { "directory", "filepath", "process", "unix" }
	"strictly" -> { "deepseq" }
	"string" -> { "containers" }
	"string-class" -> { "bytestring", "tagged", "text" }
	"string-combinators" -> { "base-unicode-symbols" }
	"string-conversions" -> { "bytestring", "text", "utf8-string" }
	"string-qq" -> { "template-haskell" }
	"string-quote" -> { "template-haskell" }
	"string-similarity" -> { "suffixtree" }
	"stringable" -> { "bytestring", "system-filepath", "text" }
	"stringbuilder" -> {  }
	"stringlike" -> { "bytestring", "text" }
	"stringprep" -> { "containers", "text", "text-icu" }
	"strings" -> { "bytestring", "text" }
	"stringsearch" -> { "array", "bytestring", "containers" }
	"stringtable-atom" -> { "binary", "bytestring", "containers", "syb" }
	"stripe" -> { "aeson", "bytestring", "http-conduit", "http-types", "mtl", "text", "time", "unordered-containers", "utf8-string" }
	"strptime" -> { "bytestring", "text", "time" }
	"structural-induction" -> { "containers", "genifunctors", "mtl", "pretty", "safe" }
	"structured-haskell-mode" -> { "haskell-src-exts" }
	"structured-mongoDB" -> { "array", "bson", "bytestring", "compact-string-fix", "containers", "monad-control", "mongoDB", "mtl", "old-time", "template-haskell", "transformers", "transformers-base" }
	"structures" -> { "contravariant", "deepseq", "free", "ghc", "ghc-prim", "hashable", "hybrid-vectors", "lens", "monad-st", "parallel", "primitive", "semigroups", "transformers", "vector", "vector-algorithms" }
	"stunclient" -> { "bytestring", "cereal", "crypto-api", "cryptohash", "cryptohash-cryptoapi", "digest", "network", "random", "stringprep", "text", "transformers", "unbounded-delays" }
	"stunts" -> { "GLFW-b", "binary", "bullet", "bytestring", "containers", "directory", "elerea", "lambdacube-bullet", "lambdacube-engine", "mtl", "random", "vector" }
	"stylish-haskell" -> { "aeson", "bytestring", "cmdargs", "containers", "directory", "filepath", "haskell-src-exts", "mtl", "strict", "stylish-haskell", "syb", "yaml" }
	"stylized" -> { "ansi-terminal" }
	"subtitleParser" -> { "attoparsec", "containers", "text" }
	"subtitles" -> { "split" }
	"suffixarray" -> { "HUnit", "vector" }
	"suffixtree" -> { "bytestring", "containers" }
	"sugarhaskell" -> { "process" }
	"suitable" -> { "containers" }
	"sundown" -> { "bytestring", "text" }
	"sunlight" -> { "Cabal", "bytestring", "directory", "old-locale", "process", "random", "time", "tuple" }
	"sunroof-compiler" -> { "Boolean", "containers", "data-default", "data-reify", "mtl", "operational", "semigroups", "tagged", "template-haskell", "transformers", "vector-space" }
	"sunroof-examples" -> { "Boolean", "QuickCheck", "containers", "data-default", "directory", "filepath", "parallel-io", "process", "random", "semigroups", "shake", "stm", "sunroof-compiler", "sunroof-server" }
	"sunroof-server" -> { "aeson", "attoparsec", "containers", "data-default", "filepath", "kansas-comet", "scotty", "semigroups", "stm", "sunroof-compiler", "tagged", "text", "time", "transformers", "unordered-containers", "vector", "vector-space", "wai-middleware-static", "warp" }
	"supercollider-ht" -> { "hosc", "hsc3", "opensoundcontrol-ht", "process", "random", "transformers" }
	"supercollider-midi" -> { "alsa-seq", "array", "containers", "data-accessor", "data-accessor-transformers", "event-list", "hosc", "hsc3", "midi", "midi-alsa", "non-negative", "opensoundcontrol-ht", "random", "supercollider-ht", "transformers", "utility-ht" }
	"superdoc" -> { "Cabal", "containers", "directory", "filepath", "superdoc" }
	"supero" -> { "containers", "cpphs", "directory", "filepath", "haskell-src-exts", "mtl", "process", "time", "uniplate" }
	"supervisor" -> { "containers", "exceptions", "monadloc", "mtl" }
	"suspend" -> { "lifted-base", "transformers-base" }
	"svg2q" -> { "haskell98", "language-c", "pretty", "svgutils", "syb", "xml" }
	"svgcairo" -> { "cairo", "glib", "mtl" }
	"svgutils" -> { "filepath", "xml" }
	"svm" -> { "array" }
	"svm-simple" -> { "binary", "bindings-svm", "bytestring", "containers", "deepseq", "directory", "monad-par", "mwc-random", "vector" }
	"svndump" -> { "attoparsec", "bytestring", "containers", "filepath", "old-locale", "text", "time" }
	"swapper" -> { "binary", "bytestring", "deepseq", "happstack-data", "happstack-state", "parallel" }
	"swf" -> { "mtl", "pretty" }
	"swift-lda" -> { "array", "containers", "ghc-prim", "mwc-random", "primitive", "vector" }
	"swish" -> { "containers", "directory", "filepath", "hashable", "intern", "mtl", "network", "old-locale", "polyparse", "semigroups", "swish", "text", "time" }
	"syb" -> {  }
	"syb-extras" -> { "eq", "prelude-extras" }
	"syb-with-class" -> { "array", "bytestring", "containers", "template-haskell" }
	"syb-with-class-instances-text" -> { "syb-with-class", "text" }
	"sylvia" -> { "cairo", "comonad-transformers", "data-default", "data-lens", "data-lens-template", "gtk", "optparse-applicative", "parsec", "transformers", "void" }
	"sym" -> { "QuickCheck", "array", "hashable" }
	"sym-plot" -> { "diagrams-cairo", "diagrams-lib", "sym" }
	"symbol" -> { "containers", "deepseq", "syb" }
	"sync" -> { "stm" }
	"synchronous-channels" -> {  }
	"syntactic" -> { "array", "constraints", "containers", "data-hash", "ghc-prim", "mtl", "template-haskell", "transformers", "tree-view", "tuple" }
	"syntactical" -> {  }
	"syntax-trees" -> { "haskell-src-exts", "hint", "mtl", "template-haskell", "uniplate" }
	"synthesizer" -> { "QuickCheck", "array", "binary", "bytestring", "containers", "directory", "event-list", "filepath", "gnuplot", "non-negative", "numeric-prelude", "numeric-quest", "old-time", "process", "random", "sox", "storable-record", "storablevector", "transformers", "utility-ht" }
	"synthesizer-alsa" -> { "alsa-core", "alsa-pcm", "alsa-seq", "event-list", "midi", "midi-alsa", "non-negative", "numeric-prelude", "old-time", "random", "sox", "storablevector", "synthesizer-core", "synthesizer-dimensional", "synthesizer-midi", "transformers", "utility-ht" }
	"synthesizer-core" -> { "QuickCheck", "array", "binary", "bytestring", "containers", "deepseq", "event-list", "explicit-exception", "filepath", "non-empty", "non-negative", "numeric-prelude", "numeric-quest", "process", "random", "sample-frame-np", "sox", "storable-record", "storable-tuple", "storablevector", "stream-fusion", "transformers", "utility-ht" }
	"synthesizer-dimensional" -> { "bytestring", "event-list", "non-negative", "numeric-prelude", "random", "sox", "storable-record", "storablevector", "synthesizer-core", "transformers", "utility-ht" }
	"synthesizer-inference" -> { "UniqueLogicNP", "event-list", "non-negative", "numeric-prelude", "random", "synthesizer-core", "transformers", "utility-ht" }
	"synthesizer-llvm" -> { "containers", "event-list", "filepath", "llvm-extra", "llvm-tf", "midi", "non-empty", "non-negative", "numeric-prelude", "random", "sox", "storable-record", "storable-tuple", "storablevector", "synthesizer-core", "synthesizer-midi", "tfp", "transformers", "unsafe", "utility-ht", "vault" }
	"synthesizer-midi" -> { "array", "containers", "data-accessor", "data-accessor-transformers", "deepseq", "event-list", "midi", "non-negative", "numeric-prelude", "sox", "storable-record", "storablevector", "synthesizer-core", "synthesizer-dimensional", "transformers", "utility-ht" }
	"sys-auth-smbclient" -> { "process", "text" }
	"system-argv0" -> { "bytestring", "system-filepath", "text" }
	"system-command" -> { "directory", "filepath", "process", "transformers" }
	"system-fileio" -> { "bytestring", "system-filepath", "text", "time", "unix" }
	"system-filepath" -> { "bytestring", "deepseq", "text" }
	"system-gpio" -> { "array", "ghc-prim" }
	"system-inotify" -> { "bytestring" }
	"system-posix-redirect" -> { "bytestring", "unix" }
	"system-random-effect" -> { "bytestring", "crypto-api", "extensible-effects", "mersenne-random-pure64", "primitive", "statistics", "vector", "vector-algorithms" }
	"system-time-monotonic" -> { "time" }
	"system-uuid" -> { "binary", "bytestring", "containers", "murmur-hash", "parsec", "template-haskell" }
	"syz" -> { "syb" }
	"ta" -> { "Takusen", "containers", "ghc-prim", "mtl", "template-haskell", "time" }
	"tableaux" -> { "QuickCheck", "cgi", "containers", "html", "mtl", "parsec" }
	"tables" -> { "binary", "cereal", "comonad", "containers", "deepseq", "hashable", "lens", "profunctors", "safecopy", "template-haskell", "transformers", "transformers-compat", "unordered-containers" }
	"tablestorage" -> { "HTTP", "SHA", "base64-bytestring", "bytestring", "conduit", "crypto-api", "cryptohash", "http-conduit", "http-types", "mtl", "network", "old-locale", "resourcet", "time", "transformers", "utf8-string", "xml" }
	"tabloid" -> { "bytestring", "containers", "gtk", "hint", "parallel", "process", "regex-base", "regex-posix" }
	"tabular" -> { "csv", "html", "mtl" }
	"taffybar" -> { "HStringTemplate", "HTTP", "X11", "cairo", "containers", "dbus", "dyre", "filepath", "gtk", "gtk-traymanager", "mtl", "network", "old-locale", "parsec", "process", "split", "stm", "text", "time", "transformers", "utf8-string", "xdg-basedir", "xmonad", "xmonad-contrib" }
	"tag-bits" -> { "ghc-prim" }
	"tag-stream" -> { "attoparsec", "blaze-builder", "bytestring", "enumerator" }
	"tagchup" -> { "bytestring", "containers", "data-accessor", "explicit-exception", "transformers", "utility-ht", "xml-basic" }
	"tagged" -> {  }
	"tagged-binary" -> { "binary", "bytestring", "data-default", "pureMD5", "spoon" }
	"tagged-list" -> { "AbortT-transformers", "binary", "natural-number", "type-equality", "type-level-natural-number", "type-level-natural-number-induction", "type-level-natural-number-operations" }
	"tagged-th" -> { "tagged", "template-haskell", "type-spine" }
	"tagged-transformer" -> { "array", "comonad", "contravariant", "distributive", "exceptions", "mtl", "reflection", "semigroupoids", "tagged", "transformers" }
	"tagging" -> { "bytestring", "pcre-light" }
	"taglib" -> { "bytestring", "utf8-string" }
	"taglib-api" -> { "bytestring", "containers", "mtl", "text", "transformers" }
	"tagset-positional" -> { "binary", "containers", "parsec", "text", "text-binary" }
	"tagshare" -> { "containers", "mtl" }
	"tagsoup" -> { "bytestring", "containers", "text" }
	"tagsoup-ht" -> { "bytestring", "containers", "data-accessor", "explicit-exception", "old-time", "tagsoup", "transformers", "utility-ht", "xml-basic" }
	"tagsoup-parsec" -> { "parsec", "tagsoup" }
	"tagstream-conduit" -> { "attoparsec", "attoparsec-conduit", "blaze-builder", "blaze-builder-conduit", "bytestring", "case-insensitive", "conduit", "conduit-extra", "data-default", "resourcet", "text", "transformers", "xml-conduit" }
	"takusen-oracle" -> { "QuickCheck", "mtl", "old-time", "random", "time" }
	"tamarin-prover" -> { "HUnit", "aeson", "array", "binary", "blaze-builder", "blaze-html", "bytestring", "cmdargs", "conduit", "containers", "deepseq", "derive", "directory", "dlist", "fclabels", "filepath", "hamlet", "http-types", "lifted-base", "monad-control", "mtl", "old-locale", "parallel", "parsec", "process", "safe", "syb", "tamarin-prover-term", "tamarin-prover-theory", "tamarin-prover-utils", "text", "threads", "time", "transformers", "uniplate", "wai", "warp", "yesod-core", "yesod-json", "yesod-static" }
	"tamarin-prover-term" -> { "HUnit", "attoparsec", "binary", "bytestring", "containers", "deepseq", "derive", "directory", "dlist", "mtl", "parsec", "process", "safe", "split", "syb", "tamarin-prover-utils" }
	"tamarin-prover-theory" -> { "HUnit", "array", "binary", "bytestring", "cmdargs", "containers", "deepseq", "derive", "directory", "dlist", "fclabels", "filepath", "mtl", "parallel", "parsec", "process", "safe", "syb", "tamarin-prover-term", "tamarin-prover-utils", "time", "transformers", "uniplate" }
	"tamarin-prover-utils" -> { "SHA", "base64-bytestring", "binary", "blaze-builder", "bytestring", "containers", "deepseq", "dlist", "fclabels", "mtl", "parsec", "pretty", "syb", "time", "transformers" }
	"tar" -> { "bytestring", "directory", "filepath", "old-time", "time" }
	"tardis" -> { "mtl" }
	"task" -> { "aeson", "attoparsec", "bytestring", "containers", "csv-enumerator", "directory", "filepath", "old-locale", "random", "text", "time", "unix" }
	"tasty" -> { "ansi-terminal", "async", "containers", "deepseq", "ghc-prim", "mtl", "optparse-applicative", "regex-tdfa", "stm", "tagged", "unbounded-delays" }
	"tasty-ant-xml" -> { "containers", "generic-deriving", "mtl", "reducers", "stm", "tagged", "tasty", "transformers", "xml" }
	"tasty-golden" -> { "bytestring", "deepseq", "filepath", "mtl", "optparse-applicative", "process", "tagged", "tasty", "temporary" }
	"tasty-hspec" -> { "hspec", "tasty" }
	"tasty-html" -> { "blaze-html", "bytestring", "containers", "generic-deriving", "mtl", "stm", "tagged", "tasty", "text", "transformers" }
	"tasty-hunit" -> { "HUnit", "mtl", "tasty" }
	"tasty-hunit-adapter" -> { "HUnit", "tasty", "tasty-hunit" }
	"tasty-integrate" -> { "aeson", "bytestring", "cmdargs", "containers", "directory", "either", "haskell-src-exts", "language-haskell-extract", "lens", "mtl", "parsec", "regex-posix", "split", "system-filepath", "tasty", "tasty-quickcheck", "text", "transformers", "unix" }
	"tasty-program" -> { "directory", "filepath", "process", "tasty" }
	"tasty-quickcheck" -> { "QuickCheck", "tagged", "tasty" }
	"tasty-rerun" -> { "containers", "mtl", "optparse-applicative", "reducers", "split", "stm", "tagged", "tasty", "transformers" }
	"tasty-smallcheck" -> { "async", "smallcheck", "tagged", "tasty" }
	"tasty-th" -> { "language-haskell-extract", "tasty", "template-haskell" }
	"tau" -> {  }
	"tbox" -> { "IfElse", "array", "binary", "cautious-file", "containers", "directory", "filepath", "monad-loops", "mtl", "random", "safe-failure", "stm-io-hooks" }
	"tcache-AWS" -> { "TCache", "aws", "bytestring", "conduit", "http-conduit", "network", "text" }
	"tccli" -> { "bytestring", "tokyocabinet-haskell", "utf8-string" }
	"tconfig" -> { "containers" }
	"tcp" -> { "containers", "old-time" }
	"tdd-util" -> { "HUnit", "MonadCatchIO-transformers", "QuickCheck", "bytestring", "lens", "parallel-io", "process", "random", "system-posix-redirect", "tagged", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "time", "transformers" }
	"tdoc" -> { "bytestring", "template-haskell", "transformers", "xhtml" }
	"teams" -> { "containers", "fgl", "graphviz" }
	"template" -> { "mtl", "text" }
	"template-default" -> { "data-default", "template-haskell" }
	"template-haskell" -> { "containers", "pretty" }
	"template-hsml" -> { "blaze-markup", "haskell-src-exts", "haskell-src-meta", "parsec", "template-haskell" }
	"templatepg" -> { "binary", "bytestring", "haskell-src-meta", "mtl", "network", "old-locale", "parsec", "regex-compat", "regex-posix", "template-haskell", "time", "utf8-string" }
	"tempodb" -> { "HTTP", "HsOpenSSL", "aeson", "blaze-builder", "bytestring", "containers", "http-streams", "io-streams", "mtl", "old-locale", "text", "time" }
	"temporal-csound" -> { "csound-catalog", "csound-expression", "temporal-media", "temporal-music-notation", "temporal-music-notation-western" }
	"temporal-media" -> {  }
	"temporal-music-notation" -> { "data-default", "temporal-media", "vector" }
	"temporal-music-notation-demo" -> { "HCodecs", "binary", "data-default", "temporal-music-notation" }
	"temporal-music-notation-western" -> { "temporal-music-notation" }
	"temporary" -> { "directory", "exceptions", "filepath", "transformers", "unix" }
	"tempus" -> { "array", "directory", "executable-path", "filepath", "haskeline", "mtl", "uniplate", "utf8-string" }
	"tensor" -> { "ghc-prim", "random", "vector" }
	"term-rewriting" -> { "ansi-wl-pprint", "array", "containers", "mtl", "multiset", "parsec", "union-find-array" }
	"terminal-progress-bar" -> { "base-unicode-symbols" }
	"terminal-size" -> {  }
	"termination-combinators" -> { "containers", "contravariant" }
	"terminfo" -> {  }
	"terminfo-hs" -> { "attoparsec", "bytestring", "containers", "directory", "errors", "filepath" }
	"terrahs" -> { "haskell98", "old-time" }
	"test-framework" -> { "ansi-terminal", "ansi-wl-pprint", "containers", "hostname", "old-locale", "random", "regex-posix", "time", "xml" }
	"test-framework-doctest" -> { "doctest", "test-framework", "test-framework-hunit" }
	"test-framework-golden" -> { "bytestring", "filepath", "mtl", "process", "temporary", "test-framework" }
	"test-framework-hunit" -> { "HUnit", "extensible-exceptions", "test-framework" }
	"test-framework-program" -> { "directory", "process", "test-framework" }
	"test-framework-quickcheck" -> { "QuickCheck", "deepseq", "extensible-exceptions", "random", "test-framework" }
	"test-framework-quickcheck2" -> { "QuickCheck", "extensible-exceptions", "random", "test-framework" }
	"test-framework-sandbox" -> { "ansi-terminal", "lifted-base", "mtl", "temporary", "test-framework", "test-sandbox", "transformers" }
	"test-framework-skip" -> { "test-framework" }
	"test-framework-smallcheck" -> { "smallcheck", "test-framework", "transformers" }
	"test-framework-testing-feat" -> { "test-framework", "testing-feat" }
	"test-framework-th" -> { "haskell-src-exts", "language-haskell-extract", "regex-posix", "template-haskell", "test-framework" }
	"test-framework-th-prime" -> { "cpphs", "haskell-src-exts", "template-haskell", "test-framework" }
	"test-sandbox" -> { "bytestring", "cereal", "containers", "data-default", "directory", "filepath", "lifted-base", "monad-control", "monad-loops", "mtl", "network", "process", "random", "random-shuffle", "temporary", "transformers", "transformers-base", "unix" }
	"test-sandbox-hunit" -> { "HUnit", "lifted-base", "test-sandbox" }
	"test-sandbox-quickcheck" -> { "QuickCheck", "mtl", "random", "test-sandbox", "transformers" }
	"test-shouldbe" -> { "HUnit" }
	"test-simple" -> { "QuickCheck", "mtl", "state-plus", "template-haskell" }
	"testing-feat" -> { "QuickCheck", "mtl", "tagshare", "template-haskell" }
	"testloop" -> { "Cabal", "directory", "filepath", "fsnotify", "hint", "mtl", "system-filepath", "time", "unix" }
	"testpack" -> { "HUnit", "QuickCheck", "containers", "mtl", "random" }
	"testpattern" -> { "filepath", "gtk" }
	"testrunner" -> { "HUnit", "QuickCheck", "random", "regex-compat", "stm" }
	"tetris" -> { "GLUT", "random" }
	"texmath" -> { "containers", "pandoc-types", "parsec", "xml" }
	"text" -> { "array", "bytestring", "deepseq", "ghc-prim", "integer-gmp" }
	"text-binary" -> { "binary", "text" }
	"text-format" -> { "array", "double-conversion", "ghc-prim", "old-locale", "text", "time", "transformers" }
	"text-format-simple" -> { "MissingH" }
	"text-icu" -> { "bytestring", "text" }
	"text-json-qq" -> { "haskell-src-meta", "json", "json-qq", "parsec", "template-haskell" }
	"text-latin1" -> { "bytestring", "case-insensitive", "data-checked", "hashable", "text" }
	"text-locale-encoding" -> { "bytestring", "bytestring-handle", "text" }
	"text-normal" -> { "deepseq", "text", "text-icu" }
	"text-printer" -> { "bytestring", "pretty", "semigroups", "text", "text-latin1" }
	"text-register-machine" -> { "containers", "mtl", "vector" }
	"text-stream-decode" -> { "bytestring", "text" }
	"text-xml-generic" -> { "bytestring", "containers", "haskell98", "mtl", "not-in-base", "split", "syb", "template-haskell", "xml" }
	"text-xml-qq" -> { "parsec", "template-haskell", "xml" }
	"textPlot" -> { "array" }
	"textmatetags" -> { "haskell98", "process" }
	"texts" -> { "HUnit", "lists", "network", "text", "time" }
	"tf-random" -> { "primitive", "random", "time" }
	"tfp" -> {  }
	"tfp-th" -> { "template-haskell", "tfp" }
	"tftp" -> { "binary", "bytestring", "containers", "directory", "hslogger", "mtl", "network", "tftp", "transformers" }
	"tga" -> { "bytestring" }
	"th-build" -> { "template-haskell" }
	"th-desugar" -> { "containers", "mtl", "syb", "template-haskell" }
	"th-expand-syns" -> { "containers", "syb", "template-haskell" }
	"th-extras" -> { "syb", "template-haskell" }
	"th-fold" -> { "template-haskell" }
	"th-instance-reification" -> { "containers", "list-extras", "loch-th", "placeholders", "template-haskell", "th-expand-syns" }
	"th-instances" -> { "QuickCheck", "checkers", "derive", "mtl", "template-haskell", "th-kinds", "th-lift" }
	"th-kinds" -> { "containers", "mtl", "template-haskell" }
	"th-lift" -> { "packedstring", "template-haskell" }
	"th-lift-instances" -> { "bytestring", "containers", "template-haskell", "text", "th-lift", "vector" }
	"th-orphans" -> { "template-haskell", "th-lift" }
	"th-printf" -> { "attoparsec", "bytestring", "template-haskell", "text", "transformers" }
	"th-sccs" -> { "containers", "template-haskell" }
	"themoviedb" -> { "HTTP", "aeson", "bytestring", "network", "old-locale", "text", "time", "unix" }
	"themplate" -> { "configurator", "directory", "either", "errors", "filepath", "optparse-applicative", "text", "transformers" }
	"theoremquest" -> { "HTTP", "json", "utf8-string" }
	"theoremquest-client" -> { "HTTP", "network", "theoremquest" }
	"these" -> { "bifunctors", "containers", "mtl", "profunctors", "semigroupoids", "semigroups", "transformers", "vector" }
	"thespian" -> { "containers", "mtl" }
	"theta-functions" -> {  }
	"thih" -> { "pretty" }
	"thimk" -> { "edit-distance", "parseargs", "phonetic-code", "sqlite" }
	"thorn" -> { "bifunctors", "containers", "contravariant", "mtl", "profunctors", "random", "template-haskell" }
	"threadPool" -> { "process" }
	"threadmanager" -> { "containers" }
	"threads" -> { "base-unicode-symbols", "stm" }
	"threads-pool" -> { "containers", "mtl", "stm" }
	"threadscope" -> { "array", "binary", "cairo", "containers", "deepseq", "filepath", "ghc-events", "glib", "gtk", "mtl", "pango", "time", "unix" }
	"threefish" -> { "array", "bytestring", "cereal", "crypto-api", "data-default", "entropy", "random", "tagged" }
	"threepenny-gui" -> { "MonadCatchIO-transformers", "aeson", "attoparsec-enumerator", "bytestring", "containers", "data-default", "deepseq", "filepath", "hashable", "network", "safe", "snap-core", "snap-server", "stm", "template-haskell", "text", "time", "transformers", "unordered-containers", "utf8-string", "vault", "websockets", "websockets-snap" }
	"thrift" -> { "HTTP", "binary", "bytestring", "ghc-prim", "network" }
	"thrist" -> {  }
	"throttle" -> { "bytestring", "cmdargs", "data-extra", "network", "unix" }
	"thumbnail" -> { "bytestring", "gd" }
	"thumbnail-plus" -> { "bytestring", "conduit", "data-default", "directory", "either", "gd", "resourcet", "temporary", "transformers" }
	"thyme" -> { "QuickCheck", "aeson", "attoparsec", "bytestring", "containers", "deepseq", "ghc-prim", "mtl", "old-locale", "profunctors", "random", "text", "time", "vector", "vector-space" }
	"tianbar" -> { "MissingH", "aeson", "blaze-html", "blaze-markup", "containers", "dbus", "gtk", "gtk-traymanager", "network", "process", "split", "text", "utf8-string", "webkit", "xdg-basedir", "xmonad", "xmonad-contrib" }
	"tic-tac-toe" -> { "glade", "gtk", "haskell98" }
	"tidal" -> { "binary", "bytestring", "colour", "containers", "hashable", "hosc", "mersenne-random-pure64", "mtl", "parsec", "process", "text", "time", "transformers", "websockets" }
	"tie-knot" -> { "containers", "mtl", "recursion-schemes" }
	"tiempo" -> { "deepseq", "time" }
	"tiger" -> { "array", "containers", "uuagc", "uuagc-cabal", "uulib" }
	"tilings" -> {  }
	"timberc" -> { "array", "binary", "bytestring", "bzlib", "filepath", "haskell98", "mtl", "pretty" }
	"time" -> { "deepseq", "old-locale" }
	"time-compat" -> { "old-time", "time" }
	"time-extras" -> { "time" }
	"time-exts" -> { "QuickCheck", "aeson", "attoparsec", "bindings-DSL", "containers", "convertible", "data-default", "deepseq", "fclabels", "mtl", "old-locale", "random", "text", "time", "timezone-olson" }
	"time-http" -> { "ascii", "attempt", "attoparsec", "base-unicode-symbols", "blaze-builder", "blaze-textual", "bytestring", "convertible-text", "data-default", "failure", "tagged", "time" }
	"time-io-access" -> { "base-io-access", "time" }
	"time-lens" -> { "data-lens", "time" }
	"time-patterns" -> { "intervals", "lens", "profunctors", "thyme", "vector-space" }
	"time-recurrence" -> { "data-ordlist", "mtl", "time" }
	"time-series" -> { "array", "containers", "mtl", "time-series" }
	"time-units" -> {  }
	"time-w3c" -> { "convertible", "parsec", "time" }
	"timecalc" -> { "haskeline", "uu-parsinglib" }
	"timeit" -> {  }
	"timeout-control" -> { "ghc-prim", "lifted-base", "monad-control", "mtl", "transformers-base" }
	"timeout-with-results" -> { "deepseq", "mtl", "parallel" }
	"timeparsers" -> { "attoparsec", "bytestring", "containers", "convertible", "mtl", "time" }
	"timeplot" -> { "Chart", "Chart-cairo", "bytestring", "bytestring-lexing", "cairo", "colour", "containers", "data-default", "lens", "regex-tdfa", "strptime", "template-haskell", "time", "transformers", "vcs-revision" }
	"timerep" -> { "old-locale", "time" }
	"timers" -> { "lifted-base", "monad-control", "suspend", "transformers-base" }
	"timers-updatable" -> { "stm" }
	"timestamp-subprocess-lines" -> { "bytestring", "directory", "filepath", "old-locale", "process", "split", "time", "transformers" }
	"timezone-olson" -> { "binary", "bytestring", "extensible-exceptions", "time", "timezone-series" }
	"timezone-series" -> { "time" }
	"timing-convenience" -> { "time" }
	"tkhs" -> { "mtl", "parsec", "pretty", "utf8-string", "vty" }
	"tkyprof" -> { "aeson", "attoparsec", "attoparsec-conduit", "blaze-builder", "bytestring", "cmdargs", "conduit", "containers", "data-default", "directory", "filepath", "hamlet", "http-types", "mtl", "resourcet", "rosezipper", "shakespeare-css", "shakespeare-js", "stm", "template-haskell", "text", "time", "transformers", "unordered-containers", "vector", "wai", "wai-extra", "warp", "web-routes", "yesod", "yesod-core", "yesod-form", "yesod-static" }
	"tls" -> { "asn1-encoding", "asn1-types", "byteable", "bytestring", "cereal", "cipher-aes", "cipher-rc4", "crypto-numbers", "crypto-pubkey", "crypto-pubkey-types", "crypto-random", "cryptohash", "data-default-class", "mtl", "network", "x509", "x509-store", "x509-validation" }
	"tls-debug" -> { "bytestring", "cprng-aes", "crypto-pubkey", "data-default-class", "groom", "network", "pem", "time", "tls", "x509", "x509-system", "x509-validation" }
	"tls-extra" -> { "bytestring", "certificate", "cipher-aes", "cipher-rc4", "crypto-pubkey", "crypto-random", "cryptohash", "mtl", "network", "pem", "time", "tls", "vector" }
	"tnet" -> { "attoparsec", "bytestring", "utf8-string" }
	"to-haskell" -> { "containers", "haskell-src-exts", "transformers" }
	"to-string-class" -> {  }
	"to-string-instances" -> { "bytestring", "pretty", "text", "to-string-class" }
	"todos" -> { "Glob", "ansi-terminal", "base-unicode-symbols", "containers", "data-hash", "dates", "directory", "dyre", "filepath", "mtl", "parsec", "process", "regex-pcre", "syb", "time", "utf8-string" }
	"toilet" -> { "containers", "old-locale", "strict", "time", "transformers", "utility-ht" }
	"tokenize" -> { "split", "text" }
	"toktok" -> { "HUnit", "QuickCheck", "bytestring", "containers", "criterion", "filepath", "gf", "haskell98", "iconv", "progression" }
	"tokyocabinet-haskell" -> { "bytestring", "mtl" }
	"tokyotyrant-haskell" -> { "bytestring", "mtl" }
	"tomato-rubato-openal" -> { "OpenAL", "stm", "vector" }
	"toolshed" -> { "Cabal", "QuickCheck", "array", "containers", "deepseq", "directory", "filepath", "random" }
	"topkata" -> { "ALUT", "GLUT", "OpenAL", "OpenGL", "array", "filepath", "random" }
	"torch" -> { "QuickCheck", "mtl", "parallel" }
	"torrent" -> { "bencode", "binary", "filepath", "network" }
	"tostring" -> { "text", "utf8-string" }
	"total-map" -> { "containers" }
	"toysolver" -> { "OptDir", "algebra", "array", "bytestring", "containers", "data-interval", "deepseq", "filepath", "finite-field", "hashable", "heaps", "lattices", "logic-TPTP", "mtl", "multiset", "old-locale", "parse-dimacs", "parsec", "prettyclass", "primes", "queue", "random", "stm", "time", "toysolver", "type-level-numbers", "unbounded-delays", "vector-space" }
	"tpdb" -> { "HaXml", "containers", "filepath", "hashable", "hxt", "parsec", "time", "wl-pprint-text" }
	"trace-call" -> { "containers", "mtl" }
	"trace-function-call" -> {  }
	"traced" -> { "containers", "mtl", "pretty" }
	"tracer" -> { "mtl", "transformers" }
	"tracker" -> { "containers", "glib" }
	"trajectory" -> { "aeson", "attoparsec", "bytestring", "cmdargs", "containers", "http-enumerator", "http-types", "regexpr", "text", "unordered-containers", "uri" }
	"transactional-events" -> { "ListZipper", "MonadPrompt", "stm" }
	"transf" -> { "async", "containers", "data-default", "filepath", "hashable", "hint", "monadplus", "mtl", "music-preludes", "process", "semigroups" }
	"transformations" -> { "containers", "mtl", "multirec", "parsec", "regular", "rewriting", "template-haskell", "zipper" }
	"transformers" -> {  }
	"transformers-abort" -> { "data-default", "failure", "monad-control", "pointed", "semigroupoids", "transformers", "transformers-base" }
	"transformers-base" -> { "transformers" }
	"transformers-compat" -> { "transformers" }
	"transformers-compose" -> { "transformers" }
	"transformers-free" -> { "transformers" }
	"transformers-runnable" -> { "transformers" }
	"transformers-supply" -> { "mtl", "transformers" }
	"translatable-intset" -> { "fingertree" }
	"translate" -> { "curl", "json", "network", "utf8-string" }
	"traverse-with-class" -> { "template-haskell", "transformers" }
	"traypoweroff" -> { "gtk", "process" }
	"tree-monad" -> {  }
	"tree-view" -> { "containers", "mtl" }
	"treemap-html" -> { "Cabal", "containers", "filepath", "ghc", "html", "parsec", "regex-posix" }
	"treemap-html-tools" -> { "Cabal", "containers", "directory", "filepath", "ghc", "parsec", "regex-posix", "split", "treemap-html", "xml" }
	"treeviz" -> { "QuickCheck", "containers", "mtl", "random" }
	"tremulous-query" -> { "attoparsec", "bytestring", "containers", "deepseq", "mtl", "network" }
	"trhsx" -> {  }
	"triangulation" -> { "array", "collada-types", "haskell98", "tuple", "vector", "vector-algorithms" }
	"trifecta" -> { "ansi-terminal", "ansi-wl-pprint", "array", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "charset", "comonad", "containers", "deepseq", "fingertree", "ghc-prim", "hashable", "lens", "mtl", "parsers", "reducers", "semigroups", "transformers", "unordered-containers", "utf8-string" }
	"trimpolya" -> { "bio", "bytestring", "simpleargs" }
	"trivia" -> { "comonad", "distributive" }
	"truelevel" -> { "WAVE", "parseargs" }
	"tskiplist" -> { "array", "containers", "random", "stm" }
	"tsp-viz" -> { "gloss", "stm", "vector" }
	"tsparse" -> { "Decimal", "parsec", "pretty", "process", "random", "split", "time" }
	"tst" -> {  }
	"tuntap" -> { "bytestring", "unix" }
	"tup-functor" -> { "cpphs", "haskell-src-exts", "parsec2" }
	"tuple" -> { "OneTuple" }
	"tuple-gen" -> { "combinat" }
	"tuple-hlist" -> { "HList", "OneTuple" }
	"tuple-lenses" -> { "lens", "template-haskell" }
	"tuple-th" -> { "containers", "template-haskell" }
	"tupleinstances" -> { "template-haskell" }
	"tuples-homogenous-h98" -> {  }
	"turing-music" -> { "ALUT" }
	"turni" -> { "MonadRandom", "containers", "random" }
	"tweak" -> { "containers", "lens", "stm", "transformers" }
	"twentefp" -> { "gloss", "parsec", "time" }
	"twidge" -> { "ConfigFile", "HSH", "MissingH", "aeson", "binary", "bytestring", "curl", "directory", "hoauth", "hslogger", "mtl", "network", "old-locale", "parsec", "regex-posix", "text", "time", "unix", "utf8-string" }
	"twilight-stm" -> { "containers", "haskell98", "mtl" }
	"twill" -> { "QuickCheck", "aeson", "attoparsec", "base16-bytestring", "base64-bytestring", "bytestring", "cryptohash", "data-default", "datetime", "errors", "old-locale", "text", "time" }
	"twiml" -> { "network", "xml" }
	"twine" -> { "bytestring", "containers", "convertible", "filepath", "mtl", "parsec" }
	"twisty" -> { "MonadRandom", "array", "containers", "data-memocombinators", "parallel" }
	"twitter" -> { "curl", "directory", "filepath", "json", "mtl", "old-locale", "readline", "time", "xml" }
	"twitter-conduit" -> { "aeson", "attoparsec", "attoparsec-conduit", "authenticate-oauth", "bytestring", "conduit", "containers", "data-default", "failure", "http-client-multipart", "http-conduit", "http-types", "lens", "lifted-base", "monad-control", "monad-logger", "resourcet", "shakespeare-text", "template-haskell", "text", "time", "transformers", "transformers-base", "twitter-types" }
	"twitter-enumerator" -> { "aeson", "attoparsec", "attoparsec-enumerator", "authenticate", "bytestring", "containers", "enumerator", "http-enumerator", "http-types", "text", "tls-extra", "transformers" }
	"twitter-feed" -> { "aeson", "authenticate-oauth", "http-conduit", "json" }
	"twitter-types" -> { "aeson", "http-types", "text", "unordered-containers" }
	"tx" -> { "bytestring", "cereal", "safecopy", "stm", "transformers" }
	"txt-sushi" -> { "binary", "bytestring", "containers", "directory", "parsec", "regex-posix" }
	"txt2rtf" -> {  }
	"ty" -> { "ghc-prim" }
	"typalyze" -> { "bytestring", "directory", "filepath", "ghc", "process" }
	"type" -> { "containers", "template-haskell" }
	"type-booleans" -> {  }
	"type-cereal" -> { "bytestring", "cereal", "data-hash", "template-haskell", "type-digits", "type-spine" }
	"type-digits" -> { "template-haskell", "type-spine" }
	"type-eq" -> {  }
	"type-equality" -> {  }
	"type-equality-check" -> { "type-level" }
	"type-functions" -> { "kinds" }
	"type-int" -> { "template-haskell" }
	"type-level" -> { "syb", "template-haskell" }
	"type-level-natural-number" -> {  }
	"type-level-natural-number-induction" -> { "transformers", "type-level-natural-number" }
	"type-level-natural-number-operations" -> { "type-level-natural-number" }
	"type-level-numbers" -> { "template-haskell" }
	"type-level-tf" -> { "syb", "template-haskell" }
	"type-natural" -> { "constraints", "equational-reasoning", "monomorphic", "singletons", "template-haskell" }
	"type-ord" -> { "template-haskell", "type-digits", "type-spine" }
	"type-ord-spine-cereal" -> { "template-haskell", "type-cereal", "type-ord", "type-spine" }
	"type-prelude" -> { "ghc-prim" }
	"type-settheory" -> { "containers", "syb", "template-haskell", "transformers", "type-equality" }
	"type-spine" -> { "template-haskell" }
	"type-structure" -> { "array", "bytestring", "containers", "hashable", "loch-th", "mtl", "placeholders", "template-haskell", "text", "th-instance-reification", "time", "transformers", "unordered-containers", "vector" }
	"type-sub-th" -> { "DebugTraceHelpers", "HUnit", "QuickCheck", "template-haskell", "test-framework", "test-framework-hunit", "test-framework-quickcheck2", "tuple", "uniplate" }
	"type-unary" -> { "applicative-numbers", "ty", "vector-space" }
	"typeable-th" -> { "template-haskell", "transformers" }
	"typehash" -> { "binary", "bytestring", "mtl", "pureMD5", "syb" }
	"typelevel-tensor" -> { "QuickCheck", "numeric-prelude" }
	"typeof" -> { "process" }
	"typesafe-endian" -> {  }
	"typescript-docs" -> { "blaze-html", "cmdtheline", "containers", "filemanip", "filepath", "language-typescript", "parsec", "split", "syb", "utf8-string" }
	"typical" -> {  }
	"typography-geometry" -> { "containers", "parallel", "polynomials-bernstein", "vector" }
	"tz" -> { "binary", "bytestring", "time", "vector" }
	"uAgda" -> { "BNFC-meta", "array", "cmdargs", "containers", "mtl", "parsec", "pretty", "split", "transformers" }
	"ua-parser" -> { "aeson", "bytestring", "data-default", "filepath", "pcre-light", "syb", "text", "yaml" }
	"uacpid" -> { "containers", "directory", "filepath", "hslogger", "mtl", "network", "old-locale", "process", "regex-compat", "time", "unix" }
	"uconv" -> {  }
	"udbus" -> { "binary", "bytestring", "cereal", "containers", "ghc-prim", "mtl", "network", "unix", "utf8-string" }
	"udbus-model" -> { "bytestring", "udbus", "xml" }
	"udcode" -> { "containers", "mtl" }
	"udev" -> { "bytestring", "posix-paths", "select", "udev", "unix" }
	"uglymemo" -> { "containers" }
	"uhc-util" -> { "ListLike", "array", "binary", "bytestring", "containers", "directory", "fgl", "hashable", "mtl", "process", "syb", "time", "time-compat", "uulib" }
	"uhexdump" -> { "bytestring", "split" }
	"ui-command" -> { "data-default", "mtl", "old-locale", "time" }
	"uid" -> { "aeson", "bytestring", "cereal", "dataenc", "text", "uuid" }
	"una" -> { "bytestring", "cmdargs", "directory", "filepath", "io-storage", "process" }
	"unamb" -> {  }
	"unamb-custom" -> { "containers", "mtl" }
	"unbound" -> { "RepLib", "binary", "containers", "mtl", "transformers" }
	"unbounded-delays" -> {  }
	"unboxed-containers" -> { "containers" }
	"unexceptionalio" -> { "errors", "transformers" }
	"unfoldable" -> { "QuickCheck", "random", "transformers" }
	"ungadtagger" -> {  }
	"uni-events" -> { "containers", "uni-util" }
	"uni-graphs" -> { "containers", "mtl", "uni-events", "uni-htk", "uni-reactor", "uni-util" }
	"uni-htk" -> { "containers", "directory", "uni-events", "uni-posixutil", "uni-reactor", "uni-util" }
	"uni-posixutil" -> { "directory", "process", "uni-events", "uni-util", "unix" }
	"uni-reactor" -> { "containers", "directory", "uni-events", "uni-util" }
	"uni-uDrawGraph" -> { "containers", "uni-events", "uni-graphs", "uni-posixutil", "uni-reactor", "uni-util" }
	"uni-util" -> { "array", "bytestring", "containers", "directory", "ghc-prim", "mtl", "network", "old-time", "parsec" }
	"unicode" -> { "containers" }
	"unicode-names" -> { "array", "containers", "unicode-properties" }
	"unicode-normalization" -> { "bytestring", "compact-string" }
	"unicode-prelude" -> {  }
	"unicode-properties" -> { "array", "containers" }
	"unicode-symbols" -> { "containers" }
	"unification-fd" -> { "containers", "logict", "mtl" }
	"uniform-pair" -> { "ShowF" }
	"union-find" -> { "containers", "transformers" }
	"union-find-array" -> { "array", "mtl" }
	"uniplate" -> { "containers", "hashable", "syb", "unordered-containers" }
	"unique-logic" -> { "transformers", "utility-ht" }
	"unique-logic-tf" -> { "containers", "explicit-exception", "transformers", "utility-ht" }
	"uniqueid" -> {  }
	"units" -> { "singletons" }
	"unittyped" -> {  }
	"universal-binary" -> { "binary", "bytestring" }
	"universe" -> { "adjunctions", "comonad", "containers", "keys", "mtl", "transformers", "void" }
	"universe-th" -> { "composition", "mtl", "template-haskell", "tuple", "uniplate" }
	"unix" -> { "bytestring", "time" }
	"unix-bytestring" -> { "bytestring" }
	"unix-compat" -> { "unix" }
	"unix-handle" -> { "unix" }
	"unix-io-extra" -> {  }
	"unix-memory" -> { "unix" }
	"unix-process-conduit" -> { "bytestring", "conduit", "directory", "filepath", "process", "stm", "time", "transformers", "unix" }
	"unix-pty-light" -> { "unix" }
	"unix-time" -> { "bytestring", "old-time" }
	"unlambda" -> { "array", "mtl", "unix" }
	"unm-hip" -> { "array", "bytestring", "containers", "process", "vector" }
	"unordered-containers" -> { "deepseq", "hashable" }
	"unordered-containers-rematch" -> { "hashable", "rematch", "unordered-containers" }
	"unpack-funcs" -> { "bytestring", "primitive", "template-haskell", "transformers", "vector" }
	"unroll-ghc-plugin" -> { "ghc" }
	"unsafe" -> {  }
	"unsafe-promises" -> { "threads" }
	"unsafely" -> { "tagged", "unsafely" }
	"unscramble" -> { "array", "optparse-applicative", "stream-fusion", "unordered-containers" }
	"unusable-pkg" -> {  }
	"up" -> { "directory", "filepath", "mtl", "parsec", "split", "transformers" }
	"uploadcare" -> { "aeson", "attoparsec", "bytestring", "cryptohash", "hex", "http-conduit", "http-types", "old-locale", "time" }
	"upskirt" -> { "bytestring" }
	"ureader" -> { "ansi-wl-pprint", "async", "bytestring", "containers", "curl", "data-default", "deepseq", "directory", "download-curl", "feed", "filepath", "implicit-params", "network", "old-locale", "opml", "optparse-applicative", "parallel-io", "split", "tagsoup", "terminal-size", "text", "time", "xml" }
	"urembed" -> { "bytestring", "cake3", "directory", "filepath", "language-javascript", "mime-types", "mtl", "optparse-applicative", "process", "syb", "text" }
	"uri" -> { "parsec", "safe", "utf8-string" }
	"uri-conduit" -> { "bytestring", "conduit", "containers", "deepseq", "failure", "monad-control", "network", "system-fileio", "system-filepath", "text", "transformers" }
	"uri-encode" -> { "bytestring", "network", "text", "utf8-string" }
	"uri-enumerator" -> { "bytestring", "containers", "enumerator", "failure", "network", "text", "transformers" }
	"uri-enumerator-file" -> { "bytestring", "containers", "enumerator", "lifted-base", "monad-control", "network", "system-fileio", "system-filepath", "text", "transformers", "uri-enumerator" }
	"uri-template" -> { "containers", "utf8-string" }
	"url" -> { "utf8-string" }
	"url-generic" -> { "mtl", "syb" }
	"urlcheck" -> { "bytestring", "containers", "mtl", "network", "old-time" }
	"urldecode" -> { "network" }
	"urldisp-happstack" -> { "bytestring", "happstack-server", "mtl" }
	"urlencoded" -> { "mtl", "network", "split" }
	"urxml" -> { "filepath", "mtl", "optparse-applicative", "parsec", "process", "syb" }
	"usb" -> { "base-unicode-symbols", "bindings-libusb", "bytestring", "text", "vector" }
	"usb-enumerator" -> { "base-unicode-symbols", "bindings-libusb", "iteratee", "monad-control", "transformers", "usb" }
	"usb-id-database" -> { "base-unicode-symbols", "bytestring", "containers", "containers-unicode-symbols", "parsimony" }
	"usb-iteratee" -> { "base-unicode-symbols", "bindings-libusb", "iteratee", "monad-control", "usb", "vector" }
	"usb-safe" -> { "base-unicode-symbols", "bindings-libusb", "bytestring", "iteratee", "regions", "text", "transformers", "usb" }
	"utf8-env" -> { "mtl", "utf8-string" }
	"utf8-light" -> { "bytestring", "ghc-prim" }
	"utf8-prelude" -> { "utf8-string" }
	"utf8-string" -> {  }
	"utility-ht" -> {  }
	"uu-interleaved" -> {  }
	"uu-options" -> { "lenses", "mtl", "transformers", "uu-interleaved", "uu-parsinglib" }
	"uu-parsinglib" -> { "ListLike", "time", "uu-interleaved" }
	"uu-tc" -> {  }
	"uuagc" -> { "array", "containers", "directory", "filepath", "ghc-prim", "haskell-src-exts", "mtl", "uuagc", "uuagc-cabal", "uulib" }
	"uuagc-bootstrap" -> { "array", "containers", "directory", "filepath", "ghc-prim", "haskell-src-exts", "mtl", "uulib" }
	"uuagc-cabal" -> { "Cabal", "containers", "directory", "filepath", "mtl", "process", "uulib" }
	"uuagd" -> { "blaze-html", "hamlet", "process", "template-haskell" }
	"uuid" -> { "binary", "bytestring", "cryptohash", "deepseq", "hashable", "network-info", "random", "time" }
	"uuid-aeson" -> { "aeson", "text", "uuid" }
	"uuid-le" -> { "bytestring", "uuid" }
	"uuid-quasi" -> { "template-haskell", "uuid" }
	"uulib" -> { "ghc-prim" }
	"uvector" -> {  }
	"uvector-algorithms" -> { "uvector" }
	"uxadt" -> { "MissingH" }
	"v4l2" -> { "bindings-DSL", "bindings-libv4l2", "bindings-linux-videodev2", "bindings-posix", "containers", "ioctl" }
	"v4l2-examples" -> { "GLUT", "v4l2" }
	"vacuum" -> { "array", "containers", "ghc-prim" }
	"vacuum-cairo" -> { "cairo", "deepseq", "directory", "gtk", "pretty", "process", "strict-concurrency", "svgcairo", "vacuum" }
	"vacuum-graphviz" -> { "filepath", "graphviz", "vacuum" }
	"vacuum-opengl" -> { "GLUT", "OpenGL", "bitmap", "bitmap-opengl", "directory", "filepath", "network", "pretty", "process", "stb-image", "vacuum" }
	"vacuum-ubigraph" -> { "containers", "hubigraph", "vacuum" }
	"vado" -> { "attoparsec", "directory", "filepath", "process", "text" }
	"valid-names" -> { "MonadRandom", "containers" }
	"validate" -> { "bytestring", "regex-compat", "safe" }
	"validation" -> { "bifunctors", "lens", "semigroupoids", "semigroups" }
	"validations" -> { "containers", "digestive-functors", "mtl", "text", "transformers" }
	"value-supply" -> {  }
	"var" -> { "transformers" }
	"variable-precision" -> { "complex-generic", "floatshow", "integer-gmp", "type-level-natural-number" }
	"vault" -> { "containers", "hashable", "unordered-containers" }
	"vcard" -> { "bytestring", "containers", "mime-directory" }
	"vcd" -> { "polyparse" }
	"vcs-revision" -> { "process" }
	"vcsgui" -> { "MissingH", "directory", "filepath", "gtk3", "mtl", "process", "vcswrapper" }
	"vcswrapper" -> { "MissingH", "directory", "filepath", "hxt", "mtl", "parsec", "process" }
	"vect" -> { "random" }
	"vect-floating" -> { "random" }
	"vect-floating-accelerate" -> { "accelerate", "vect-floating" }
	"vect-opengl" -> { "OpenGL", "vect" }
	"vector" -> { "deepseq", "ghc-prim", "primitive" }
	"vector-algorithms" -> { "bytestring", "mtl", "mwc-random", "primitive", "vector", "vector-algorithms" }
	"vector-binary" -> { "binary", "vector" }
	"vector-binary-instances" -> { "binary", "cereal", "vector" }
	"vector-buffer" -> { "deepseq", "vector" }
	"vector-bytestring" -> { "bytestring", "criterion", "deepseq", "ghc-prim", "primitive", "vector", "vector-bytestring" }
	"vector-clock" -> { "binary", "ghc-prim", "hashable" }
	"vector-conduit" -> { "conduit", "primitive", "vector" }
	"vector-fftw" -> { "primitive", "storable-complex", "vector" }
	"vector-functorlazy" -> { "ghc-prim", "primitive", "vector", "vector-th-unbox" }
	"vector-heterogenous" -> { "vector" }
	"vector-instances" -> { "comonad", "keys", "pointed", "semigroupoids", "semigroups", "vector" }
	"vector-instances-collections" -> { "collections-api", "template-haskell", "vector" }
	"vector-mmap" -> { "mmap", "primitive", "vector" }
	"vector-random" -> { "mersenne-random-pure64", "vector" }
	"vector-read-instances" -> { "vector" }
	"vector-space" -> { "Boolean", "MemoTrie", "NumInstances" }
	"vector-space-map" -> { "containers", "vector-space" }
	"vector-space-opengl" -> { "OpenGL", "vector-space" }
	"vector-space-points" -> { "vector-space" }
	"vector-static" -> { "primitive", "vector" }
	"vector-strategies" -> { "deepseq", "parallel", "vector" }
	"vector-th-unbox" -> { "template-haskell", "vector" }
	"verbalexpressions" -> { "regex-pcre" }
	"verilog" -> { "array", "polyparse" }
	"vhd" -> { "byteable", "bytestring", "cereal", "cipher-aes", "cryptohash", "directory", "filepath", "mmap", "random", "storable-endian", "text", "time" }
	"vhdl" -> { "mtl", "pretty", "regex-posix" }
	"views" -> { "mtl" }
	"vigilance" -> { "acid-state", "aeson", "async", "attoparsec", "blaze-builder", "bytestring", "classy-prelude", "configurator", "containers", "data-store", "directory", "either", "entropy", "errors", "fast-logger", "http-streams", "http-types", "interpolatedstring-perl6", "io-streams", "lens", "mime-mail", "monad-logger", "monad-loops", "mtl", "optparse-applicative", "safecopy", "stm", "template-haskell", "text", "time", "transformers", "unix", "unordered-containers", "vector", "wai", "wai-extra", "warp", "yesod", "yesod-core", "yesod-platform" }
	"vintage-basic" -> { "HUnit", "array", "directory", "filepath", "mtl", "parsec", "process", "random", "regex-base", "regex-posix", "time" }
	"vinyl" -> { "ghc-prim" }
	"vinyl-gl" -> { "GLUtil", "OpenGL", "containers", "linear", "tagged", "transformers", "vector", "vinyl" }
	"vinyl-json" -> { "aeson", "bytestring", "template-haskell", "text", "vinyl" }
	"virthualenv" -> { "Cabal", "bytestring", "directory", "file-embed", "filepath", "mtl", "process", "safe", "split" }
	"vision" -> { "MonadCatchIO-transformers", "PSQueue", "array", "containers", "directory", "filepath", "glib", "gtk", "json", "mtl", "parsec", "stm", "url", "utf8-string", "xmms2-client", "xmms2-client-glib" }
	"visual-graphrewrite" -> { "cairo", "containers", "directory", "fgl", "glade", "graphviz", "gtk", "haskell-src", "ipprint", "isevaluated", "lazysmallcheck", "parallel", "pretty", "process", "strict-concurrency", "svgcairo", "value-supply" }
	"visual-prof" -> { "containers", "directory", "filepath", "haskell-src-exts", "mtl", "pretty", "process", "regexpr", "split", "uniplate" }
	"void" -> { "hashable", "semigroups" }
	"vorbiscomment" -> { "binary-strict", "bytestring", "mtl", "utf8-string" }
	"vowpal-utils" -> { "bytestring" }
	"vte" -> { "glib", "gtk", "pango" }
	"vty" -> { "bytestring", "containers", "deepseq", "ghc-prim", "mtl", "parallel", "parsec", "string-qq", "terminfo", "unix", "utf8-string", "vector" }
	"vty-menu" -> { "vty" }
	"vty-ui" -> { "QuickCheck", "array", "bytestring", "containers", "directory", "filepath", "mtl", "old-locale", "random", "regex-base", "stm", "text", "time", "unix", "vector", "vty", "vty-ui" }
	"vty-ui-extras" -> { "regex-base", "regex-pcre", "vty", "vty-ui" }
	"wai" -> { "blaze-builder", "bytestring", "conduit", "conduit-extra", "http-types", "network", "text", "transformers", "vault" }
	"wai-app-file-cgi" -> { "array", "attoparsec", "attoparsec-conduit", "blaze-builder", "blaze-html", "bytestring", "case-insensitive", "conduit", "conduit-extra", "containers", "data-default-class", "directory", "filepath", "http-client", "http-conduit", "http-date", "http-types", "io-choice", "lifted-base", "mime-types", "network", "process", "sockaddr", "static-hash", "text", "transformers", "unix", "wai", "word8" }
	"wai-app-static" -> { "base64-bytestring", "blaze-builder", "blaze-html", "blaze-markup", "byteable", "bytestring", "containers", "cryptohash", "cryptohash-conduit", "directory", "file-embed", "filepath", "http-date", "http-types", "mime-types", "old-locale", "optparse-applicative", "system-fileio", "system-filepath", "template-haskell", "text", "time", "transformers", "unix-compat", "unordered-containers", "wai", "wai-app-static", "wai-extra", "warp", "zlib" }
	"wai-cors" -> { "attoparsec", "base-unicode-symbols", "bytestring", "case-insensitive", "charset", "errors", "http-types", "parsers", "resourcet", "transformers", "wai" }
	"wai-digestive-functors" -> { "digestive-functors", "http-types", "resourcet", "text", "wai", "wai-extra", "wai-util" }
	"wai-dispatch" -> { "text", "wai", "yesod-routes" }
	"wai-eventsource" -> { "blaze-builder", "bytestring", "conduit", "http-types", "transformers", "wai" }
	"wai-extra" -> { "ansi-terminal", "base64-bytestring", "blaze-builder", "blaze-builder-conduit", "bytestring", "case-insensitive", "conduit", "conduit-extra", "containers", "data-default", "directory", "fast-logger", "http-types", "lifted-base", "network", "old-locale", "resourcet", "stringsearch", "text", "time", "transformers", "unix", "void", "wai", "wai-logger", "word8", "zlib-conduit" }
	"wai-frontend-monadcgi" -> { "bytestring", "case-insensitive", "cgi", "conduit", "conduit-extra", "containers", "http-types", "transformers", "wai" }
	"wai-graceful" -> { "http-types", "mtl", "resourcet", "unix", "wai" }
	"wai-handler-devel" -> { "attoparsec", "bytestring", "cmdargs", "directory", "hint", "http-types", "network", "old-time", "text", "time", "transformers", "wai", "wai-extra", "warp" }
	"wai-handler-fastcgi" -> { "bytestring", "wai", "wai-extra" }
	"wai-handler-launch" -> { "blaze-builder", "blaze-builder-conduit", "bytestring", "conduit", "conduit-extra", "http-types", "process", "transformers", "wai", "warp", "zlib-conduit" }
	"wai-handler-scgi" -> { "bytestring", "wai", "wai-extra" }
	"wai-handler-snap" -> { "bytestring", "containers", "enumerator", "snap-core", "snap-server", "transformers", "wai" }
	"wai-handler-webkit" -> { "wai", "warp" }
	"wai-hastache" -> { "bytestring", "hastache", "http-types", "transformers", "wai" }
	"wai-lite" -> { "bytestring", "conduit", "http-types", "text", "transformers", "wai", "wai-extra" }
	"wai-logger" -> { "blaze-builder", "byteorder", "bytestring", "case-insensitive", "fast-logger", "http-types", "network", "unix", "unix-time", "wai" }
	"wai-logger-prefork" -> { "bytestring", "date-cache", "fast-logger", "http-types", "unix", "wai", "wai-logger" }
	"wai-middleware-cache" -> { "binary", "blaze-builder-conduit", "bytestring", "conduit", "crypto-conduit", "http-types", "pureMD5", "wai" }
	"wai-middleware-cache-redis" -> { "binary", "blaze-builder-conduit", "bytestring", "case-insensitive", "conduit", "hedis", "hedis-pile", "http-types", "transformers", "wai", "wai-middleware-cache" }
	"wai-middleware-catch" -> { "bytestring", "http-types", "lifted-base", "wai" }
	"wai-middleware-etag" -> { "base64-bytestring", "bytestring", "cryptohash", "filepath", "http-date", "http-types", "unix-compat", "unordered-containers", "wai" }
	"wai-middleware-headers" -> { "bytestring", "http-types", "wai" }
	"wai-middleware-route" -> { "bytestring", "http-types", "text", "wai", "yesod-routes" }
	"wai-middleware-static" -> { "bytestring", "containers", "directory", "filepath", "http-types", "mtl", "text", "wai" }
	"wai-predicates" -> { "attoparsec", "bytestring", "bytestring-from", "case-insensitive", "cookie", "http-types", "transformers", "vault", "vector", "wai" }
	"wai-route" -> { "bytestring", "http-types", "unordered-containers", "wai" }
	"wai-router" -> { "text", "wai" }
	"wai-routes" -> { "aeson", "blaze-builder", "bytestring", "http-types", "mtl", "template-haskell", "text", "wai", "yesod-routes" }
	"wai-routing" -> { "attoparsec", "bytestring", "bytestring-from", "case-insensitive", "cookie", "http-types", "transformers", "wai", "wai-predicates", "wai-route" }
	"wai-session" -> { "StateVar", "blaze-builder", "bytestring", "containers", "cookie", "http-types", "time", "transformers", "vault", "wai" }
	"wai-session-clientsession" -> { "bytestring", "cereal", "clientsession", "errors", "transformers", "wai-session" }
	"wai-session-tokyocabinet" -> { "bytestring", "cereal", "errors", "tokyocabinet-haskell", "transformers", "wai-session" }
	"wai-static-cache" -> { "bytestring", "cityhash", "conduit", "conduit-combinators", "containers", "http-types", "system-filepath", "text", "transformers", "vector", "vector-algorithms", "wai" }
	"wai-static-pages" -> { "blaze-builder", "bytestring", "conduit", "directory", "http-types", "text", "wai", "wai-test" }
	"wai-test" -> { "blaze-builder", "blaze-builder-conduit", "bytestring", "case-insensitive", "conduit", "conduit-extra", "containers", "cookie", "deepseq", "http-types", "network", "text", "transformers", "wai" }
	"wai-throttler" -> { "bytestring", "containers", "http-types", "time", "wai" }
	"wai-util" -> { "aeson", "blaze-builder", "bytestring", "case-insensitive", "conduit", "http-accept", "http-types", "mime-mail", "network", "resourcet", "text", "transformers", "wai", "wai-extra" }
	"wai-websockets" -> { "blaze-builder", "bytestring", "case-insensitive", "conduit", "file-embed", "http-types", "io-streams", "network", "text", "transformers", "wai", "wai-app-static", "wai-websockets", "warp", "websockets" }
	"waitfree" -> { "containers" }
	"warp" -> { "array", "blaze-builder", "blaze-builder-conduit", "bytestring", "case-insensitive", "conduit", "conduit-extra", "ghc-prim", "hashable", "http-date", "http-types", "lifted-base", "network", "network-conduit", "simple-sendfile", "streaming-commons", "text", "transformers", "unix", "unix-compat", "void", "wai" }
	"warp-dynamic" -> { "data-default", "dyre", "http-types", "wai", "warp", "warp-dynamic" }
	"warp-static" -> { "bytestring", "cmdargs", "containers", "directory", "mime-types", "text", "wai-app-static", "wai-extra", "warp" }
	"warp-tls" -> { "bytestring", "conduit", "conduit-extra", "cprng-aes", "data-default-class", "network", "network-conduit", "resourcet", "streaming-commons", "tls", "transformers", "wai", "warp" }
	"warp-tls-uid" -> { "bytestring", "certificate", "conduit", "crypto-random", "http-types", "network", "network-conduit", "pem", "tls", "tls-extra", "unix", "wai", "warp", "warp-tls-uid" }
	"watchdog" -> { "mtl", "time" }
	"watcher" -> { "basic-prelude", "containers", "hinotify", "system-fileio", "system-filepath" }
	"wavconvert" -> { "directory", "filepath", "process" }
	"wavesurfer" -> { "binary", "bytestring", "bytestring-lexing", "bytestring-show", "delimited-text" }
	"wcwidth" -> { "attoparsec", "bytestring", "containers", "setlocale", "utf8-string" }
	"weather-api" -> { "HTTP", "aeson", "attoparsec", "bytestring", "network", "utf8-string", "vector" }
	"web-css" -> { "text" }
	"web-encodings" -> { "bytestring", "directory", "failure", "old-locale", "text", "time" }
	"web-fpco" -> { "happstack-server", "safe", "snap", "snap-core", "snap-server" }
	"web-mongrel2" -> { "HStringTemplate", "bytestring", "data-default", "file-embed", "haskell98", "json", "mtl", "old-time", "parsec", "system-uuid", "template-haskell", "text", "zeromq-haskell" }
	"web-plugins" -> { "containers", "mtl", "stm", "text" }
	"web-routes" -> { "blaze-builder", "bytestring", "http-types", "mtl", "parsec", "text", "utf8-string" }
	"web-routes-boomerang" -> { "boomerang", "mtl", "parsec", "text", "web-routes" }
	"web-routes-happstack" -> { "bytestring", "happstack-server", "text", "web-routes" }
	"web-routes-hsp" -> { "hsp", "text", "web-routes" }
	"web-routes-mtl" -> { "web-routes" }
	"web-routes-quasi" -> { "path-pieces", "template-haskell", "text" }
	"web-routes-regular" -> { "parsec", "regular", "text", "web-routes" }
	"web-routes-th" -> { "parsec", "split", "template-haskell", "text", "web-routes" }
	"web-routes-transformers" -> { "transformers", "web-routes" }
	"web-routes-wai" -> { "bytestring", "conduit", "http-types", "resourcet", "text", "wai", "web-routes" }
	"webdriver" -> { "HTTP", "MonadCatchIO-transformers", "aeson", "attoparsec", "base64-bytestring", "bytestring", "cond", "data-default", "directory", "directory-tree", "filepath", "lifted-base", "monad-control", "mtl", "network", "scientific", "temporary", "text", "time", "transformers", "transformers-base", "unordered-containers", "vector", "zip-archive" }
	"webdriver-angular" -> { "aeson", "language-javascript", "template-haskell", "text", "transformers", "unordered-containers", "webdriver" }
	"webidl" -> { "HSFFIG", "LEXER", "bytestring", "parsec", "pretty", "utf8-env", "utf8-string" }
	"webify" -> { "binary", "binary-strict", "bytestring", "containers", "filepath", "hopfli", "optparse-applicative", "text", "vector", "xmlgen", "zlib" }
	"webkit" -> { "cairo", "glib", "gtk", "mtl", "pango" }
	"webkit-javascriptcore" -> { "glib", "gtk", "webkit" }
	"webkitgtk3" -> { "cairo", "glib", "gtk3", "mtl", "pango" }
	"webkitgtk3-javascriptcore" -> { "glib", "gtk3", "webkitgtk3" }
	"webserver" -> { "bytestring", "c10k", "containers", "directory", "filepath", "network", "old-locale", "parsec", "process", "stm", "time", "unix", "zlib" }
	"websockets" -> { "SHA", "attoparsec", "base64-bytestring", "binary", "blaze-builder", "bytestring", "case-insensitive", "containers", "entropy", "io-streams", "mtl", "network", "random", "text" }
	"websockets-snap" -> { "blaze-builder", "bytestring", "enumerator", "io-streams", "mtl", "snap-core", "snap-server", "websockets" }
	"webwire" -> { "base64-bytestring", "blaze-builder", "blaze-html", "bytestring", "case-insensitive", "containers", "cookie", "cprng-aes", "hamlet", "http-types", "netwire", "shakespeare-css", "shakespeare-js", "text", "time", "transformers", "wai", "wai-extra" }
	"wedding-announcement" -> {  }
	"weighted-regexp" -> { "array" }
	"weighted-search" -> {  }
	"welshy" -> { "aeson", "blaze-builder", "bytestring", "conduit", "http-types", "lifted-base", "resourcet", "text", "transformers", "unordered-containers", "wai", "warp" }
	"wheb-mongo" -> { "Wheb", "bson", "mongoDB", "mtl", "text" }
	"while-lang-parser" -> { "indents", "parsec" }
	"whim" -> { "GLUT", "OpenGL", "X11", "containers", "mtl", "process", "random" }
	"whitespace" -> { "haskell98", "random" }
	"whois" -> { "network", "split" }
	"wikipedia4epub" -> { "HTTP", "bytestring", "directory", "epub", "filepath", "haskell98", "network", "regex-base", "regex-posix", "tagsoup", "url", "xml", "zip-archive", "zlib" }
	"windowslive" -> { "Crypto", "dataenc", "mtl", "network", "parsec", "pretty", "split", "time", "urlencoded" }
	"winerror" -> {  }
	"winio" -> { "bytestring", "extensible-exceptions", "network", "winerror" }
	"witness" -> { "mtl" }
	"witty" -> { "bytestring", "network" }
	"wizards" -> { "containers", "control-monad-free", "haskeline", "mtl", "transformers" }
	"wl-pprint" -> {  }
	"wl-pprint-extras" -> { "containers", "nats", "semigroupoids", "semigroups", "text", "utf8-string" }
	"wl-pprint-terminfo" -> { "bytestring", "containers", "nats", "semigroups", "terminfo", "text", "transformers", "wl-pprint-extras" }
	"wl-pprint-text" -> { "text" }
	"woffex" -> { "binary", "bytestring", "filepath", "zlib" }
	"wol" -> { "network", "split" }
	"word24" -> {  }
	"word8" -> {  }
	"wordcloud" -> { "bytestring", "containers", "data-default", "gd", "mtl", "random" }
	"wordexp" -> { "array", "semigroups" }
	"words" -> { "directory", "text" }
	"wordsearch" -> { "array", "containers", "fclabels" }
	"wordsetdiff" -> { "ansi-terminal", "bytestring", "containers", "directory", "filepath", "hashmap", "process" }
	"wp-archivebot" -> { "HTTP", "feed", "network", "parallel", "tagsoup" }
	"wraparound" -> {  }
	"wraxml" -> { "HaXml", "containers", "data-accessor", "explicit-exception", "hxt", "hxt-filter", "polyparse", "tagchup", "tagsoup", "transformers", "utility-ht", "xml-basic" }
	"wsedit" -> { "bencode", "bytestring", "containers", "directory", "safe", "utf8-string" }
	"wtk" -> { "old-locale", "time", "transformers" }
	"wtk-gtk" -> { "containers", "gtk", "lenses", "mtl", "old-locale", "parsec", "time", "wtk" }
	"wumpus-basic" -> { "containers", "directory", "filepath", "vector-space", "wumpus-core" }
	"wumpus-core" -> { "containers", "time", "vector-space" }
	"wumpus-drawing" -> { "containers", "vector-space", "wumpus-basic", "wumpus-core" }
	"wumpus-microprint" -> { "vector-space", "wumpus-basic", "wumpus-core", "wumpus-drawing" }
	"wumpus-tree" -> { "containers", "vector-space", "wumpus-basic", "wumpus-core", "wumpus-drawing" }
	"wx" -> { "stm", "wxcore" }
	"wxAsteroids" -> { "directory", "random", "wx", "wxcore" }
	"wxFruit" -> { "Yampa", "old-time", "wx", "wxcore" }
	"wxc" -> { "wxdirect" }
	"wxcore" -> { "array", "bytestring", "containers", "directory", "filepath", "parsec", "stm", "time", "wxc", "wxdirect" }
	"wxdirect" -> { "containers", "directory", "filepath", "parsec", "process", "strict", "time" }
	"wxhnotepad" -> { "wx", "wxcore" }
	"wxturtle" -> { "Imlib", "convertible", "wx", "yjsvg", "yjtools" }
	"wyvern" -> { "ConfigFile", "bytestring", "containers", "dgs", "directory", "filepath", "mtl", "parsec", "process", "sgf", "split" }
	"x-dsp" -> { "array", "bytestring", "containers", "monads-tf", "text", "transformers", "type-level" }
	"x11-xim" -> { "X11", "utf8-string" }
	"x11-xinput" -> { "X11", "containers", "mtl" }
	"x509" -> { "asn1-encoding", "asn1-parse", "asn1-types", "bytestring", "containers", "crypto-pubkey-types", "cryptohash", "directory", "filepath", "mtl", "pem", "process", "time" }
	"x509-store" -> { "asn1-encoding", "asn1-types", "bytestring", "containers", "crypto-pubkey-types", "directory", "filepath", "mtl", "pem", "process", "time", "x509" }
	"x509-system" -> { "bytestring", "containers", "directory", "filepath", "mtl", "pem", "process", "time", "x509", "x509-store" }
	"x509-util" -> { "asn1-encoding", "asn1-types", "bytestring", "crypto-pubkey", "crypto-pubkey-types", "cryptohash", "directory", "pem", "text", "x509", "x509-store", "x509-system", "x509-validation" }
	"x509-validation" -> { "asn1-encoding", "asn1-types", "byteable", "bytestring", "containers", "crypto-pubkey", "crypto-pubkey-types", "cryptohash", "data-default-class", "directory", "filepath", "mtl", "network", "pem", "process", "time", "x509", "x509-store" }
	"xattr" -> { "bytestring", "unix" }
	"xbattbar" -> { "X11", "old-time", "select" }
	"xcb-types" -> { "mtl", "pretty", "xml" }
	"xchat-plugin" -> { "directory", "filepath", "process", "unix" }
	"xdg-basedir" -> { "directory", "filepath" }
	"xdg-userdirs" -> { "containers", "directory", "filepath", "xdg-basedir" }
	"xdot" -> { "cairo", "graphviz", "gtk", "mtl", "polyparse", "text" }
	"xenstore" -> { "bytestring", "cereal", "mtl", "network" }
	"xfconf" -> { "glib" }
	"xformat" -> {  }
	"xhaskell-library" -> { "bytestring", "containers", "ghc-prim", "mtl", "parsec", "regex-base" }
	"xhb" -> { "Xauth", "binary", "byteorder", "bytestring", "containers", "network", "parsec", "stm" }
	"xhtml" -> {  }
	"xhtml-combinators" -> { "containers", "random", "text", "transformers", "xml" }
	"xilinx-lava" -> { "array", "directory", "mtl", "old-time", "process" }
	"xine" -> { "containers" }
	"xing-api" -> { "aeson", "authenticate-oauth", "bytestring", "containers", "http-conduit", "http-types", "lifted-base", "monad-control", "resourcet", "text", "time", "transformers" }
	"xkbcommon" -> { "bytestring", "cpphs", "data-flags", "filepath", "process", "storable-record", "template-haskell", "text", "transformers" }
	"xkcd" -> { "HTTP", "bytestring", "directory", "filepath", "network", "tagsoup" }
	"xlsx" -> { "bytestring", "conduit", "containers", "data-default", "digest", "filepath", "lens", "old-locale", "old-time", "text", "time", "transformers", "utf8-string", "xml-conduit", "xml-types", "zip-archive", "zlib" }
	"xlsx-templater" -> { "bytestring", "conduit", "containers", "data-default", "parsec", "text", "time", "transformers", "xlsx" }
	"xml" -> { "bytestring", "text" }
	"xml-basic" -> { "containers", "data-accessor", "explicit-exception", "utility-ht" }
	"xml-catalog" -> { "bytestring", "conduit", "containers", "text", "transformers", "uri-conduit", "xml-conduit" }
	"xml-conduit" -> { "attoparsec", "attoparsec-conduit", "blaze-builder", "blaze-builder-conduit", "blaze-html", "blaze-markup", "bytestring", "conduit", "conduit-extra", "containers", "data-default", "deepseq", "monad-control", "resourcet", "system-filepath", "text", "transformers", "xml-types" }
	"xml-conduit-writer" -> { "containers", "dlist", "mtl", "text", "xml-conduit", "xml-types" }
	"xml-enumerator" -> { "attoparsec", "attoparsec-enumerator", "blaze-builder", "blaze-builder-enumerator", "bytestring", "containers", "data-default", "enumerator", "failure", "text", "transformers", "xml-types" }
	"xml-enumerator-combinators" -> { "containers", "enumerator", "xml-enumerator", "xml-types" }
	"xml-hamlet" -> { "containers", "parsec", "shakespeare", "template-haskell", "text", "xml-conduit" }
	"xml-helpers" -> { "xml" }
	"xml-html-conduit-lens" -> { "bytestring", "containers", "html-conduit", "lens", "text", "xml-conduit" }
	"xml-lens" -> { "containers", "lens", "text", "xml-conduit" }
	"xml-monad" -> { "mtl", "transformers", "transformers-compose", "xml" }
	"xml-parsec" -> { "HaXml", "parsec" }
	"xml-picklers" -> { "containers", "text", "xml-types" }
	"xml-prettify" -> { "cmdargs", "unix" }
	"xml-to-json" -> { "aeson", "bytestring", "containers", "curl", "hashable", "hxt", "hxt-curl", "hxt-expat", "hxt-tagsoup", "regex-posix", "text", "unordered-containers", "vector", "xml-to-json" }
	"xml-types" -> { "deepseq", "text" }
	"xml2html" -> { "xml-conduit" }
	"xml2json" -> { "aeson", "attoparsec", "attoparsec-conduit", "blaze-builder", "blaze-builder-conduit", "bytestring", "case-insensitive", "conduit", "tagstream-conduit", "text", "transformers", "unordered-containers", "vector" }
	"xml2x" -> { "array", "bio", "bytestring", "containers", "directory", "xhtml" }
	"xmlgen" -> { "blaze-builder", "bytestring", "containers", "mtl", "text" }
	"xmlhtml" -> { "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "containers", "parsec", "text", "unordered-containers" }
	"xmms2-client" -> { "containers", "haskell98", "mtl", "utf8-string" }
	"xmms2-client-glib" -> { "haskell98", "xmms2-client" }
	"xmobar" -> { "HTTP", "X11", "bytestring", "containers", "directory", "filepath", "mtl", "old-locale", "parsec", "process", "regex-compat", "stm", "time", "unix", "utf8-string" }
	"xmonad" -> { "X11", "containers", "directory", "extensible-exceptions", "filepath", "mtl", "process", "unix", "utf8-string" }
	"xmonad-bluetilebranch" -> { "X11", "containers", "directory", "extensible-exceptions", "filepath", "mtl", "process", "unix" }
	"xmonad-contrib" -> { "X11", "X11-xft", "containers", "directory", "extensible-exceptions", "mtl", "old-locale", "old-time", "process", "random", "unix", "utf8-string", "xmonad" }
	"xmonad-contrib-bluetilebranch" -> { "X11", "X11-xft", "containers", "directory", "extensible-exceptions", "mtl", "old-locale", "old-time", "process", "random", "unix", "utf8-string", "xmonad-bluetilebranch" }
	"xmonad-eval" -> { "X11", "containers", "directory", "hint", "mtl", "old-locale", "old-time", "process", "random", "unix", "xmonad", "xmonad-contrib" }
	"xmonad-extras" -> { "X11", "bytestring", "containers", "directory", "hint", "libmpd", "mtl", "network", "old-locale", "old-time", "parsec", "process", "random", "regex-posix", "split", "unix", "xmonad", "xmonad-contrib" }
	"xmonad-screenshot" -> { "gtk", "xmonad" }
	"xmonad-utils" -> { "X11", "ghc", "random", "unix" }
	"xorshift" -> { "random", "time" }
	"xosd" -> {  }
	"xournal-builder" -> { "blaze-builder", "bytestring", "double-conversion", "strict", "xournal-types" }
	"xournal-convert" -> { "HStringTemplate", "bytestring", "cairo", "cmdargs", "directory", "filepath", "mtl", "xournal-convert", "xournal-parser", "xournal-render", "xournal-types" }
	"xournal-parser" -> { "attoparsec", "attoparsec-conduit", "bytestring", "conduit", "containers", "lens", "mtl", "strict", "text", "transformers", "xml-conduit", "xml-types", "xournal-types", "zlib-conduit" }
	"xournal-render" -> { "TypeCompose", "bytestring", "cairo", "containers", "fclabels", "mtl", "poppler", "strict", "xournal-types" }
	"xournal-types" -> { "TypeCompose", "bytestring", "cereal", "containers", "lens", "strict" }
	"xsact" -> { "array", "containers", "directory", "process", "random", "unix" }
	"xsd" -> { "attoparsec", "lens", "text", "time" }
	"xsha1" -> { "HUnit", "QuickCheck", "uniplate", "vector" }
	"xslt" -> { "libxml" }
	"xss-sanitize" -> { "attoparsec", "containers", "css-text", "network", "tagsoup", "text", "utf8-string" }
	"xtc" -> { "wx", "wxcore" }
	"xtest" -> { "X11" }
	"xturtle" -> { "Imlib", "X11", "X11-xft", "convertible", "setlocale", "x11-xim", "yjsvg", "yjtools" }
	"xxhash" -> { "bytestring", "crypto-api", "tagged" }
	"yackage" -> { "Cabal", "blaze-builder", "blaze-html", "bytestring", "cmdargs", "conduit", "containers", "directory", "hamlet", "http-conduit", "http-types", "shakespeare", "tar", "text", "transformers", "unordered-containers", "vector", "wai", "warp", "yaml", "yesod-core", "yesod-form", "zlib" }
	"yahoo-web-search" -> { "HTTP", "network", "xml" }
	"yajl" -> { "bytestring", "text" }
	"yajl-enumerator" -> { "bytestring", "enumerator", "json-types", "text", "transformers", "yajl" }
	"yall" -> { "categories", "transformers" }
	"yamemo" -> { "containers", "mtl" }
	"yaml" -> { "aeson", "attoparsec", "bytestring", "conduit", "containers", "resourcet", "scientific", "text", "transformers", "unordered-containers", "vector", "yaml" }
	"yaml-config" -> { "deepseq", "failure", "text", "unordered-containers", "yaml" }
	"yaml-light" -> { "HsSyck", "bytestring", "containers" }
	"yaml-light-lens" -> { "bytestring", "bytestring-lexing", "containers", "lens", "yaml-light" }
	"yaml-rpc" -> { "bytestring", "containers", "data-default", "data-object", "data-object-yaml", "mtl", "network", "random", "template-haskell", "yaml" }
	"yaml2owl" -> { "containers", "directory", "filepath", "network", "swish", "text", "xml", "yaml" }
	"yampa-glut" -> { "GLUT", "OpenGL", "Yampa", "newtype", "vector-space" }
	"yaop" -> { "mtl", "template-haskell" }
	"yap" -> {  }
	"yarr" -> { "deepseq", "fixed-vector", "ghc-prim", "missing-foreign", "primitive", "template-haskell" }
	"yarr-image-io" -> { "yarr" }
	"yavie" -> { "Cabal", "directory", "event-driven", "filepath", "monads-tf", "process", "regexpr" }
	"ycextra" -> { "containers", "csv", "mtl", "uniplate", "yhccore" }
	"yeganesh" -> { "containers", "directory", "filepath", "process", "strict", "time", "unix", "xdg-basedir" }
	"yes-precure5-command" -> { "Cabal", "mtl", "parsec", "random", "yes-precure5-command" }
	"yesod" -> { "aeson", "blaze-html", "blaze-markup", "bytestring", "conduit-extra", "data-default", "directory", "fast-logger", "hamlet", "monad-control", "monad-logger", "network-conduit", "safe", "shakespeare", "shakespeare-css", "shakespeare-js", "template-haskell", "text", "transformers", "unix", "unordered-containers", "wai", "wai-extra", "warp", "yaml", "yesod-auth", "yesod-core", "yesod-form", "yesod-persistent" }
	"yesod-auth" -> { "aeson", "authenticate", "base16-bytestring", "blaze-html", "blaze-markup", "bytestring", "containers", "cryptohash", "data-default", "email-validate", "file-embed", "hamlet", "http-conduit", "http-types", "lifted-base", "mime-mail", "network", "persistent", "persistent-template", "pwstore-fast", "random", "resourcet", "safe", "shakespeare", "shakespeare-css", "shakespeare-js", "template-haskell", "text", "time", "transformers", "unordered-containers", "wai", "yesod-core", "yesod-form", "yesod-persistent" }
	"yesod-auth-account" -> { "base64-bytestring", "blaze-html", "bytestring", "mtl", "persistent", "pwstore-fast", "random", "text", "yesod-auth", "yesod-core", "yesod-form", "yesod-persistent" }
	"yesod-auth-bcrypt" -> { "aeson", "authenticate", "bcrypt", "blaze-html", "blaze-markup", "bytestring", "containers", "data-default", "email-validate", "file-embed", "hamlet", "http-conduit", "http-types", "lifted-base", "mime-mail", "network", "persistent", "persistent-template", "pureMD5", "pwstore-fast", "random", "resourcet", "safe", "shakespeare-css", "shakespeare-js", "template-haskell", "text", "time", "transformers", "unordered-containers", "wai", "yesod-auth", "yesod-core", "yesod-form", "yesod-persistent" }
	"yesod-auth-deskcom" -> { "aeson", "base64-bytestring", "bytestring", "cipher-aes", "cprng-aes", "crypto-api", "cryptohash", "cryptohash-cryptoapi", "data-default", "http-conduit", "http-types", "template-haskell", "text", "time", "transformers", "yesod-auth", "yesod-core" }
	"yesod-auth-fb" -> { "aeson", "bytestring", "conduit", "fb", "hamlet", "http-conduit", "lifted-base", "shakespeare", "shakespeare-js", "text", "time", "transformers", "wai", "yesod-auth", "yesod-core", "yesod-fb" }
	"yesod-auth-kerberos" -> { "authenticate-kerberos", "bytestring", "hamlet", "text", "transformers", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-auth-ldap" -> { "LDAP", "authenticate-ldap", "bytestring", "hamlet", "text", "transformers", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-auth-oauth" -> { "authenticate-oauth", "bytestring", "lifted-base", "text", "transformers", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-auth-oauth2" -> { "aeson", "bytestring", "hoauth2", "http-conduit", "http-types", "lifted-base", "text", "transformers", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-auth-pam" -> { "hamlet", "pam", "text", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-auth-smbclient" -> { "hamlet", "sys-auth-smbclient", "text", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-auth-zendesk" -> { "base16-bytestring", "bytestring", "cryptohash", "data-default", "http-conduit", "http-types", "template-haskell", "text", "time", "transformers", "wai", "yesod-auth", "yesod-core" }
	"yesod-bin" -> { "Cabal", "attoparsec", "base64-bytestring", "blaze-builder", "bytestring", "conduit", "conduit-extra", "containers", "data-default-class", "directory", "file-embed", "filepath", "fsnotify", "ghc", "ghc-paths", "http-conduit", "http-reverse-proxy", "http-types", "lifted-base", "network", "network-conduit", "optparse-applicative", "parsec", "process", "project-template", "resourcet", "shakespeare", "shakespeare-css", "shakespeare-js", "shakespeare-text", "split", "streaming-commons", "system-fileio", "system-filepath", "tar", "template-haskell", "text", "time", "transformers", "unix-compat", "unordered-containers", "wai", "warp", "yaml", "zlib" }
	"yesod-comments" -> { "bytestring", "directory", "friendly-time", "gravatar", "old-locale", "persistent", "template-haskell", "text", "time", "wai", "yesod", "yesod-auth", "yesod-form", "yesod-markdown" }
	"yesod-continuations" -> { "datetime", "hashable", "hashmap", "stm", "system-uuid", "template-haskell", "yesod" }
	"yesod-core" -> { "aeson", "attoparsec-conduit", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "case-insensitive", "cereal", "clientsession", "conduit", "conduit-extra", "containers", "cookie", "data-default", "directory", "fast-logger", "hamlet", "http-types", "lifted-base", "monad-control", "monad-logger", "mtl", "old-locale", "parsec", "path-pieces", "random", "resourcet", "safe", "shakespeare", "shakespeare-css", "shakespeare-i18n", "shakespeare-js", "template-haskell", "text", "time", "transformers", "transformers-base", "unix-compat", "vector", "wai", "wai-extra", "wai-logger", "warp", "yesod-routes" }
	"yesod-datatables" -> { "aeson", "attoparsec", "bytestring", "data-default", "persistent", "text", "yesod", "yesod-auth", "yesod-core", "yesod-default", "yesod-form", "yesod-static" }
	"yesod-default" -> { "yesod-core" }
	"yesod-dsl" -> { "Cabal", "MissingH", "array", "containers", "directory", "filepath", "mtl", "shakespeare-text", "strict", "text" }
	"yesod-eventsource" -> { "blaze-builder", "conduit", "transformers", "wai", "wai-eventsource", "yesod-core" }
	"yesod-examples" -> { "blaze-html", "bytestring", "data-object", "data-object-yaml", "hamlet", "persistent-sqlite", "persistent-template", "stm", "text", "transformers", "yesod", "yesod-core", "yesod-static" }
	"yesod-fay" -> { "aeson", "bytestring", "data-default", "directory", "fay", "monad-loops", "process", "pureMD5", "shakespeare", "shakespeare-js", "system-fileio", "system-filepath", "template-haskell", "text", "transformers", "utf8-string", "yesod-core", "yesod-form", "yesod-static" }
	"yesod-fb" -> { "aeson", "bytestring", "conduit", "crypto-api", "fb", "http-conduit", "text", "wai", "yesod-core" }
	"yesod-form" -> { "aeson", "attoparsec", "blaze-builder", "blaze-html", "blaze-markup", "byteable", "bytestring", "containers", "data-default", "email-validate", "hamlet", "network", "persistent", "resourcet", "shakespeare", "shakespeare-css", "shakespeare-js", "template-haskell", "text", "time", "transformers", "wai", "xss-sanitize", "yesod-core", "yesod-persistent" }
	"yesod-goodies" -> { "HTTP", "blaze-html", "bytestring", "directory", "old-locale", "pandoc", "pureMD5", "text", "time", "yesod", "yesod-form" }
	"yesod-json" -> { "yesod-core" }
	"yesod-links" -> { "text", "yesod-core" }
	"yesod-mangopay" -> { "aeson", "bytestring", "conduit", "containers", "data-default", "directory", "fast-logger", "hamlet", "hjsmin", "http-conduit", "http-types", "lifted-base", "mangopay", "monad-control", "monad-logger", "persistent", "persistent-postgresql", "persistent-template", "shakespeare", "shakespeare-css", "shakespeare-js", "shakespeare-text", "template-haskell", "text", "time", "wai", "wai-extra", "wai-logger", "warp", "yaml", "yesod", "yesod-auth", "yesod-core", "yesod-form", "yesod-mangopay", "yesod-persistent", "yesod-static" }
	"yesod-markdown" -> { "blaze-html", "blaze-markup", "bytestring", "directory", "hamlet", "pandoc", "persistent", "text", "xss-sanitize", "yesod-core", "yesod-form" }
	"yesod-newsfeed" -> { "blaze-html", "blaze-markup", "bytestring", "containers", "hamlet", "shakespeare", "text", "time", "xml-conduit", "yesod-core" }
	"yesod-paginate" -> { "template-haskell", "yesod" }
	"yesod-pagination" -> { "data-default", "esqueleto", "shakespeare", "text", "yesod" }
	"yesod-paginator" -> { "persistent", "resourcet", "text", "transformers", "yesod" }
	"yesod-persistent" -> { "blaze-builder", "conduit", "persistent", "persistent-template", "resource-pool", "resourcet", "transformers", "yesod-core" }
	"yesod-platform" -> { "SHA", "aeson", "ansi-terminal", "ansi-wl-pprint", "asn1-encoding", "asn1-parse", "asn1-types", "async", "attoparsec", "attoparsec-conduit", "authenticate", "base-unicode-symbols", "base16-bytestring", "base64-bytestring", "blaze-builder", "blaze-builder-conduit", "blaze-html", "blaze-markup", "byteable", "byteorder", "case-insensitive", "cereal", "cipher-aes", "cipher-rc4", "clientsession", "conduit", "conduit-extra", "connection", "cookie", "cprng-aes", "crypto-api", "crypto-cipher-types", "crypto-numbers", "crypto-pubkey", "crypto-pubkey-types", "crypto-random", "cryptohash", "cryptohash-conduit", "css-text", "data-default", "data-default-class", "data-default-instances-base", "data-default-instances-containers", "data-default-instances-dlist", "data-default-instances-old-locale", "dlist", "email-validate", "entropy", "esqueleto", "exceptions", "fast-logger", "file-embed", "hamlet", "hjsmin", "hspec", "hspec-expectations", "html-conduit", "http-client", "http-client-tls", "http-conduit", "http-date", "http-reverse-proxy", "http-types", "language-javascript", "lifted-base", "mime-mail", "mime-types", "mmorph", "monad-control", "monad-logger", "monad-loops", "network-conduit", "optparse-applicative", "path-pieces", "pem", "persistent", "persistent-template", "primitive", "publicsuffixlist", "pwstore-fast", "quickcheck-io", "resource-pool", "resourcet", "safe", "scientific", "securemem", "semigroups", "setenv", "shakespeare", "shakespeare-css", "shakespeare-i18n", "shakespeare-js", "shakespeare-text", "silently", "simple-sendfile", "skein", "socks", "stm-chans", "streaming-commons", "stringsearch", "system-fileio", "system-filepath", "tagged", "tagsoup", "tagstream-conduit", "text-stream-decode", "tf-random", "tls", "transformers-base", "unix-compat", "unordered-containers", "utf8-light", "utf8-string", "vector", "void", "wai", "wai-app-static", "wai-extra", "wai-logger", "wai-test", "warp", "warp-tls", "word8", "x509", "x509-store", "x509-system", "x509-validation", "xml-conduit", "xml-types", "xss-sanitize", "yaml", "yesod", "yesod-auth", "yesod-core", "yesod-form", "yesod-persistent", "yesod-routes", "yesod-static", "yesod-test", "zlib-conduit" }
	"yesod-pnotify" -> { "shakespeare-js", "text", "transformers", "yesod", "yesod-form" }
	"yesod-pure" -> { "fast-logger", "text", "yesod", "yesod-core" }
	"yesod-recaptcha" -> { "bytestring", "conduit", "data-default", "http-conduit", "http-types", "lifted-base", "network", "network-info", "text", "wai", "yesod-auth", "yesod-core", "yesod-form" }
	"yesod-routes" -> { "containers", "path-pieces", "template-haskell", "text", "vector" }
	"yesod-rst" -> { "blaze-html", "directory", "hamlet", "pandoc", "persistent", "text", "xss-sanitize", "yesod-core", "yesod-form" }
	"yesod-s3" -> { "bytestring", "conduit", "hS3", "network", "text", "yesod-core" }
	"yesod-session-redis" -> { "binary", "bytestring", "containers", "cookie", "hedis", "mtl", "network", "pool-conduit", "random", "text", "time", "wai", "yesod-core" }
	"yesod-sitemap" -> { "conduit", "containers", "data-default", "text", "time", "xml-conduit", "xml-types", "yesod-core" }
	"yesod-static" -> { "async", "base64-bytestring", "byteable", "bytestring", "conduit", "conduit-extra", "containers", "cryptohash", "cryptohash-conduit", "data-default", "directory", "file-embed", "filepath", "hjsmin", "http-types", "mime-types", "old-time", "process", "resourcet", "shakespeare-css", "system-fileio", "system-filepath", "template-haskell", "text", "transformers", "unix-compat", "unordered-containers", "wai", "wai-app-static", "yesod-core" }
	"yesod-static-angular" -> { "aeson", "blaze-builder", "blaze-markup", "bytestring", "data-default", "directory", "filepath", "hamlet", "language-javascript", "mime-types", "shakespeare-css", "shakespeare-js", "template-haskell", "text", "yesod", "yesod-core", "yesod-static", "yesod-static-angular" }
	"yesod-tableview" -> { "hamlet", "persistent", "yesod" }
	"yesod-test" -> { "HUnit", "attoparsec", "blaze-builder", "blaze-html", "blaze-markup", "bytestring", "case-insensitive", "containers", "cookie", "hspec", "html-conduit", "http-types", "monad-control", "network", "persistent", "text", "time", "transformers", "wai", "wai-test", "xml-conduit", "xml-types", "yesod-core" }
	"yesod-test-json" -> { "HUnit", "aeson", "bytestring", "conduit", "hspec", "http-types", "text", "transformers", "wai", "wai-test", "yesod-default" }
	"yesod-text-markdown" -> { "hamlet", "markdown", "persistent", "text", "yesod-core", "yesod-form", "yesod-persistent" }
	"yesod-vend" -> { "blaze-html", "hamlet", "monad-logger", "persistent", "persistent-sqlite", "resourcet", "text", "yesod", "yesod-form", "yesod-vend" }
	"yesod-websockets" -> { "async", "conduit", "monad-control", "transformers", "wai-websockets", "websockets", "yesod-core" }
	"yhccore" -> { "containers", "mtl", "pretty", "uniplate" }
	"yi" -> { "Cabal", "Diff", "QuickCheck", "array", "binary", "bytestring", "cautious-file", "concrete-typerep", "containers", "data-accessor", "data-accessor-mtl", "data-accessor-template", "derive", "directory", "dlist", "dyre", "filepath", "fingertree", "hashable", "hint", "mtl", "old-locale", "parsec", "pointedlist", "process", "random", "regex-base", "regex-tdfa", "split", "template-haskell", "time", "uniplate", "unix", "unix-compat", "unordered-containers", "utf8-string", "vty", "xdg-basedir", "yi" }
	"yi-contrib" -> { "containers", "data-accessor", "directory", "filepath", "mtl", "split", "yi" }
	"yi-gtk" -> {  }
	"yi-monokai" -> { "yi" }
	"yi-vty" -> {  }
	"yices" -> { "parsec", "process" }
	"yices-easy" -> { "bindings-yices", "containers", "transformers" }
	"yices-painless" -> { "containers", "pretty", "strict-concurrency", "vector" }
	"yjftp" -> { "directory", "ftphs", "haskeline", "hsConfigure", "mtl", "process", "unix" }
	"yjftp-libs" -> { "directory", "ftphs", "mtl", "process", "unix" }
	"yjsvg" -> { "HaXml" }
	"yjtools" -> {  }
	"yocto" -> { "containers", "parsec" }
	"yoko" -> { "bifunctors", "containers", "invariant", "kinds", "mtl", "records", "semigroups", "template-haskell", "th-sccs", "type-cereal", "type-digits", "type-equality", "type-functions", "type-ord", "type-ord-spine-cereal", "type-spine" }
	"york-lava" -> { "containers", "haskell98" }
	"youtube" -> { "bytestring", "process", "utility-ht" }
	"yst" -> { "HDBC", "HDBC-sqlite3", "HStringTemplate", "aeson", "containers", "csv", "directory", "filepath", "old-locale", "old-time", "pandoc", "parsec", "split", "text", "time", "unordered-containers", "xhtml", "yaml" }
	"yuiGrid" -> {  }
	"yuuko" -> { "bytestring", "containers", "curl", "deepseq", "directory", "filepath", "haskell98", "mtl", "network", "parsec" }
	"z3" -> { "containers", "mtl" }
	"zampolit" -> { "HSH", "MissingH", "cmdargs", "containers", "directory", "filepath", "old-locale", "parsec", "time" }
	"zasni-gerna" -> { "papillon" }
	"zcache" -> { "array", "containers", "mersenne-random-pure64" }
	"zenc" -> {  }
	"zeno" -> { "array", "containers", "directory", "ghc", "ghc-paths", "mtl", "parallel", "process", "random", "text", "transformers" }
	"zeromq-haskell" -> { "bytestring", "containers" }
	"zeromq3-conduit" -> { "bytestring", "conduit", "lifted-base", "monad-control", "mtl", "resourcet", "transformers", "zeromq3-haskell" }
	"zeromq3-haskell" -> { "MonadCatchIO-transformers", "async", "bytestring", "containers", "semigroups", "transformers" }
	"zeromq4-haskell" -> { "async", "bytestring", "containers", "exceptions", "semigroups", "transformers" }
	"zeroth" -> { "Cabal", "derive", "directory", "filepath", "haskell-src-exts", "hskeleton", "monoid-record", "process", "syb", "template-haskell" }
	"zigbee-znet25" -> { "MissingH", "bytestring", "cereal", "mtl", "transformers" }
	"zip-archive" -> { "array", "binary", "bytestring", "containers", "digest", "directory", "filepath", "mtl", "old-time", "pretty", "text", "time", "unix", "zip-archive", "zlib" }
	"zip-conduit" -> { "bytestring", "cereal", "conduit", "digest", "directory", "filepath", "mtl", "old-time", "time", "transformers", "utf8-string", "zlib-conduit" }
	"zipedit" -> { "directory", "mtl", "process" }
	"zipper" -> { "multirec" }
	"zippers" -> { "lens", "profunctors", "semigroupoids" }
	"zippo" -> { "mtl", "yall" }
	"zlib" -> { "bytestring" }
	"zlib-bindings" -> { "bytestring", "zlib" }
	"zlib-conduit" -> { "conduit" }
	"zlib-enum" -> { "bytestring", "enumerator", "transformers", "zlib-bindings" }
	"zmcat" -> { "bytestring", "zeromq3-haskell", "zmcat" }
	"zmidi-core" -> { "binary", "bytestring", "containers" }
	"zmqat" -> { "bytestring", "utf8-string", "zeromq-haskell" }
	"zoneinfo" -> { "time" }
	"zoom" -> { "directory", "filepath", "ghc", "hamlet", "hint", "mtl", "template-haskell", "text" }
	"zoom-cache" -> { "ListLike", "MonadCatchIO-transformers", "QuickCheck", "blaze-builder", "bytestring", "containers", "data-default", "iteratee", "iteratee-compress", "mtl", "old-locale", "time", "transformers", "type-level", "ui-command", "unix", "zlib" }
	"zoom-cache-pcm" -> { "ListLike", "blaze-builder", "bytestring", "containers", "iteratee", "mtl", "type-level", "zoom-cache" }
	"zoom-cache-sndfile" -> { "bytestring", "containers", "data-default", "hsndfile", "hsndfile-vector", "mtl", "ui-command", "vector", "zoom-cache", "zoom-cache-pcm" }
	"zot" -> { "monads-tf" }
	"zsh-battery" -> { "directory", "filepath", "mtl" }
	"ztail" -> { "array", "containers", "filepath", "hinotify", "old-locale", "process", "regex-compat", "time", "unix" }
}

